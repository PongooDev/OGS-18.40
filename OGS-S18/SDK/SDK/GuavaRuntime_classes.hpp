#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GuavaRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class GuavaRuntime.BuildingGameplayActorGuavaEnemy
// 0x0010 (0x08C8 - 0x08B8)
class ABuildingGameplayActorGuavaEnemy : public ABuildingGameplayActor
{
public:
	uint8                                         Pad_8B8[0x8];                                      // 0x08B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinCritDamageNumberMultiplier;                     // 0x08C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCritDamageNumberMultiplier;                     // 0x08C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool IsCriticalHit(const struct FHitResult& HitResult) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildingGameplayActorGuavaEnemy">();
	}
	static class ABuildingGameplayActorGuavaEnemy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuildingGameplayActorGuavaEnemy>();
	}
};
static_assert(alignof(ABuildingGameplayActorGuavaEnemy) == 0x000008, "Wrong alignment on ABuildingGameplayActorGuavaEnemy");
static_assert(sizeof(ABuildingGameplayActorGuavaEnemy) == 0x0008C8, "Wrong size on ABuildingGameplayActorGuavaEnemy");
static_assert(offsetof(ABuildingGameplayActorGuavaEnemy, MinCritDamageNumberMultiplier) == 0x0008C0, "Member 'ABuildingGameplayActorGuavaEnemy::MinCritDamageNumberMultiplier' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaEnemy, MaxCritDamageNumberMultiplier) == 0x0008C4, "Member 'ABuildingGameplayActorGuavaEnemy::MaxCritDamageNumberMultiplier' has a wrong offset!");

// Class GuavaRuntime.BuildingGameplayActorGuavaCaretaker
// 0x0090 (0x0958 - 0x08C8)
class ABuildingGameplayActorGuavaCaretaker final : public ABuildingGameplayActorGuavaEnemy
{
public:
	struct FVector                                ClientInterpolatedVelocity;                        // 0x08C8(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       PathSplineComponent;                               // 0x08D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed2DValue;                                   // 0x08E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkPlayRateValueMultiplier;                       // 0x08E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedWarpingValueMultiplier;                   // 0x08E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkPlayRateValue;                                 // 0x08EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedWarpingValue;                             // 0x08F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentDeltaTime;                                  // 0x08F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Velocity;                                          // 0x08F8(0x000C)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PreviousUpdateLocation;                            // 0x0904(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentSplineSpeed;                                // 0x0910(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TargetMovementSpeed;                               // 0x0914(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MovementInterpRate;                                // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotationInterpRate;                                // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerCurrentPathDistance;                         // 0x0920(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientCurrentPathDistance;                         // 0x0924(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TotalPathDistance;                                 // 0x0928(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GroundCheckVerticalOffset;                         // 0x092C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FloorHitImpactNormal;                              // 0x0930(0x000C)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ServerLocation;                                    // 0x093C(0x000C)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientZLocationInterpRate;                         // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientLocationDesyncDistanceSqThreshold;           // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientVelocityDesyncThreshold;                     // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientVelocityInterpRate;                          // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void NativeUpdateVelocity();
	void NativeUpdateWalking();
	void NativeUpdateWalkPlayRateAndSpeedWarpingValues();

	class UCapsuleComponent* GetCapsuleComponent() const;
	float GetCurrentPathDistance() const;
	float GetCurrentSpeed() const;
	class USkeletalMeshComponent* GetSkeletalMeshComponent() const;
	void GetWalkPlayRateAndSpeedWarpingValues(float* OutWalkPlayRateValue, float* OutWalkSpeedWarpingValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildingGameplayActorGuavaCaretaker">();
	}
	static class ABuildingGameplayActorGuavaCaretaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuildingGameplayActorGuavaCaretaker>();
	}
};
static_assert(alignof(ABuildingGameplayActorGuavaCaretaker) == 0x000008, "Wrong alignment on ABuildingGameplayActorGuavaCaretaker");
static_assert(sizeof(ABuildingGameplayActorGuavaCaretaker) == 0x000958, "Wrong size on ABuildingGameplayActorGuavaCaretaker");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ClientInterpolatedVelocity) == 0x0008C8, "Member 'ABuildingGameplayActorGuavaCaretaker::ClientInterpolatedVelocity' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, PathSplineComponent) == 0x0008D8, "Member 'ABuildingGameplayActorGuavaCaretaker::PathSplineComponent' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, MaxSpeed2DValue) == 0x0008E0, "Member 'ABuildingGameplayActorGuavaCaretaker::MaxSpeed2DValue' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, WalkPlayRateValueMultiplier) == 0x0008E4, "Member 'ABuildingGameplayActorGuavaCaretaker::WalkPlayRateValueMultiplier' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, WalkSpeedWarpingValueMultiplier) == 0x0008E8, "Member 'ABuildingGameplayActorGuavaCaretaker::WalkSpeedWarpingValueMultiplier' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, WalkPlayRateValue) == 0x0008EC, "Member 'ABuildingGameplayActorGuavaCaretaker::WalkPlayRateValue' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, WalkSpeedWarpingValue) == 0x0008F0, "Member 'ABuildingGameplayActorGuavaCaretaker::WalkSpeedWarpingValue' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, CurrentDeltaTime) == 0x0008F4, "Member 'ABuildingGameplayActorGuavaCaretaker::CurrentDeltaTime' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, Velocity) == 0x0008F8, "Member 'ABuildingGameplayActorGuavaCaretaker::Velocity' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, PreviousUpdateLocation) == 0x000904, "Member 'ABuildingGameplayActorGuavaCaretaker::PreviousUpdateLocation' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, CurrentSplineSpeed) == 0x000910, "Member 'ABuildingGameplayActorGuavaCaretaker::CurrentSplineSpeed' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, TargetMovementSpeed) == 0x000914, "Member 'ABuildingGameplayActorGuavaCaretaker::TargetMovementSpeed' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, MovementInterpRate) == 0x000918, "Member 'ABuildingGameplayActorGuavaCaretaker::MovementInterpRate' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, RotationInterpRate) == 0x00091C, "Member 'ABuildingGameplayActorGuavaCaretaker::RotationInterpRate' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ServerCurrentPathDistance) == 0x000920, "Member 'ABuildingGameplayActorGuavaCaretaker::ServerCurrentPathDistance' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ClientCurrentPathDistance) == 0x000924, "Member 'ABuildingGameplayActorGuavaCaretaker::ClientCurrentPathDistance' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, TotalPathDistance) == 0x000928, "Member 'ABuildingGameplayActorGuavaCaretaker::TotalPathDistance' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, GroundCheckVerticalOffset) == 0x00092C, "Member 'ABuildingGameplayActorGuavaCaretaker::GroundCheckVerticalOffset' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, FloorHitImpactNormal) == 0x000930, "Member 'ABuildingGameplayActorGuavaCaretaker::FloorHitImpactNormal' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ServerLocation) == 0x00093C, "Member 'ABuildingGameplayActorGuavaCaretaker::ServerLocation' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ClientZLocationInterpRate) == 0x000948, "Member 'ABuildingGameplayActorGuavaCaretaker::ClientZLocationInterpRate' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ClientLocationDesyncDistanceSqThreshold) == 0x00094C, "Member 'ABuildingGameplayActorGuavaCaretaker::ClientLocationDesyncDistanceSqThreshold' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ClientVelocityDesyncThreshold) == 0x000950, "Member 'ABuildingGameplayActorGuavaCaretaker::ClientVelocityDesyncThreshold' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorGuavaCaretaker, ClientVelocityInterpRate) == 0x000954, "Member 'ABuildingGameplayActorGuavaCaretaker::ClientVelocityInterpRate' has a wrong offset!");

// Class GuavaRuntime.GuavaAnimInstance_BGACaretaker
// 0x0070 (0x0330 - 0x02C0)
class UGuavaAnimInstance_BGACaretaker final : public UAnimInstance
{
public:
	class ABuildingGameplayActorGuavaCaretaker*   OwningCaretaker;                                   // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CaretakerSkelMeshComponent;                        // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CaretakerCapsuleComponent;                         // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMoving;                                         // 0x02D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovingThresholdSpeed;                              // 0x02D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkPlayRateValue;                                 // 0x02D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedWarpingValue;                             // 0x02DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimOffsetCurveValue;                               // 0x02E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurveNameAimOffset;                                // 0x02E4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurveNameFootPhase;                                // 0x02EC(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SocketNameFXChest;                                 // 0x02F4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParamNameChestSocketLocation;                      // 0x02FC(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ParamNameChestSocketVector;                        // 0x0304(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FirstFootPhaseMin;                                 // 0x030C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SecondFootPhaseMin;                                // 0x0310(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThirdFootPhaseMin;                                 // 0x0314(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FourthFootPhaseMin;                                // 0x0318(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FootPhaseMax;                                      // 0x031C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFootPhase_StopLeftPlant;                          // 0x0320(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFootPhase_StopLeftPass;                           // 0x0321(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFootPhase_StopRightPlant;                         // 0x0322(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFootPhase_StopRightPass;                          // 0x0323(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0xC];                                      // 0x0324(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GuavaAnimInstance_BGACaretaker">();
	}
	static class UGuavaAnimInstance_BGACaretaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGuavaAnimInstance_BGACaretaker>();
	}
};
static_assert(alignof(UGuavaAnimInstance_BGACaretaker) == 0x000010, "Wrong alignment on UGuavaAnimInstance_BGACaretaker");
static_assert(sizeof(UGuavaAnimInstance_BGACaretaker) == 0x000330, "Wrong size on UGuavaAnimInstance_BGACaretaker");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, OwningCaretaker) == 0x0002B8, "Member 'UGuavaAnimInstance_BGACaretaker::OwningCaretaker' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, CaretakerSkelMeshComponent) == 0x0002C0, "Member 'UGuavaAnimInstance_BGACaretaker::CaretakerSkelMeshComponent' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, CaretakerCapsuleComponent) == 0x0002C8, "Member 'UGuavaAnimInstance_BGACaretaker::CaretakerCapsuleComponent' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, bIsMoving) == 0x0002D0, "Member 'UGuavaAnimInstance_BGACaretaker::bIsMoving' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, MovingThresholdSpeed) == 0x0002D4, "Member 'UGuavaAnimInstance_BGACaretaker::MovingThresholdSpeed' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, WalkPlayRateValue) == 0x0002D8, "Member 'UGuavaAnimInstance_BGACaretaker::WalkPlayRateValue' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, WalkSpeedWarpingValue) == 0x0002DC, "Member 'UGuavaAnimInstance_BGACaretaker::WalkSpeedWarpingValue' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, AimOffsetCurveValue) == 0x0002E0, "Member 'UGuavaAnimInstance_BGACaretaker::AimOffsetCurveValue' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, CurveNameAimOffset) == 0x0002E4, "Member 'UGuavaAnimInstance_BGACaretaker::CurveNameAimOffset' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, CurveNameFootPhase) == 0x0002EC, "Member 'UGuavaAnimInstance_BGACaretaker::CurveNameFootPhase' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, SocketNameFXChest) == 0x0002F4, "Member 'UGuavaAnimInstance_BGACaretaker::SocketNameFXChest' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, ParamNameChestSocketLocation) == 0x0002FC, "Member 'UGuavaAnimInstance_BGACaretaker::ParamNameChestSocketLocation' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, ParamNameChestSocketVector) == 0x000304, "Member 'UGuavaAnimInstance_BGACaretaker::ParamNameChestSocketVector' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, FirstFootPhaseMin) == 0x00030C, "Member 'UGuavaAnimInstance_BGACaretaker::FirstFootPhaseMin' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, SecondFootPhaseMin) == 0x000310, "Member 'UGuavaAnimInstance_BGACaretaker::SecondFootPhaseMin' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, ThirdFootPhaseMin) == 0x000314, "Member 'UGuavaAnimInstance_BGACaretaker::ThirdFootPhaseMin' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, FourthFootPhaseMin) == 0x000318, "Member 'UGuavaAnimInstance_BGACaretaker::FourthFootPhaseMin' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, FootPhaseMax) == 0x00031C, "Member 'UGuavaAnimInstance_BGACaretaker::FootPhaseMax' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, bFootPhase_StopLeftPlant) == 0x000320, "Member 'UGuavaAnimInstance_BGACaretaker::bFootPhase_StopLeftPlant' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, bFootPhase_StopLeftPass) == 0x000321, "Member 'UGuavaAnimInstance_BGACaretaker::bFootPhase_StopLeftPass' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, bFootPhase_StopRightPlant) == 0x000322, "Member 'UGuavaAnimInstance_BGACaretaker::bFootPhase_StopRightPlant' has a wrong offset!");
static_assert(offsetof(UGuavaAnimInstance_BGACaretaker, bFootPhase_StopRightPass) == 0x000323, "Member 'UGuavaAnimInstance_BGACaretaker::bFootPhase_StopRightPass' has a wrong offset!");

}

