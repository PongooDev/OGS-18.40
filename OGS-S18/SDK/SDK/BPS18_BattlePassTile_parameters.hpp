#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPS18_BattlePassTile

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "BattlePassBase_structs.hpp"


namespace SDK::Params
{

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.ExecuteUbergraph_BPS18_BattlePassTile
// 0x0238 (0x0238 - 0x0000)
struct BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattlePassTileAvailabilityStates             Temp_byte_Variable_2;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattlePassTileAvailabilityStates             Temp_byte_Variable_10;                             // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_11;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_12;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_13;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_14;                             // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_15;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_16;                             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_17;                             // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicFontMaterial_ReturnValue;       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_2;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicFontMaterial_ReturnValue_1;     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattlePassCurrencyType                       K2Node_Event_Currency;                             // 0x00B0(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Price;                                // 0x00B4(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHasEnougCurrency;                    // 0x00B8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x00C0(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsFreeTrack;                         // 0x00E1(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOwnsBattlePass;                      // 0x00E2(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_2;       // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicFontMaterial_ReturnValue_2;     // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_3;         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_3;       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_4;       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_3;       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_5;       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattlePassTileAvailabilityStates             CallFunc_GetState_ReturnValue;                     // 0x0138(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_8;                             // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_3;                           // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Progress;                             // 0x014C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CurrentlyOwnedRewards;                // 0x0150(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_NeededRewards;                        // 0x0154(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBattlePassTileAvailabilityStates             K2Node_Event_NewState;                             // 0x0159(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_7;                           // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_4;         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_10;                            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HoldPercentage_1;                     // 0x0170(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInUseSecondaryHoldAnimation_1;       // 0x0174(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_HoldPercentage;                       // 0x0178(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInUseSecondaryHoldAnimation;         // 0x017C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAffordable_ReturnValue;                 // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17F[0x1];                                      // 0x017F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_8;                           // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_4;       // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_5;       // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_6;       // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_7;       // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_OwnsBattlePass;                       // 0x01A8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ParentUnlocked;                       // 0x01A9(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HasRemainingPrerequisites;            // 0x01AA(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsDelayed;                           // 0x01AB(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_9;                           // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_10;                          // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBattlePassTileAvailabilityStates             Temp_byte_Variable_18;                             // 0x01AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_11;                          // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_12;                          // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_11;                            // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_12;                            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       K2Node_Select_Default_13;                          // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default_14;                          // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue_1;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_12;                             // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_15;                          // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_6;       // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_5;         // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_6;         // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile) == 0x000008, "Wrong alignment on BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile");
static_assert(sizeof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile) == 0x000238, "Wrong size on BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, EntryPoint) == 0x000000, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable) == 0x000004, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable) == 0x000010, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_1) == 0x000011, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_1) == 0x000012, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable) == 0x000014, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_1) == 0x000018, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_2) == 0x00001C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_2) == 0x000020, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_3) == 0x000024, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_3) == 0x000028, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_4) == 0x00002C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_5) == 0x000030, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_4) == 0x000034, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_int_Variable) == 0x000038, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_int_Variable_1) == 0x00003C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_2) == 0x000040, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_3) == 0x000041, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_4) == 0x000042, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_5) == 0x000043, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_5) == 0x000044, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_6) == 0x000045, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_7) == 0x000046, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_6) == 0x000047, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_8) == 0x000048, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_9) == 0x000049, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_10) == 0x00004A, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_11) == 0x00004B, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_12) == 0x00004C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_13) == 0x00004D, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_7) == 0x00004E, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_14) == 0x00004F, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_15) == 0x000050, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_8) == 0x000051, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_9) == 0x000052, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_10) == 0x000053, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_16) == 0x000054, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_17) == 0x000055, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000058, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicFontMaterial_ReturnValue) == 0x000060, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicFontMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue) == 0x000068, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000070, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_6) == 0x000078, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationReverse_ReturnValue_2) == 0x000080, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationReverse_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000088, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000090, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000098, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicFontMaterial_ReturnValue_1) == 0x0000A0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicFontMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x0000A8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_Currency) == 0x0000B0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_Currency' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_Price) == 0x0000B4, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_Price' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_bHasEnougCurrency) == 0x0000B8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_bHasEnougCurrency' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Conv_IntToText_ReturnValue) == 0x0000C0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000D8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000D9, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default) == 0x0000DC, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_SwitchEnum_CmpSuccess) == 0x0000E0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_bIsFreeTrack) == 0x0000E1, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_bIsFreeTrack' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_bOwnsBattlePass) == 0x0000E2, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_bOwnsBattlePass' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Not_PreBool_ReturnValue) == 0x0000E3, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue_2) == 0x0000E8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_BooleanAND_ReturnValue) == 0x0000F0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_1) == 0x0000F1, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_2) == 0x0000F4, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicFontMaterial_ReturnValue_2) == 0x0000F8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicFontMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicMaterial_ReturnValue_3) == 0x000100, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicMaterial_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_7) == 0x000108, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationReverse_ReturnValue_3) == 0x000110, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationReverse_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationReverse_ReturnValue_4) == 0x000118, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationReverse_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue_3) == 0x000120, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_11) == 0x000128, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationReverse_ReturnValue_5) == 0x000130, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationReverse_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetState_ReturnValue) == 0x000138, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_8) == 0x00013C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000140, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_BooleanAND_ReturnValue_1) == 0x000141, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_3) == 0x000144, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_4) == 0x000148, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_Progress) == 0x00014C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_Progress' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_CurrentlyOwnedRewards) == 0x000150, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_CurrentlyOwnedRewards' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_NeededRewards) == 0x000154, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_NeededRewards' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Greater_IntInt_ReturnValue) == 0x000158, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_NewState) == 0x000159, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_5) == 0x00015A, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_6) == 0x00015B, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_7) == 0x00015C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_SwitchEnum_CmpSuccess_1) == 0x00015D, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicMaterial_ReturnValue_4) == 0x000160, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicMaterial_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_9) == 0x000168, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_10) == 0x00016C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_HoldPercentage_1) == 0x000170, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_HoldPercentage_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_bInUseSecondaryHoldAnimation_1) == 0x000174, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_bInUseSecondaryHoldAnimation_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_HoldPercentage) == 0x000178, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_HoldPercentage' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_bInUseSecondaryHoldAnimation) == 0x00017C, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_bInUseSecondaryHoldAnimation' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00017D, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_IsAffordable_ReturnValue) == 0x00017E, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_IsAffordable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_8) == 0x000180, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue_4) == 0x000188, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue_5) == 0x000190, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue_6) == 0x000198, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationForward_ReturnValue_7) == 0x0001A0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationForward_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_OwnsBattlePass) == 0x0001A8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_OwnsBattlePass' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_ParentUnlocked) == 0x0001A9, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_ParentUnlocked' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_HasRemainingPrerequisites) == 0x0001AA, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_HasRemainingPrerequisites' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Event_bIsDelayed) == 0x0001AB, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Event_bIsDelayed' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_9) == 0x0001AC, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_10) == 0x0001AD, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_BooleanAND_ReturnValue_2) == 0x0001AE, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_byte_Variable_18) == 0x0001AF, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_byte_Variable_18' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_11) == 0x0001B0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_12) == 0x0001B4, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_12' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_11) == 0x0001B8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_float_Variable_12) == 0x0001BC, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_float_Variable_12' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_13) == 0x0001C0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_13' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetEndTime_ReturnValue) == 0x0001C8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_14) == 0x0001D0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_14' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0001D8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetEndTime_ReturnValue_1) == 0x0001DC, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, Temp_bool_Variable_12) == 0x0001E0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001E4, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, K2Node_Select_Default_15) == 0x0001E8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::K2Node_Select_Default_15' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001EC, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001F0, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimation_ReturnValue) == 0x0001F8, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000200, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000204, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000208, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimation_ReturnValue_1) == 0x000210, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimationReverse_ReturnValue_6) == 0x000218, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimationReverse_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_PlayAnimation_ReturnValue_2) == 0x000220, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicMaterial_ReturnValue_5) == 0x000228, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicMaterial_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile, CallFunc_GetDynamicMaterial_ReturnValue_6) == 0x000230, "Member 'BPS18_BattlePassTile_C_ExecuteUbergraph_BPS18_BattlePassTile::CallFunc_GetDynamicMaterial_ReturnValue_6' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.OnLockedStateUpdated
// 0x0004 (0x0004 - 0x0000)
struct BPS18_BattlePassTile_C_OnLockedStateUpdated final
{
public:
	bool                                          OwnsBattlePass;                                    // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ParentUnlocked;                                    // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasRemainingPrerequisites;                         // 0x0002(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsDelayed;                                        // 0x0003(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPS18_BattlePassTile_C_OnLockedStateUpdated) == 0x000001, "Wrong alignment on BPS18_BattlePassTile_C_OnLockedStateUpdated");
static_assert(sizeof(BPS18_BattlePassTile_C_OnLockedStateUpdated) == 0x000004, "Wrong size on BPS18_BattlePassTile_C_OnLockedStateUpdated");
static_assert(offsetof(BPS18_BattlePassTile_C_OnLockedStateUpdated, OwnsBattlePass) == 0x000000, "Member 'BPS18_BattlePassTile_C_OnLockedStateUpdated::OwnsBattlePass' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnLockedStateUpdated, ParentUnlocked) == 0x000001, "Member 'BPS18_BattlePassTile_C_OnLockedStateUpdated::ParentUnlocked' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnLockedStateUpdated, HasRemainingPrerequisites) == 0x000002, "Member 'BPS18_BattlePassTile_C_OnLockedStateUpdated::HasRemainingPrerequisites' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnLockedStateUpdated, bIsDelayed) == 0x000003, "Member 'BPS18_BattlePassTile_C_OnLockedStateUpdated::bIsDelayed' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.BP_OnHoldEnded
// 0x0008 (0x0008 - 0x0000)
struct BPS18_BattlePassTile_C_BP_OnHoldEnded final
{
public:
	float                                         HoldPercentage;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInUseSecondaryHoldAnimation;                      // 0x0004(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPS18_BattlePassTile_C_BP_OnHoldEnded) == 0x000004, "Wrong alignment on BPS18_BattlePassTile_C_BP_OnHoldEnded");
static_assert(sizeof(BPS18_BattlePassTile_C_BP_OnHoldEnded) == 0x000008, "Wrong size on BPS18_BattlePassTile_C_BP_OnHoldEnded");
static_assert(offsetof(BPS18_BattlePassTile_C_BP_OnHoldEnded, HoldPercentage) == 0x000000, "Member 'BPS18_BattlePassTile_C_BP_OnHoldEnded::HoldPercentage' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_BP_OnHoldEnded, bInUseSecondaryHoldAnimation) == 0x000004, "Member 'BPS18_BattlePassTile_C_BP_OnHoldEnded::bInUseSecondaryHoldAnimation' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.BP_OnHoldStarted
// 0x0008 (0x0008 - 0x0000)
struct BPS18_BattlePassTile_C_BP_OnHoldStarted final
{
public:
	float                                         HoldPercentage;                                    // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInUseSecondaryHoldAnimation;                      // 0x0004(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPS18_BattlePassTile_C_BP_OnHoldStarted) == 0x000004, "Wrong alignment on BPS18_BattlePassTile_C_BP_OnHoldStarted");
static_assert(sizeof(BPS18_BattlePassTile_C_BP_OnHoldStarted) == 0x000008, "Wrong size on BPS18_BattlePassTile_C_BP_OnHoldStarted");
static_assert(offsetof(BPS18_BattlePassTile_C_BP_OnHoldStarted, HoldPercentage) == 0x000000, "Member 'BPS18_BattlePassTile_C_BP_OnHoldStarted::HoldPercentage' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_BP_OnHoldStarted, bInUseSecondaryHoldAnimation) == 0x000004, "Member 'BPS18_BattlePassTile_C_BP_OnHoldStarted::bInUseSecondaryHoldAnimation' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BPS18_BattlePassTile_C_OnStateChanged final
{
public:
	EBattlePassTileAvailabilityStates             NewState;                                          // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS18_BattlePassTile_C_OnStateChanged) == 0x000001, "Wrong alignment on BPS18_BattlePassTile_C_OnStateChanged");
static_assert(sizeof(BPS18_BattlePassTile_C_OnStateChanged) == 0x000001, "Wrong size on BPS18_BattlePassTile_C_OnStateChanged");
static_assert(offsetof(BPS18_BattlePassTile_C_OnStateChanged, NewState) == 0x000000, "Member 'BPS18_BattlePassTile_C_OnStateChanged::NewState' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.OnLockedProgressUpdated
// 0x000C (0x000C - 0x0000)
struct BPS18_BattlePassTile_C_OnLockedProgressUpdated final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentlyOwnedRewards;                             // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeededRewards;                                     // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS18_BattlePassTile_C_OnLockedProgressUpdated) == 0x000004, "Wrong alignment on BPS18_BattlePassTile_C_OnLockedProgressUpdated");
static_assert(sizeof(BPS18_BattlePassTile_C_OnLockedProgressUpdated) == 0x00000C, "Wrong size on BPS18_BattlePassTile_C_OnLockedProgressUpdated");
static_assert(offsetof(BPS18_BattlePassTile_C_OnLockedProgressUpdated, Progress) == 0x000000, "Member 'BPS18_BattlePassTile_C_OnLockedProgressUpdated::Progress' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnLockedProgressUpdated, CurrentlyOwnedRewards) == 0x000004, "Member 'BPS18_BattlePassTile_C_OnLockedProgressUpdated::CurrentlyOwnedRewards' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnLockedProgressUpdated, NeededRewards) == 0x000008, "Member 'BPS18_BattlePassTile_C_OnLockedProgressUpdated::NeededRewards' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.OnSetTrack
// 0x0002 (0x0002 - 0x0000)
struct BPS18_BattlePassTile_C_OnSetTrack final
{
public:
	bool                                          bIsFreeTrack;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOwnsBattlePass;                                   // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPS18_BattlePassTile_C_OnSetTrack) == 0x000001, "Wrong alignment on BPS18_BattlePassTile_C_OnSetTrack");
static_assert(sizeof(BPS18_BattlePassTile_C_OnSetTrack) == 0x000002, "Wrong size on BPS18_BattlePassTile_C_OnSetTrack");
static_assert(offsetof(BPS18_BattlePassTile_C_OnSetTrack, bIsFreeTrack) == 0x000000, "Member 'BPS18_BattlePassTile_C_OnSetTrack::bIsFreeTrack' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnSetTrack, bOwnsBattlePass) == 0x000001, "Member 'BPS18_BattlePassTile_C_OnSetTrack::bOwnsBattlePass' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.OnAffordabilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BPS18_BattlePassTile_C_OnAffordabilityChanged final
{
public:
	bool                                          bHasEnougCurrency;                                 // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPS18_BattlePassTile_C_OnAffordabilityChanged) == 0x000001, "Wrong alignment on BPS18_BattlePassTile_C_OnAffordabilityChanged");
static_assert(sizeof(BPS18_BattlePassTile_C_OnAffordabilityChanged) == 0x000001, "Wrong size on BPS18_BattlePassTile_C_OnAffordabilityChanged");
static_assert(offsetof(BPS18_BattlePassTile_C_OnAffordabilityChanged, bHasEnougCurrency) == 0x000000, "Member 'BPS18_BattlePassTile_C_OnAffordabilityChanged::bHasEnougCurrency' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.OnSetCurrencyAndPrice
// 0x0008 (0x0008 - 0x0000)
struct BPS18_BattlePassTile_C_OnSetCurrencyAndPrice final
{
public:
	EBattlePassCurrencyType                       Currency;                                          // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS18_BattlePassTile_C_OnSetCurrencyAndPrice) == 0x000004, "Wrong alignment on BPS18_BattlePassTile_C_OnSetCurrencyAndPrice");
static_assert(sizeof(BPS18_BattlePassTile_C_OnSetCurrencyAndPrice) == 0x000008, "Wrong size on BPS18_BattlePassTile_C_OnSetCurrencyAndPrice");
static_assert(offsetof(BPS18_BattlePassTile_C_OnSetCurrencyAndPrice, Currency) == 0x000000, "Member 'BPS18_BattlePassTile_C_OnSetCurrencyAndPrice::Currency' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnSetCurrencyAndPrice, Price) == 0x000004, "Member 'BPS18_BattlePassTile_C_OnSetCurrencyAndPrice::Price' has a wrong offset!");

// Function BPS18_BattlePassTile.BPS18_BattlePassTile_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct BPS18_BattlePassTile_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(BPS18_BattlePassTile_C_OnFocusReceived) == 0x000008, "Wrong alignment on BPS18_BattlePassTile_C_OnFocusReceived");
static_assert(sizeof(BPS18_BattlePassTile_C_OnFocusReceived) == 0x0001B0, "Wrong size on BPS18_BattlePassTile_C_OnFocusReceived");
static_assert(offsetof(BPS18_BattlePassTile_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'BPS18_BattlePassTile_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'BPS18_BattlePassTile_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'BPS18_BattlePassTile_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS18_BattlePassTile_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'BPS18_BattlePassTile_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

}

