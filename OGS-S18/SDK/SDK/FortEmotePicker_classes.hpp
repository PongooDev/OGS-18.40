#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortEmotePicker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass FortEmotePicker.FortEmotePicker_C
// 0x0098 (0x0558 - 0x04C0)
class UFortEmotePicker_C final : public UFortEmotePicker
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       PrevCategory;                                      // 0x04C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NextCategory;                                      // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PrevPage;                                          // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       NextPage;                                          // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SelectionSet;                                      // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Intro;                                             // 0x04F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UOverlay*                               BottomBarOverlay;                                  // 0x04F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BGGlow;                                      // 0x0500(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_bottombar;                                   // 0x0508(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    NextCategoryKeybind;                               // 0x0510(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    NextWheelAction;                                   // 0x0518(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    PreviousCategoryKeybind;                           // 0x0520(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    PreviousWheelAction;                               // 0x0528(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USafeZone*                              SafeZone;                                          // 0x0530(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          WheelTitleBar;                                     // 0x0538(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USoundBase*                             SoundOnAccept;                                     // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundOnCancel;                                     // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundOnSelect;                                     // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PlayIntroAnimation();
	void BP_PageChanged(int32 Direction);
	void BP_CategoryChanged(int32 Direction);
	void BP_OnActivated();
	void ExecuteUbergraph_FortEmotePicker(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortEmotePicker_C">();
	}
	static class UFortEmotePicker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEmotePicker_C>();
	}
};
static_assert(alignof(UFortEmotePicker_C) == 0x000008, "Wrong alignment on UFortEmotePicker_C");
static_assert(sizeof(UFortEmotePicker_C) == 0x000558, "Wrong size on UFortEmotePicker_C");
static_assert(offsetof(UFortEmotePicker_C, UberGraphFrame) == 0x0004C0, "Member 'UFortEmotePicker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, PrevCategory) == 0x0004C8, "Member 'UFortEmotePicker_C::PrevCategory' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, NextCategory) == 0x0004D0, "Member 'UFortEmotePicker_C::NextCategory' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, PrevPage) == 0x0004D8, "Member 'UFortEmotePicker_C::PrevPage' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, NextPage) == 0x0004E0, "Member 'UFortEmotePicker_C::NextPage' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, SelectionSet) == 0x0004E8, "Member 'UFortEmotePicker_C::SelectionSet' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, Intro) == 0x0004F0, "Member 'UFortEmotePicker_C::Intro' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, BottomBarOverlay) == 0x0004F8, "Member 'UFortEmotePicker_C::BottomBarOverlay' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, Image_BGGlow) == 0x000500, "Member 'UFortEmotePicker_C::Image_BGGlow' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, Image_bottombar) == 0x000508, "Member 'UFortEmotePicker_C::Image_bottombar' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, NextCategoryKeybind) == 0x000510, "Member 'UFortEmotePicker_C::NextCategoryKeybind' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, NextWheelAction) == 0x000518, "Member 'UFortEmotePicker_C::NextWheelAction' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, PreviousCategoryKeybind) == 0x000520, "Member 'UFortEmotePicker_C::PreviousCategoryKeybind' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, PreviousWheelAction) == 0x000528, "Member 'UFortEmotePicker_C::PreviousWheelAction' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, SafeZone) == 0x000530, "Member 'UFortEmotePicker_C::SafeZone' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, WheelTitleBar) == 0x000538, "Member 'UFortEmotePicker_C::WheelTitleBar' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, SoundOnAccept) == 0x000540, "Member 'UFortEmotePicker_C::SoundOnAccept' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, SoundOnCancel) == 0x000548, "Member 'UFortEmotePicker_C::SoundOnCancel' has a wrong offset!");
static_assert(offsetof(UFortEmotePicker_C, SoundOnSelect) == 0x000550, "Member 'UFortEmotePicker_C::SoundOnSelect' has a wrong offset!");

}

