#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_DirectionalLaunchParent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_DirectionalLaunchParent.BGA_DirectionalLaunchParent_C
// 0x0198 (0x0A50 - 0x08B8)
class ABGA_DirectionalLaunchParent_C : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       VisualPath_EDITOR;                                 // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LaunchDirection;                                   // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultGravity;                                    // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ParentActor;                                       // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         HardEnabled;                                       // 0x08E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SoftEnabled;                                       // 0x0910(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerDeployEnabled;                               // 0x0938(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bEnableVehicleLaunch;                              // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AbilityGrantedOnPlayerLaunched;                    // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AbilityGrantedOnVehicleLaunched;                   // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DefinedParentClass;                                // 0x0978(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GELaunchAppliedTemp;                               // 0x0980(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GEAppliedLaunchedTemplate;                         // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         GravityScale;                                      // 0x0990(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         LaunchVelocity;                                    // 0x09B8(0x0028)(Edit, BlueprintVisible)
	class UClass*                                 GEOverrideLaunchTemplate;                          // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverridesVel;                                      // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_9E9[0x7];                                      // 0x09E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         VelocityOverride;                                  // 0x09F0(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         OriginalLaunchVelocity;                            // 0x0A18(0x0028)(Edit, BlueprintVisible)
	struct FGameplayTag                           TagToCheckForVelocityOverride;                     // 0x0A40(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideVelocityBasedOnTag;                        // 0x0A48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BGA_DirectionalLaunchParent(int32 EntryPoint);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void LauncherEnabled();
	void SoftDeactivation();
	void ReceiveBeginPlay();
	void VehicleLaunched(class AFortAthenaVehicle* Vehicle);
	void PlayerLaunched(class AFortPawn* Player);
	void OnReady_BFB404DE4A75178049271E803AA282E6(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void UserConstructionScript();
	void PlayerInVehicleOrJustVehicle(class AActor* InActor, bool* Valid, class AFortAthenaVehicle** AsFort_Athena_Vehicle);
	void JustPlayer(class AActor* InActor, class AFortPawn** AsFort_Pawn, bool* Valid);
	bool IsSoftEnabled();
	bool IsPlayerDeployEnabled();
	bool IsHardEnabled();
	void Get_VehicleCenterOfMassLocationAndMassValue(TScriptInterface<class IFortVehicleInterface> Target, struct FVector* Location, float* MassValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_DirectionalLaunchParent_C">();
	}
	static class ABGA_DirectionalLaunchParent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_DirectionalLaunchParent_C>();
	}
};
static_assert(alignof(ABGA_DirectionalLaunchParent_C) == 0x000008, "Wrong alignment on ABGA_DirectionalLaunchParent_C");
static_assert(sizeof(ABGA_DirectionalLaunchParent_C) == 0x000A50, "Wrong size on ABGA_DirectionalLaunchParent_C");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, UberGraphFrame) == 0x0008B8, "Member 'ABGA_DirectionalLaunchParent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, VisualPath_EDITOR) == 0x0008C0, "Member 'ABGA_DirectionalLaunchParent_C::VisualPath_EDITOR' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, Sphere) == 0x0008C8, "Member 'ABGA_DirectionalLaunchParent_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, LaunchDirection) == 0x0008D0, "Member 'ABGA_DirectionalLaunchParent_C::LaunchDirection' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, DefaultGravity) == 0x0008D8, "Member 'ABGA_DirectionalLaunchParent_C::DefaultGravity' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, ParentActor) == 0x0008E0, "Member 'ABGA_DirectionalLaunchParent_C::ParentActor' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, HardEnabled) == 0x0008E8, "Member 'ABGA_DirectionalLaunchParent_C::HardEnabled' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, SoftEnabled) == 0x000910, "Member 'ABGA_DirectionalLaunchParent_C::SoftEnabled' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, PlayerDeployEnabled) == 0x000938, "Member 'ABGA_DirectionalLaunchParent_C::PlayerDeployEnabled' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, bEnableVehicleLaunch) == 0x000960, "Member 'ABGA_DirectionalLaunchParent_C::bEnableVehicleLaunch' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, AbilityGrantedOnPlayerLaunched) == 0x000968, "Member 'ABGA_DirectionalLaunchParent_C::AbilityGrantedOnPlayerLaunched' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, AbilityGrantedOnVehicleLaunched) == 0x000970, "Member 'ABGA_DirectionalLaunchParent_C::AbilityGrantedOnVehicleLaunched' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, DefinedParentClass) == 0x000978, "Member 'ABGA_DirectionalLaunchParent_C::DefinedParentClass' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, GELaunchAppliedTemp) == 0x000980, "Member 'ABGA_DirectionalLaunchParent_C::GELaunchAppliedTemp' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, GEAppliedLaunchedTemplate) == 0x000988, "Member 'ABGA_DirectionalLaunchParent_C::GEAppliedLaunchedTemplate' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, GravityScale) == 0x000990, "Member 'ABGA_DirectionalLaunchParent_C::GravityScale' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, LaunchVelocity) == 0x0009B8, "Member 'ABGA_DirectionalLaunchParent_C::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, GEOverrideLaunchTemplate) == 0x0009E0, "Member 'ABGA_DirectionalLaunchParent_C::GEOverrideLaunchTemplate' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, OverridesVel) == 0x0009E8, "Member 'ABGA_DirectionalLaunchParent_C::OverridesVel' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, VelocityOverride) == 0x0009F0, "Member 'ABGA_DirectionalLaunchParent_C::VelocityOverride' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, OriginalLaunchVelocity) == 0x000A18, "Member 'ABGA_DirectionalLaunchParent_C::OriginalLaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, TagToCheckForVelocityOverride) == 0x000A40, "Member 'ABGA_DirectionalLaunchParent_C::TagToCheckForVelocityOverride' has a wrong offset!");
static_assert(offsetof(ABGA_DirectionalLaunchParent_C, OverrideVelocityBasedOnTag) == 0x000A48, "Member 'ABGA_DirectionalLaunchParent_C::OverrideVelocityBasedOnTag' has a wrong offset!");

}

