#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmartObjectsModule

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum SmartObjectsModule.ESmartObjectSlotState
// NumValues: 0x0004
enum class ESmartObjectSlotState : uint8
{
	Free                                     = 0,
	Claimed                                  = 1,
	Occupied                                 = 2,
	MAX                                      = 3,
};

// ScriptStruct SmartObjectsModule.SmartObjectID
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectID final
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectID) == 0x000004, "Wrong alignment on FSmartObjectID");
static_assert(sizeof(FSmartObjectID) == 0x000004, "Wrong size on FSmartObjectID");
static_assert(offsetof(FSmartObjectID, ID) == 0x000000, "Member 'FSmartObjectID::ID' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectCollectionEntry
// 0x0020 (0x0020 - 0x0000)
struct FSmartObjectCollectionEntry final
{
public:
	struct FSmartObjectID                         ID;                                                // 0x0000(0x0004)(Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        Path;                                              // 0x0008(0x0018)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectCollectionEntry) == 0x000008, "Wrong alignment on FSmartObjectCollectionEntry");
static_assert(sizeof(FSmartObjectCollectionEntry) == 0x000020, "Wrong size on FSmartObjectCollectionEntry");
static_assert(offsetof(FSmartObjectCollectionEntry, ID) == 0x000000, "Member 'FSmartObjectCollectionEntry::ID' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Path) == 0x000008, "Member 'FSmartObjectCollectionEntry::Path' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlot
// 0x0070 (0x0070 - 0x0000)
struct FSmartObjectSlot final
{
public:
	struct FGameplayTagQuery                      UserTagFilter;                                     // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0048(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0054(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USmartObjectBehaviorConfigBase*> BehaviorConfigurations;                            // 0x0060(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectSlot) == 0x000008, "Wrong alignment on FSmartObjectSlot");
static_assert(sizeof(FSmartObjectSlot) == 0x000070, "Wrong size on FSmartObjectSlot");
static_assert(offsetof(FSmartObjectSlot, UserTagFilter) == 0x000000, "Member 'FSmartObjectSlot::UserTagFilter' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlot, Offset) == 0x000048, "Member 'FSmartObjectSlot::Offset' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlot, Direction) == 0x000054, "Member 'FSmartObjectSlot::Direction' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlot, BehaviorConfigurations) == 0x000060, "Member 'FSmartObjectSlot::BehaviorConfigurations' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectConfig
// 0x00D0 (0x00D0 - 0x0000)
struct FSmartObjectConfig final
{
public:
	TArray<struct FSmartObjectSlot>               Slots;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USmartObjectBehaviorConfigBase*> DefaultBehaviorConfigurations;                     // 0x0010(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      UserTagFilter;                                     // 0x0020(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      ObjectTagFilter;                                   // 0x0068(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  ActivityTags;                                      // 0x00B0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectConfig) == 0x000008, "Wrong alignment on FSmartObjectConfig");
static_assert(sizeof(FSmartObjectConfig) == 0x0000D0, "Wrong size on FSmartObjectConfig");
static_assert(offsetof(FSmartObjectConfig, Slots) == 0x000000, "Member 'FSmartObjectConfig::Slots' has a wrong offset!");
static_assert(offsetof(FSmartObjectConfig, DefaultBehaviorConfigurations) == 0x000010, "Member 'FSmartObjectConfig::DefaultBehaviorConfigurations' has a wrong offset!");
static_assert(offsetof(FSmartObjectConfig, UserTagFilter) == 0x000020, "Member 'FSmartObjectConfig::UserTagFilter' has a wrong offset!");
static_assert(offsetof(FSmartObjectConfig, ObjectTagFilter) == 0x000068, "Member 'FSmartObjectConfig::ObjectTagFilter' has a wrong offset!");
static_assert(offsetof(FSmartObjectConfig, ActivityTags) == 0x0000B0, "Member 'FSmartObjectConfig::ActivityTags' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectSlotIndex final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectSlotIndex) == 0x000004, "Wrong alignment on FSmartObjectSlotIndex");
static_assert(sizeof(FSmartObjectSlotIndex) == 0x000004, "Wrong size on FSmartObjectSlotIndex");
static_assert(offsetof(FSmartObjectSlotIndex, Index) == 0x000000, "Member 'FSmartObjectSlotIndex::Index' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotRuntimeData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSmartObjectSlotRuntimeData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotRuntimeData) == 0x000008, "Wrong alignment on FSmartObjectSlotRuntimeData");
static_assert(sizeof(FSmartObjectSlotRuntimeData) == 0x000020, "Wrong size on FSmartObjectSlotRuntimeData");

// ScriptStruct SmartObjectsModule.SmartObjectRuntime
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FSmartObjectRuntime final
{
public:
	TArray<struct FSmartObjectSlotRuntimeData>    SlotsRuntimeData;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x160];                                     // 0x0010(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectRuntime) == 0x000010, "Wrong alignment on FSmartObjectRuntime");
static_assert(sizeof(FSmartObjectRuntime) == 0x000170, "Wrong size on FSmartObjectRuntime");
static_assert(offsetof(FSmartObjectRuntime, SlotsRuntimeData) == 0x000000, "Member 'FSmartObjectRuntime::SlotsRuntimeData' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectClaimHandle
// 0x000C (0x000C - 0x0000)
struct FSmartObjectClaimHandle final
{
public:
	struct FSmartObjectID                         SmartObjectID;                                     // 0x0000(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotIndex                  SlotIndex;                                         // 0x0004(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectClaimHandle) == 0x000004, "Wrong alignment on FSmartObjectClaimHandle");
static_assert(sizeof(FSmartObjectClaimHandle) == 0x00000C, "Wrong size on FSmartObjectClaimHandle");
static_assert(offsetof(FSmartObjectClaimHandle, SmartObjectID) == 0x000000, "Member 'FSmartObjectClaimHandle::SmartObjectID' has a wrong offset!");
static_assert(offsetof(FSmartObjectClaimHandle, SlotIndex) == 0x000004, "Member 'FSmartObjectClaimHandle::SlotIndex' has a wrong offset!");

}

