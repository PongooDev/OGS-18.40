#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CubeMovementGradient

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CorruptionSpreadStruct_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CubeMovementGradient.BP_CubeMovementGradient_C
// 0x0180 (0x03A0 - 0x0220)
class ABP_CubeMovementGradient_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UInstancedStaticMeshComponent*          InstancedStaticMesh;                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       MasterSpline;                                      // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ACubeMovementStaticPath>> cubeMovementStaticPaths;                           // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         RenderTargetResolution;                            // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 InternalRenderTargetFootstep;                      // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 InternalRenderTargetLayered;                       // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 InternalRenderTargetLayeredCopy;                   // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               GradientTexture;                                   // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               startingCorruptionTexture;                         // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCorruptionSpreadStruct                CorruptionSpread;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         corruptionTimeOffset;                              // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviewTimeStep;                                   // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         oldCorruptionTime;                                 // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          updateRTs;                                         // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTarget_thresholded;                          // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RenderTarget_processed;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         cubeScaleMult;                                     // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ALandscape>              Landscape;                                         // 0x02B0(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	struct FVector                                LandscapeBias;                                     // 0x02D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LandscapeSize;                                     // 0x02E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvas*                                Canvas;                                            // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          useCalendarEventsOnBeginPlay;                      // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Scales;                                            // 0x0300(0x0010)(Edit, BlueprintVisible, Transient)
	TArray<struct FVector>                        Positions;                                         // 0x0310(0x0010)(Edit, BlueprintVisible, Transient)
	TArray<float>                                 Times;                                             // 0x0320(0x0010)(Edit, BlueprintVisible, Transient)
	bool                                          previewCubes;                                      // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 internal_bitArrayRT;                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnyLocalPlayerInCorruption;                      // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CorruptionStateUpdatePeriod;                       // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugCorruptionCoverageMap;                        // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool NewValue)> OnIsAnyLocalPlayerInCorruptionChanged;             // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CorruptionCoveragePadding;                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmbientAudioDataAsset*                 CorruptionAmbientAudioBank;                        // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AmbientAudioEntryName;                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          oldPreviewCubes;                                   // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ProcessMaterial;                                   // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundMix*                              AmbientAudioSoundMix;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          encryptGradient;                                   // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Cleanup;                                           // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorruptionCoverageMap*                 CorruptionCoverageMap;                             // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CubeMovementGradient(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveDestroyed();
	void HandleCorruptionStateChanged(bool Is_In_Corruption);
	void CE_InitializeCorruptionCoverageMap();
	void CustomEvent();
	void AsyncLoadLandscape();
	void OnSyncComplete_7E2EFF374FF7DFC7DC495CA20F3590B8();
	void OnLoaded_84C4C8F045559ADE82395CB75A5FA23F(class UObject* Loaded);
	void OnReady_54D085414C46ABC12924CF91BCA64D7D();
	void UserConstructionScript();
	void Draw_Cube_to_RT(class UCanvas* Canvas_0, int32 X, int32 Y, const struct FLinearColor& Color, float Rotation, float Size, class UTextureRenderTarget2D* RenderTarget);
	struct FVector PosToTextureCoord(const struct FVector& Location);
	void SetupLandscapeBounds__Landscape_(class ALandscape* Landscape_0);
	void SetupLandscapeBounds();
	void ReportLandscapeBounds();
	void GetCubeTransformsAtTime(float Time, TArray<struct FTransform>* Transforms);
	void Fill_CubeMovrmentStaticPaths_Array();
	void Fill_Cube_Movement_Array();
	void A__Setup_Splines();
	void SortFootStepsUsingPython();
	void b__Generate_RTs();
	void C__Export_RTs_to_Static_Texture();
	void Print_Positions();
	void d__Process_Static_Texture();
	void Process_Static_Texture(const struct FCorruptionSpreadStruct& CorruptionSpread_0);
	void E____();
	void f____();
	void Get_Bit_Array();
	void preview_allCubes();
	void clear_footsteps();
	void clearRT();
	void OnRep_corruptionTime();
	void Preview_Cube_Instances();
	void Preview_Cube_Instances_Clear();
	void flush();
	void print_traveller0();
	void Draw_Cube_to_RT_old(class UCanvas* Canvas_0, int32 X, int32 Y, const struct FLinearColor& Color, float Rotation, float Size, class UTextureRenderTarget2D* RenderTarget);
	void Debug_Start_Offsets();
	void Debug_Start_Offset_for_Event(const class FString& CalendarEvent, const class FString& CorruptionStartEvent);
	bool InitializeCorruptionCoverageMap(class UTextureRenderTarget2D* CorruptionRT);
	void UpdateCorruptionState();
	void TestBeginPlay();
	void printCalendarInfo();
	void ProcessStaticTextureFE(float CorruptionTime, float CubeTownCorruptionSpread, const struct FCorruptionSpreadStruct& CorruptionSpread_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CubeMovementGradient_C">();
	}
	static class ABP_CubeMovementGradient_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CubeMovementGradient_C>();
	}
};
static_assert(alignof(ABP_CubeMovementGradient_C) == 0x000008, "Wrong alignment on ABP_CubeMovementGradient_C");
static_assert(sizeof(ABP_CubeMovementGradient_C) == 0x0003A0, "Wrong size on ABP_CubeMovementGradient_C");
static_assert(offsetof(ABP_CubeMovementGradient_C, UberGraphFrame) == 0x000220, "Member 'ABP_CubeMovementGradient_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, InstancedStaticMesh) == 0x000228, "Member 'ABP_CubeMovementGradient_C::InstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_CubeMovementGradient_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, MasterSpline) == 0x000238, "Member 'ABP_CubeMovementGradient_C::MasterSpline' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, cubeMovementStaticPaths) == 0x000240, "Member 'ABP_CubeMovementGradient_C::cubeMovementStaticPaths' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, RenderTargetResolution) == 0x000250, "Member 'ABP_CubeMovementGradient_C::RenderTargetResolution' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, InternalRenderTargetFootstep) == 0x000258, "Member 'ABP_CubeMovementGradient_C::InternalRenderTargetFootstep' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, InternalRenderTargetLayered) == 0x000260, "Member 'ABP_CubeMovementGradient_C::InternalRenderTargetLayered' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, InternalRenderTargetLayeredCopy) == 0x000268, "Member 'ABP_CubeMovementGradient_C::InternalRenderTargetLayeredCopy' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, GradientTexture) == 0x000270, "Member 'ABP_CubeMovementGradient_C::GradientTexture' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, startingCorruptionTexture) == 0x000278, "Member 'ABP_CubeMovementGradient_C::startingCorruptionTexture' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, CorruptionSpread) == 0x000280, "Member 'ABP_CubeMovementGradient_C::CorruptionSpread' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, corruptionTimeOffset) == 0x000288, "Member 'ABP_CubeMovementGradient_C::corruptionTimeOffset' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, PreviewTimeStep) == 0x00028C, "Member 'ABP_CubeMovementGradient_C::PreviewTimeStep' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, oldCorruptionTime) == 0x000290, "Member 'ABP_CubeMovementGradient_C::oldCorruptionTime' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, updateRTs) == 0x000294, "Member 'ABP_CubeMovementGradient_C::updateRTs' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, RenderTarget_thresholded) == 0x000298, "Member 'ABP_CubeMovementGradient_C::RenderTarget_thresholded' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, RenderTarget_processed) == 0x0002A0, "Member 'ABP_CubeMovementGradient_C::RenderTarget_processed' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, cubeScaleMult) == 0x0002A8, "Member 'ABP_CubeMovementGradient_C::cubeScaleMult' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, Landscape) == 0x0002B0, "Member 'ABP_CubeMovementGradient_C::Landscape' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, LandscapeBias) == 0x0002D8, "Member 'ABP_CubeMovementGradient_C::LandscapeBias' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, LandscapeSize) == 0x0002E4, "Member 'ABP_CubeMovementGradient_C::LandscapeSize' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, Canvas) == 0x0002F0, "Member 'ABP_CubeMovementGradient_C::Canvas' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, useCalendarEventsOnBeginPlay) == 0x0002F8, "Member 'ABP_CubeMovementGradient_C::useCalendarEventsOnBeginPlay' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, Scales) == 0x000300, "Member 'ABP_CubeMovementGradient_C::Scales' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, Positions) == 0x000310, "Member 'ABP_CubeMovementGradient_C::Positions' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, Times) == 0x000320, "Member 'ABP_CubeMovementGradient_C::Times' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, previewCubes) == 0x000330, "Member 'ABP_CubeMovementGradient_C::previewCubes' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, internal_bitArrayRT) == 0x000338, "Member 'ABP_CubeMovementGradient_C::internal_bitArrayRT' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, IsAnyLocalPlayerInCorruption) == 0x000340, "Member 'ABP_CubeMovementGradient_C::IsAnyLocalPlayerInCorruption' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, CorruptionStateUpdatePeriod) == 0x000344, "Member 'ABP_CubeMovementGradient_C::CorruptionStateUpdatePeriod' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, DebugCorruptionCoverageMap) == 0x000348, "Member 'ABP_CubeMovementGradient_C::DebugCorruptionCoverageMap' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, OnIsAnyLocalPlayerInCorruptionChanged) == 0x000350, "Member 'ABP_CubeMovementGradient_C::OnIsAnyLocalPlayerInCorruptionChanged' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, CorruptionCoveragePadding) == 0x000360, "Member 'ABP_CubeMovementGradient_C::CorruptionCoveragePadding' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, CorruptionAmbientAudioBank) == 0x000368, "Member 'ABP_CubeMovementGradient_C::CorruptionAmbientAudioBank' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, AmbientAudioEntryName) == 0x000370, "Member 'ABP_CubeMovementGradient_C::AmbientAudioEntryName' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, oldPreviewCubes) == 0x000378, "Member 'ABP_CubeMovementGradient_C::oldPreviewCubes' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, ProcessMaterial) == 0x000380, "Member 'ABP_CubeMovementGradient_C::ProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, AmbientAudioSoundMix) == 0x000388, "Member 'ABP_CubeMovementGradient_C::AmbientAudioSoundMix' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, encryptGradient) == 0x000390, "Member 'ABP_CubeMovementGradient_C::encryptGradient' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, Cleanup) == 0x000391, "Member 'ABP_CubeMovementGradient_C::Cleanup' has a wrong offset!");
static_assert(offsetof(ABP_CubeMovementGradient_C, CorruptionCoverageMap) == 0x000398, "Member 'ABP_CubeMovementGradient_C::CorruptionCoverageMap' has a wrong offset!");

}

