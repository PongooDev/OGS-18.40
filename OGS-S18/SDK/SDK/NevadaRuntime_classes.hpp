#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NevadaRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "NevadaRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class NevadaRuntime.NevadaGlobals
// 0x0000 (0x0028 - 0x0028)
class UNevadaGlobals final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NevadaGlobals">();
	}
	static class UNevadaGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNevadaGlobals>();
	}
};
static_assert(alignof(UNevadaGlobals) == 0x000008, "Wrong alignment on UNevadaGlobals");
static_assert(sizeof(UNevadaGlobals) == 0x000028, "Wrong size on UNevadaGlobals");

// Class NevadaRuntime.FortCameraMode_Nevada
// 0x0040 (0x0E30 - 0x0DF0)
class UFortCameraMode_Nevada final : public UFortCameraMode_AthenaVehicle
{
public:
	uint8                                         Pad_DE8[0x18];                                     // 0x0DE8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TractorBeamCameraOffset;                           // 0x0E00(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TractorBeamCameraLerpTime;                         // 0x0E0C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TractorBeamCameraExtraPitch;                       // 0x0E10(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TractorBeamInactiveCameraExtraPitch;               // 0x0E14(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TractorBeamCameraPositionResetDelay;               // 0x0E18(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinPitchForOffset;                                 // 0x0E1C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxPitchForOffset;                                 // 0x0E20(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ExtraOffset;                                       // 0x0E24(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Nevada">();
	}
	static class UFortCameraMode_Nevada* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Nevada>();
	}
};
static_assert(alignof(UFortCameraMode_Nevada) == 0x000010, "Wrong alignment on UFortCameraMode_Nevada");
static_assert(sizeof(UFortCameraMode_Nevada) == 0x000E30, "Wrong size on UFortCameraMode_Nevada");
static_assert(offsetof(UFortCameraMode_Nevada, TractorBeamCameraOffset) == 0x000E00, "Member 'UFortCameraMode_Nevada::TractorBeamCameraOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Nevada, TractorBeamCameraLerpTime) == 0x000E0C, "Member 'UFortCameraMode_Nevada::TractorBeamCameraLerpTime' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Nevada, TractorBeamCameraExtraPitch) == 0x000E10, "Member 'UFortCameraMode_Nevada::TractorBeamCameraExtraPitch' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Nevada, TractorBeamInactiveCameraExtraPitch) == 0x000E14, "Member 'UFortCameraMode_Nevada::TractorBeamInactiveCameraExtraPitch' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Nevada, TractorBeamCameraPositionResetDelay) == 0x000E18, "Member 'UFortCameraMode_Nevada::TractorBeamCameraPositionResetDelay' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Nevada, MinPitchForOffset) == 0x000E1C, "Member 'UFortCameraMode_Nevada::MinPitchForOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Nevada, MaxPitchForOffset) == 0x000E20, "Member 'UFortCameraMode_Nevada::MaxPitchForOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Nevada, ExtraOffset) == 0x000E24, "Member 'UFortCameraMode_Nevada::ExtraOffset' has a wrong offset!");

// Class NevadaRuntime.FortNevadaAudioController
// 0x0080 (0x02A0 - 0x0220)
class AFortNevadaAudioController final : public AActor
{
public:
	struct FVector2D                              SpeedRangeMap;                                     // 0x0220(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TurningRangeMap;                                   // 0x0228(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AcceleratingRangeMap;                              // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BrakingRangeMap;                                   // 0x0238(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PassByRangeMap;                                    // 0x0240(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LFORangeMap;                                       // 0x0248(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortNevadaVehicle*                     Vehicle;                                           // 0x0250(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLayeredAudioComponent*             LayeredAudioComponent;                             // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedParamValue;                                   // 0x0260(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedParamValuePrev;                               // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AcceleratingParamValue;                            // 0x0268(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingParamValue;                                 // 0x026C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ForwardVector;                                     // 0x0270(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ForwardVectorPrev;                                 // 0x027C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurningParamValue;                                 // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PassByParamValue;                                  // 0x028C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocallyControlledParamValue;                       // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LFOParamValue;                                     // 0x0294(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_Init();
	void BP_Update();
	void CacheReferences(class UFortLayeredAudioComponent* InLayeredAudioComponent);
	void Init(class AFortNevadaVehicle* InVehicle);
	void Update();

	class AFortNevadaVehicle* GetVehicleActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNevadaAudioController">();
	}
	static class AFortNevadaAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortNevadaAudioController>();
	}
};
static_assert(alignof(AFortNevadaAudioController) == 0x000008, "Wrong alignment on AFortNevadaAudioController");
static_assert(sizeof(AFortNevadaAudioController) == 0x0002A0, "Wrong size on AFortNevadaAudioController");
static_assert(offsetof(AFortNevadaAudioController, SpeedRangeMap) == 0x000220, "Member 'AFortNevadaAudioController::SpeedRangeMap' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, TurningRangeMap) == 0x000228, "Member 'AFortNevadaAudioController::TurningRangeMap' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, AcceleratingRangeMap) == 0x000230, "Member 'AFortNevadaAudioController::AcceleratingRangeMap' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, BrakingRangeMap) == 0x000238, "Member 'AFortNevadaAudioController::BrakingRangeMap' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, PassByRangeMap) == 0x000240, "Member 'AFortNevadaAudioController::PassByRangeMap' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, LFORangeMap) == 0x000248, "Member 'AFortNevadaAudioController::LFORangeMap' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, Vehicle) == 0x000250, "Member 'AFortNevadaAudioController::Vehicle' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, LayeredAudioComponent) == 0x000258, "Member 'AFortNevadaAudioController::LayeredAudioComponent' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, SpeedParamValue) == 0x000260, "Member 'AFortNevadaAudioController::SpeedParamValue' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, SpeedParamValuePrev) == 0x000264, "Member 'AFortNevadaAudioController::SpeedParamValuePrev' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, AcceleratingParamValue) == 0x000268, "Member 'AFortNevadaAudioController::AcceleratingParamValue' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, BrakingParamValue) == 0x00026C, "Member 'AFortNevadaAudioController::BrakingParamValue' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, ForwardVector) == 0x000270, "Member 'AFortNevadaAudioController::ForwardVector' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, ForwardVectorPrev) == 0x00027C, "Member 'AFortNevadaAudioController::ForwardVectorPrev' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, TurningParamValue) == 0x000288, "Member 'AFortNevadaAudioController::TurningParamValue' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, PassByParamValue) == 0x00028C, "Member 'AFortNevadaAudioController::PassByParamValue' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, LocallyControlledParamValue) == 0x000290, "Member 'AFortNevadaAudioController::LocallyControlledParamValue' has a wrong offset!");
static_assert(offsetof(AFortNevadaAudioController, LFOParamValue) == 0x000294, "Member 'AFortNevadaAudioController::LFOParamValue' has a wrong offset!");

// Class NevadaRuntime.FortNevadaVehicle
// 0x05D0 (0x1C10 - 0x1640)
class AFortNevadaVehicle final : public AFortAthenaSKVehicle
{
public:
	TWeakObjectPtr<class AController>             KillerController;                                  // 0x1638(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  KillerCauser;                                      // 0x1640(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNevadaState                           ServerReplicatedState;                             // 0x1648(0x0014)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_165C[0x4];                                     // 0x165C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortNevadaVehicleConfigs*              FortNevadaVehicleConfigs;                          // 0x1660(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortNevadaVehicleConfigs>  FortNevadaVehicleConfigsClass;                     // 0x1668(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AFortNevadaAudioController> FortNevadaAudioControllerClass;                    // 0x1670(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   AudioControllerActor;                              // 0x1678(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortNevadaAudioController*             FortNevadaAudioController;                         // 0x1680(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVehicleGamepadLiftInputs              LiftInputs;                                        // 0x1688(0x0008)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         LastBatteryRegenTickTime;                          // 0x1690(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoostThrust;                                      // 0x1694(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoostDrag;                                        // 0x1695(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoostInputReleased;                               // 0x1696(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseTractorBeamUprightForce;                       // 0x1697(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDeadBattery;                                      // 0x1698(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1699[0x3];                                     // 0x1699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TractorBeamExtraLengthForExtents;                  // 0x169C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CrashingDesiredUp;                                 // 0x16A0(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostStartTime;                                    // 0x16AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostPitchAlpha;                                   // 0x16B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostChargeProgress;                               // 0x16B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BoostChargesAvailable;                             // 0x16B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CachedBoostMoveDir;                                // 0x16BC(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentStateStartTime;                             // 0x16C8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeightAtLandingTime;                               // 0x16CC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrashingScrapingTime;                              // 0x16D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrashingNotMovingTimer;                            // 0x16D4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AltimeterTraceHitDistance;                         // 0x16D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TractorBeamAppliedForceMagnitude;                  // 0x16DC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimParamDriverSeatLeftRight;                      // 0x16E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimParamDriverSeatForwardBack;                    // 0x16E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceNegativeLift;                                // 0x16E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForcePositiveLift;                                // 0x16E9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInitialLift;                                      // 0x16EA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENevadaFlightStates                           CurrentVehicleState;                               // 0x16EB(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16EC[0x4C];                                    // 0x16EC(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ALandscapeProxy>         CachedLandscapeProxy;                              // 0x1738(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_AthenaVehicle> PassengerCameraModeClass;                          // 0x1740(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1748[0x1];                                     // 0x1748(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTractorBeamChargeStarted;                         // 0x1749(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174A[0x6];                                     // 0x174A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTowhookParams                         TowhookParams;                                     // 0x1750(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AFortAthenaVehicle>         AttachedPawnHiddenVehicle;                         // 0x1820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPrimitiveComponent>     TractorBeamAttachedPrimitive;                      // 0x1828(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortAthenaVehicle*                     SpawnedTractorBeamVictimVehicle;                   // 0x1830(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPrimitiveComponent>     PreviousTractorBeamAttachedPrimitive;              // 0x1838(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         TractorBeamTargetedActors;                         // 0x1840(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         PreviouslyTargetedActors;                          // 0x1850(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class AActor*                                 TractorBeamAttachedActor;                          // 0x1860(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TractorBeamTargetedActor;                          // 0x1868(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TractorBeamTargetPosition;                         // 0x1870(0x000C)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_187C[0x1];                                     // 0x187C(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBeamButtonReleased;                               // 0x187D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_187E[0x2];                                     // 0x187E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      TractorBeamObjectsTypes;                           // 0x1880(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DisallowedBeamTags;                                // 0x1890(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  AlwaysAllowedBeamTags;                             // 0x18B0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18D0[0x98];                                    // 0x18D0(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         TractorBeamFX_Unattached;                          // 0x1968(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         TractorBeamFX_Attached;                            // 0x1970(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      BeamPSC;                                           // 0x1978(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1980[0x50];                                    // 0x1980(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	ETractorBeamState                             TractorBeamState;                                  // 0x19D0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D1[0x27];                                    // 0x19D1(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TractorBeamDeactivationTimestamp;                  // 0x19F8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TractorBeamDisruptedTimestamp;                     // 0x19FC(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A00[0x80];                                    // 0x1A00(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CockpitHealth;                                     // 0x1A80(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Native_CockpitEnabled;                             // 0x1A84(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastCockpitHealthTickTime;                         // 0x1A88(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastCockpitDamageTime;                             // 0x1A8C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CockpitDissolveStartTime;                          // 0x1A90(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A94[0x4];                                     // 0x1A94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CockpitMaxHealth;                                  // 0x1A98(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CockpitHealthTickRate;                             // 0x1AC0(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CockpitHealthPerTick;                              // 0x1AE8(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CockpitRegenDelay;                                 // 0x1B10(0x0028)(Edit, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CockpitHitMaterialWobble;                          // 0x1B38(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastDamageAlpha;                                   // 0x1B40(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDissolvingCockpit;                                // 0x1B44(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoringCockpit;                                 // 0x1B45(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCockpitWobble;                                    // 0x1B46(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B47[0x1];                                     // 0x1B47(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   NativeComp_ShieldMesh;                             // 0x1B48(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Native_CockpitMaterial;                            // 0x1B50(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Native_EnergyRingMatInstance;                      // 0x1B58(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Native_EnergyFieldMatInstance;                     // 0x1B60(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        NativeComp_DamageStateLastLife;                    // 0x1B68(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        NativeComp_DamageState;                            // 0x1B70(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Native_LastHitLocation;                            // 0x1B78(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Native_LastHitNormal;                              // 0x1B84(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NativeComp_DamageStateFX;                          // 0x1B90(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NativeComp_HologramScreen;                         // 0x1B98(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NativeComp_SpeedLines;                             // 0x1BA0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Native_EnergyRingMat;                              // 0x1BA8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Native_EnergyFieldMat;                             // 0x1BB0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NativeSys_DamageStateFX;                           // 0x1BB8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NativeSys_CockpitDestroyed;                        // 0x1BC0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             CockpitDamagedSound;                               // 0x1BC8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             CockpitDestroyedSound;                             // 0x1BD0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             CockpitRespawnSound;                               // 0x1BD8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Native_DamageStateSound;                           // 0x1BE0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Native_DamageStateLastLifeSound;                   // 0x1BE8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   CockpitDeactivatedForceFeedback;                   // 0x1BF0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>        CockpitDestroyedCamShake;                          // 0x1BF8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             TractorBeamDisallowedClasses;                      // 0x1C00(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void AddPhysicsImpulseToTractorBeamAttachedActor(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
	void DisruptTractorBeam();
	void EnablePilotBubbleCollisionOnServer(bool bNewCollisionEnabled);
	void GetDriverSeatRotationAnimParams(float* OutLeftRight, float* OutForwardBack);
	void NativeToggleCockpit(bool bEnable);
	void OnAttachedActorDestroyed(class AActor* DestroyedActor);
	void OnAttachedActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnBatteryRegen(float Newcharge);
	void OnBoostChargeRefilled();
	void OnBoostFinished();
	void OnBoostStarted();
	void OnCrashedImpact();
	void OnCrashingStarted();
	void OnExplode();
	void OnNewVehicleState(ENevadaFlightStates NewVehicleState);
	void OnOutOfBattery();
	void OnRebootFinished();
	void OnRebootStarted();
	void OnRep_NevadaState(const struct FNevadaState& PrevState);
	void OnRep_ReplicatedTargetedActors();
	void OnRep_TargetedActorChanged();
	void OnRep_TractorBeamAttached();
	void OnRep_TractorBeamChargeStarted();
	void OnRep_TractorBeamState(const ETractorBeamState PreviousState);
	void OnStartAscend();
	void OnStartDescend();
	void OnTargetedActorChanged(class AActor* NewTargetedActor);
	void OnTractorBeamActivated();
	void OnTractorBeamAttached();
	void OnTractorBeamChargeStarted();
	void OnTractorBeamDeactivated(const struct FVector& LastBeamPosition);
	void OnTractorBeamDetached(class AActor* DetachedActor, const struct FVector& LastBeamPosition);
	void SetAttachedPawnAddedVelocity(const struct FVector& AddedVelocity);
	void SetCannonEnabled(const bool bEnabled);
	void SetTractorBeamEnabled(const bool bEnabled);
	void SetTractorBeamInactive();

	class AFortNevadaAudioController* GetAudioController() const;
	float GetBatteryCharge() const;
	float GetBoostChargeProgress() const;
	int32 GetBoostChargesAvailable() const;
	float GetBoostChargeTimeRemaining() const;
	ENevadaFlightStates GetCurrentVehicleState() const;
	float GetEnergyCanonChargePercent() const;
	int32 GetNumRebootsAvailable() const;
	struct FVector GetTractorBeamAttachLocation() const;
	bool IsTractorBeamActive() const;
	bool IsTractorBeamAttached() const;
	bool IsTractorBeamDisrupted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNevadaVehicle">();
	}
	static class AFortNevadaVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortNevadaVehicle>();
	}
};
static_assert(alignof(AFortNevadaVehicle) == 0x000010, "Wrong alignment on AFortNevadaVehicle");
static_assert(sizeof(AFortNevadaVehicle) == 0x001C10, "Wrong size on AFortNevadaVehicle");
static_assert(offsetof(AFortNevadaVehicle, KillerController) == 0x001638, "Member 'AFortNevadaVehicle::KillerController' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, KillerCauser) == 0x001640, "Member 'AFortNevadaVehicle::KillerCauser' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, ServerReplicatedState) == 0x001648, "Member 'AFortNevadaVehicle::ServerReplicatedState' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, FortNevadaVehicleConfigs) == 0x001660, "Member 'AFortNevadaVehicle::FortNevadaVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, FortNevadaVehicleConfigsClass) == 0x001668, "Member 'AFortNevadaVehicle::FortNevadaVehicleConfigsClass' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, FortNevadaAudioControllerClass) == 0x001670, "Member 'AFortNevadaVehicle::FortNevadaAudioControllerClass' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, AudioControllerActor) == 0x001678, "Member 'AFortNevadaVehicle::AudioControllerActor' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, FortNevadaAudioController) == 0x001680, "Member 'AFortNevadaVehicle::FortNevadaAudioController' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, LiftInputs) == 0x001688, "Member 'AFortNevadaVehicle::LiftInputs' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, LastBatteryRegenTickTime) == 0x001690, "Member 'AFortNevadaVehicle::LastBatteryRegenTickTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bBoostThrust) == 0x001694, "Member 'AFortNevadaVehicle::bBoostThrust' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bBoostDrag) == 0x001695, "Member 'AFortNevadaVehicle::bBoostDrag' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bBoostInputReleased) == 0x001696, "Member 'AFortNevadaVehicle::bBoostInputReleased' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bUseTractorBeamUprightForce) == 0x001697, "Member 'AFortNevadaVehicle::bUseTractorBeamUprightForce' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bDeadBattery) == 0x001698, "Member 'AFortNevadaVehicle::bDeadBattery' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamExtraLengthForExtents) == 0x00169C, "Member 'AFortNevadaVehicle::TractorBeamExtraLengthForExtents' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CrashingDesiredUp) == 0x0016A0, "Member 'AFortNevadaVehicle::CrashingDesiredUp' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, BoostStartTime) == 0x0016AC, "Member 'AFortNevadaVehicle::BoostStartTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, BoostPitchAlpha) == 0x0016B0, "Member 'AFortNevadaVehicle::BoostPitchAlpha' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, BoostChargeProgress) == 0x0016B4, "Member 'AFortNevadaVehicle::BoostChargeProgress' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, BoostChargesAvailable) == 0x0016B8, "Member 'AFortNevadaVehicle::BoostChargesAvailable' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CachedBoostMoveDir) == 0x0016BC, "Member 'AFortNevadaVehicle::CachedBoostMoveDir' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CurrentStateStartTime) == 0x0016C8, "Member 'AFortNevadaVehicle::CurrentStateStartTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, HeightAtLandingTime) == 0x0016CC, "Member 'AFortNevadaVehicle::HeightAtLandingTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CrashingScrapingTime) == 0x0016D0, "Member 'AFortNevadaVehicle::CrashingScrapingTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CrashingNotMovingTimer) == 0x0016D4, "Member 'AFortNevadaVehicle::CrashingNotMovingTimer' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, AltimeterTraceHitDistance) == 0x0016D8, "Member 'AFortNevadaVehicle::AltimeterTraceHitDistance' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamAppliedForceMagnitude) == 0x0016DC, "Member 'AFortNevadaVehicle::TractorBeamAppliedForceMagnitude' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, AnimParamDriverSeatLeftRight) == 0x0016E0, "Member 'AFortNevadaVehicle::AnimParamDriverSeatLeftRight' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, AnimParamDriverSeatForwardBack) == 0x0016E4, "Member 'AFortNevadaVehicle::AnimParamDriverSeatForwardBack' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bForceNegativeLift) == 0x0016E8, "Member 'AFortNevadaVehicle::bForceNegativeLift' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bForcePositiveLift) == 0x0016E9, "Member 'AFortNevadaVehicle::bForcePositiveLift' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bInitialLift) == 0x0016EA, "Member 'AFortNevadaVehicle::bInitialLift' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CurrentVehicleState) == 0x0016EB, "Member 'AFortNevadaVehicle::CurrentVehicleState' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CachedLandscapeProxy) == 0x001738, "Member 'AFortNevadaVehicle::CachedLandscapeProxy' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, PassengerCameraModeClass) == 0x001740, "Member 'AFortNevadaVehicle::PassengerCameraModeClass' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bTractorBeamChargeStarted) == 0x001749, "Member 'AFortNevadaVehicle::bTractorBeamChargeStarted' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TowhookParams) == 0x001750, "Member 'AFortNevadaVehicle::TowhookParams' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, AttachedPawnHiddenVehicle) == 0x001820, "Member 'AFortNevadaVehicle::AttachedPawnHiddenVehicle' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamAttachedPrimitive) == 0x001828, "Member 'AFortNevadaVehicle::TractorBeamAttachedPrimitive' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, SpawnedTractorBeamVictimVehicle) == 0x001830, "Member 'AFortNevadaVehicle::SpawnedTractorBeamVictimVehicle' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, PreviousTractorBeamAttachedPrimitive) == 0x001838, "Member 'AFortNevadaVehicle::PreviousTractorBeamAttachedPrimitive' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamTargetedActors) == 0x001840, "Member 'AFortNevadaVehicle::TractorBeamTargetedActors' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, PreviouslyTargetedActors) == 0x001850, "Member 'AFortNevadaVehicle::PreviouslyTargetedActors' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamAttachedActor) == 0x001860, "Member 'AFortNevadaVehicle::TractorBeamAttachedActor' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamTargetedActor) == 0x001868, "Member 'AFortNevadaVehicle::TractorBeamTargetedActor' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamTargetPosition) == 0x001870, "Member 'AFortNevadaVehicle::TractorBeamTargetPosition' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bBeamButtonReleased) == 0x00187D, "Member 'AFortNevadaVehicle::bBeamButtonReleased' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamObjectsTypes) == 0x001880, "Member 'AFortNevadaVehicle::TractorBeamObjectsTypes' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, DisallowedBeamTags) == 0x001890, "Member 'AFortNevadaVehicle::DisallowedBeamTags' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, AlwaysAllowedBeamTags) == 0x0018B0, "Member 'AFortNevadaVehicle::AlwaysAllowedBeamTags' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamFX_Unattached) == 0x001968, "Member 'AFortNevadaVehicle::TractorBeamFX_Unattached' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamFX_Attached) == 0x001970, "Member 'AFortNevadaVehicle::TractorBeamFX_Attached' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, BeamPSC) == 0x001978, "Member 'AFortNevadaVehicle::BeamPSC' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamState) == 0x0019D0, "Member 'AFortNevadaVehicle::TractorBeamState' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamDeactivationTimestamp) == 0x0019F8, "Member 'AFortNevadaVehicle::TractorBeamDeactivationTimestamp' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamDisruptedTimestamp) == 0x0019FC, "Member 'AFortNevadaVehicle::TractorBeamDisruptedTimestamp' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitHealth) == 0x001A80, "Member 'AFortNevadaVehicle::CockpitHealth' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_CockpitEnabled) == 0x001A84, "Member 'AFortNevadaVehicle::Native_CockpitEnabled' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, LastCockpitHealthTickTime) == 0x001A88, "Member 'AFortNevadaVehicle::LastCockpitHealthTickTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, LastCockpitDamageTime) == 0x001A8C, "Member 'AFortNevadaVehicle::LastCockpitDamageTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitDissolveStartTime) == 0x001A90, "Member 'AFortNevadaVehicle::CockpitDissolveStartTime' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitMaxHealth) == 0x001A98, "Member 'AFortNevadaVehicle::CockpitMaxHealth' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitHealthTickRate) == 0x001AC0, "Member 'AFortNevadaVehicle::CockpitHealthTickRate' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitHealthPerTick) == 0x001AE8, "Member 'AFortNevadaVehicle::CockpitHealthPerTick' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitRegenDelay) == 0x001B10, "Member 'AFortNevadaVehicle::CockpitRegenDelay' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitHitMaterialWobble) == 0x001B38, "Member 'AFortNevadaVehicle::CockpitHitMaterialWobble' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, LastDamageAlpha) == 0x001B40, "Member 'AFortNevadaVehicle::LastDamageAlpha' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bDissolvingCockpit) == 0x001B44, "Member 'AFortNevadaVehicle::bDissolvingCockpit' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bRestoringCockpit) == 0x001B45, "Member 'AFortNevadaVehicle::bRestoringCockpit' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, bCockpitWobble) == 0x001B46, "Member 'AFortNevadaVehicle::bCockpitWobble' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeComp_ShieldMesh) == 0x001B48, "Member 'AFortNevadaVehicle::NativeComp_ShieldMesh' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_CockpitMaterial) == 0x001B50, "Member 'AFortNevadaVehicle::Native_CockpitMaterial' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_EnergyRingMatInstance) == 0x001B58, "Member 'AFortNevadaVehicle::Native_EnergyRingMatInstance' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_EnergyFieldMatInstance) == 0x001B60, "Member 'AFortNevadaVehicle::Native_EnergyFieldMatInstance' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeComp_DamageStateLastLife) == 0x001B68, "Member 'AFortNevadaVehicle::NativeComp_DamageStateLastLife' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeComp_DamageState) == 0x001B70, "Member 'AFortNevadaVehicle::NativeComp_DamageState' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_LastHitLocation) == 0x001B78, "Member 'AFortNevadaVehicle::Native_LastHitLocation' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_LastHitNormal) == 0x001B84, "Member 'AFortNevadaVehicle::Native_LastHitNormal' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeComp_DamageStateFX) == 0x001B90, "Member 'AFortNevadaVehicle::NativeComp_DamageStateFX' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeComp_HologramScreen) == 0x001B98, "Member 'AFortNevadaVehicle::NativeComp_HologramScreen' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeComp_SpeedLines) == 0x001BA0, "Member 'AFortNevadaVehicle::NativeComp_SpeedLines' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_EnergyRingMat) == 0x001BA8, "Member 'AFortNevadaVehicle::Native_EnergyRingMat' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_EnergyFieldMat) == 0x001BB0, "Member 'AFortNevadaVehicle::Native_EnergyFieldMat' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeSys_DamageStateFX) == 0x001BB8, "Member 'AFortNevadaVehicle::NativeSys_DamageStateFX' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, NativeSys_CockpitDestroyed) == 0x001BC0, "Member 'AFortNevadaVehicle::NativeSys_CockpitDestroyed' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitDamagedSound) == 0x001BC8, "Member 'AFortNevadaVehicle::CockpitDamagedSound' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitDestroyedSound) == 0x001BD0, "Member 'AFortNevadaVehicle::CockpitDestroyedSound' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitRespawnSound) == 0x001BD8, "Member 'AFortNevadaVehicle::CockpitRespawnSound' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_DamageStateSound) == 0x001BE0, "Member 'AFortNevadaVehicle::Native_DamageStateSound' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, Native_DamageStateLastLifeSound) == 0x001BE8, "Member 'AFortNevadaVehicle::Native_DamageStateLastLifeSound' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitDeactivatedForceFeedback) == 0x001BF0, "Member 'AFortNevadaVehicle::CockpitDeactivatedForceFeedback' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, CockpitDestroyedCamShake) == 0x001BF8, "Member 'AFortNevadaVehicle::CockpitDestroyedCamShake' has a wrong offset!");
static_assert(offsetof(AFortNevadaVehicle, TractorBeamDisallowedClasses) == 0x001C00, "Member 'AFortNevadaVehicle::TractorBeamDisallowedClasses' has a wrong offset!");

// Class NevadaRuntime.FortNevadaVehicleAnimInstance
// 0x0100 (0x0540 - 0x0440)
class UFortNevadaVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	class AFortNevadaVehicle*                     NevadaVehicle;                                     // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeam_IsAttached;                           // 0x0440(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeam_IsCharging;                           // 0x0441(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeam_IsActive;                             // 0x0442(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeam_IsInactive;                           // 0x0443(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeam_IsOn;                                 // 0x0444(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeam_HasTarget;                            // 0x0445(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeam_ShouldApplyCustomAO;                  // 0x0446(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_447[0x1];                                      // 0x0447(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TractorBeam_LookAtPitch;                           // 0x0448(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TractorBeam_LookAtYaw;                             // 0x044C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanLeftRight;                                     // 0x0450(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanForwardBackward;                               // 0x0454(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanValue;                                         // 0x0458(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousLeanValue;                                 // 0x045C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityZValue;                                    // 0x0460(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanDelta;                                         // 0x0464(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnAgain;                                        // 0x0468(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHadDriver;                                        // 0x0469(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustGotDriver;                                    // 0x046A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustLostDriver;                                   // 0x046B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasBoosting;                                      // 0x046C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoosting;                                       // 0x046D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46E[0x2];                                      // 0x046E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousBoostCount;                                // 0x0470(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostCount;                                        // 0x0474(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostingAgain;                                  // 0x0478(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0479(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47A[0x2];                                      // 0x047A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WingsPlayRate;                                     // 0x047C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TractorBeamAlpha;                                  // 0x0480(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimPitch;                                          // 0x0484(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYaw;                                            // 0x0488(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFiringCannon;                                   // 0x048C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceFromGround;                                // 0x0490(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromGroundLeft;                            // 0x0494(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromGroundRight;                           // 0x0498(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLanding;                                        // 0x049C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasLanded;                                        // 0x049D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49E[0x2];                                      // 0x049E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandingAlpha;                                      // 0x04A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotLandingMode;                                   // 0x04A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHadBattery;                                       // 0x04A5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutOfBattery;                                     // 0x04A6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustGotBattery;                                   // 0x04A7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchToDepart;                                   // 0x04A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchToIdle;                                     // 0x04A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPartsLanding;                                   // 0x04AA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AB[0x1];                                      // 0x04AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TractorBeamSocketName;                             // 0x04AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TractorBeamAimCurveName;                           // 0x04B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NevadaVehicleInterruptName;                        // 0x04BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandingTraceRightName;                             // 0x04C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandingTraceLeftName;                              // 0x04CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLeanDeltaInterruptMagnitude;                    // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedToBeMoving;                         // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedToPlayWings;                        // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWingsPlayRate;                                  // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWingsPlayRate;                                  // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WingsPlayRateInterpSpeed;                          // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            CannonFiringMontage;                               // 0x04F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingGearTraceLength;                            // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51C[0x24];                                     // 0x051C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNevadaVehicleAnimInstance">();
	}
	static class UFortNevadaVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortNevadaVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortNevadaVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortNevadaVehicleAnimInstance");
static_assert(sizeof(UFortNevadaVehicleAnimInstance) == 0x000540, "Wrong size on UFortNevadaVehicleAnimInstance");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, NevadaVehicle) == 0x000438, "Member 'UFortNevadaVehicleAnimInstance::NevadaVehicle' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTractorBeam_IsAttached) == 0x000440, "Member 'UFortNevadaVehicleAnimInstance::bTractorBeam_IsAttached' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTractorBeam_IsCharging) == 0x000441, "Member 'UFortNevadaVehicleAnimInstance::bTractorBeam_IsCharging' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTractorBeam_IsActive) == 0x000442, "Member 'UFortNevadaVehicleAnimInstance::bTractorBeam_IsActive' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTractorBeam_IsInactive) == 0x000443, "Member 'UFortNevadaVehicleAnimInstance::bTractorBeam_IsInactive' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTractorBeam_IsOn) == 0x000444, "Member 'UFortNevadaVehicleAnimInstance::bTractorBeam_IsOn' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTractorBeam_HasTarget) == 0x000445, "Member 'UFortNevadaVehicleAnimInstance::bTractorBeam_HasTarget' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTractorBeam_ShouldApplyCustomAO) == 0x000446, "Member 'UFortNevadaVehicleAnimInstance::bTractorBeam_ShouldApplyCustomAO' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, TractorBeam_LookAtPitch) == 0x000448, "Member 'UFortNevadaVehicleAnimInstance::TractorBeam_LookAtPitch' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, TractorBeam_LookAtYaw) == 0x00044C, "Member 'UFortNevadaVehicleAnimInstance::TractorBeam_LookAtYaw' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LeanLeftRight) == 0x000450, "Member 'UFortNevadaVehicleAnimInstance::LeanLeftRight' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LeanForwardBackward) == 0x000454, "Member 'UFortNevadaVehicleAnimInstance::LeanForwardBackward' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LeanValue) == 0x000458, "Member 'UFortNevadaVehicleAnimInstance::LeanValue' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, PreviousLeanValue) == 0x00045C, "Member 'UFortNevadaVehicleAnimInstance::PreviousLeanValue' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, VelocityZValue) == 0x000460, "Member 'UFortNevadaVehicleAnimInstance::VelocityZValue' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LeanDelta) == 0x000464, "Member 'UFortNevadaVehicleAnimInstance::LeanDelta' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bTurnAgain) == 0x000468, "Member 'UFortNevadaVehicleAnimInstance::bTurnAgain' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bHadDriver) == 0x000469, "Member 'UFortNevadaVehicleAnimInstance::bHadDriver' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bJustGotDriver) == 0x00046A, "Member 'UFortNevadaVehicleAnimInstance::bJustGotDriver' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bJustLostDriver) == 0x00046B, "Member 'UFortNevadaVehicleAnimInstance::bJustLostDriver' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bWasBoosting) == 0x00046C, "Member 'UFortNevadaVehicleAnimInstance::bWasBoosting' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bIsBoosting) == 0x00046D, "Member 'UFortNevadaVehicleAnimInstance::bIsBoosting' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, PreviousBoostCount) == 0x000470, "Member 'UFortNevadaVehicleAnimInstance::PreviousBoostCount' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, BoostCount) == 0x000474, "Member 'UFortNevadaVehicleAnimInstance::BoostCount' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bIsBoostingAgain) == 0x000478, "Member 'UFortNevadaVehicleAnimInstance::bIsBoostingAgain' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bIsMoving) == 0x000479, "Member 'UFortNevadaVehicleAnimInstance::bIsMoving' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, WingsPlayRate) == 0x00047C, "Member 'UFortNevadaVehicleAnimInstance::WingsPlayRate' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, TractorBeamAlpha) == 0x000480, "Member 'UFortNevadaVehicleAnimInstance::TractorBeamAlpha' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, AimPitch) == 0x000484, "Member 'UFortNevadaVehicleAnimInstance::AimPitch' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, AimYaw) == 0x000488, "Member 'UFortNevadaVehicleAnimInstance::AimYaw' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bIsFiringCannon) == 0x00048C, "Member 'UFortNevadaVehicleAnimInstance::bIsFiringCannon' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, DistanceFromGround) == 0x000490, "Member 'UFortNevadaVehicleAnimInstance::DistanceFromGround' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, DistanceFromGroundLeft) == 0x000494, "Member 'UFortNevadaVehicleAnimInstance::DistanceFromGroundLeft' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, DistanceFromGroundRight) == 0x000498, "Member 'UFortNevadaVehicleAnimInstance::DistanceFromGroundRight' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bIsLanding) == 0x00049C, "Member 'UFortNevadaVehicleAnimInstance::bIsLanding' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bHasLanded) == 0x00049D, "Member 'UFortNevadaVehicleAnimInstance::bHasLanded' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LandingAlpha) == 0x0004A0, "Member 'UFortNevadaVehicleAnimInstance::LandingAlpha' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bNotLandingMode) == 0x0004A4, "Member 'UFortNevadaVehicleAnimInstance::bNotLandingMode' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bHadBattery) == 0x0004A5, "Member 'UFortNevadaVehicleAnimInstance::bHadBattery' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bOutOfBattery) == 0x0004A6, "Member 'UFortNevadaVehicleAnimInstance::bOutOfBattery' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bJustGotBattery) == 0x0004A7, "Member 'UFortNevadaVehicleAnimInstance::bJustGotBattery' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bLaunchToDepart) == 0x0004A8, "Member 'UFortNevadaVehicleAnimInstance::bLaunchToDepart' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bLaunchToIdle) == 0x0004A9, "Member 'UFortNevadaVehicleAnimInstance::bLaunchToIdle' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, bIsPartsLanding) == 0x0004AA, "Member 'UFortNevadaVehicleAnimInstance::bIsPartsLanding' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, TractorBeamSocketName) == 0x0004AC, "Member 'UFortNevadaVehicleAnimInstance::TractorBeamSocketName' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, TractorBeamAimCurveName) == 0x0004B4, "Member 'UFortNevadaVehicleAnimInstance::TractorBeamAimCurveName' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, NevadaVehicleInterruptName) == 0x0004BC, "Member 'UFortNevadaVehicleAnimInstance::NevadaVehicleInterruptName' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LandingTraceRightName) == 0x0004C4, "Member 'UFortNevadaVehicleAnimInstance::LandingTraceRightName' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LandingTraceLeftName) == 0x0004CC, "Member 'UFortNevadaVehicleAnimInstance::LandingTraceLeftName' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, MaxLeanDeltaInterruptMagnitude) == 0x0004D4, "Member 'UFortNevadaVehicleAnimInstance::MaxLeanDeltaInterruptMagnitude' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, MinForwardSpeedToBeMoving) == 0x0004D8, "Member 'UFortNevadaVehicleAnimInstance::MinForwardSpeedToBeMoving' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, MinForwardSpeedToPlayWings) == 0x0004DC, "Member 'UFortNevadaVehicleAnimInstance::MinForwardSpeedToPlayWings' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, MinWingsPlayRate) == 0x0004E0, "Member 'UFortNevadaVehicleAnimInstance::MinWingsPlayRate' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, MaxWingsPlayRate) == 0x0004E4, "Member 'UFortNevadaVehicleAnimInstance::MaxWingsPlayRate' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, WingsPlayRateInterpSpeed) == 0x0004E8, "Member 'UFortNevadaVehicleAnimInstance::WingsPlayRateInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, CannonFiringMontage) == 0x0004F0, "Member 'UFortNevadaVehicleAnimInstance::CannonFiringMontage' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleAnimInstance, LandingGearTraceLength) == 0x000518, "Member 'UFortNevadaVehicleAnimInstance::LandingGearTraceLength' has a wrong offset!");

// Class NevadaRuntime.FortNevadaVehicleConfigs
// 0x0498 (0x09E0 - 0x0548)
class UFortNevadaVehicleConfigs final : public UFortPhysicsVehicleConfigs
{
public:
	struct FNevadaMoveModeConfig                  BaseMovement;                                      // 0x0548(0x0014)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FNevadaMoveModeConfig                  BoostMovement;                                     // 0x055C(0x0014)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FNevadaMoveModeConfig                  ChargingMovement;                                  // 0x0570(0x0014)(Edit, BlueprintVisible, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FDampedSpringConfig                    UprightSpringForce;                                // 0x0584(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DebaseLaunchspeed;                                 // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnEnterPitchAlpha;                                 // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDamageHeightBuffer;                            // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningForce;                                      // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustRotationAlpha;                               // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchDrag;                                         // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawDrag;                                           // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollDrag;                                          // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostThrustDuration;                               // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostDragDuration;                                 // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBoostCharges;                                   // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostChargeDuration;                               // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostChargeDelay;                                  // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostDragFinishSpeed;                              // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TractorBeamRadius;                                 // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TractorBeamWithTargetRadius;                       // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TractorBeamSweepLength;                            // 0x05D8(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TractorBeamChargeTime;                             // 0x0600(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TractorBeamDurationTime;                           // 0x0628(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TractorBeamTossImpulseStrengthForward;             // 0x0650(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TractorBeamTossImpulseStrengthUpward;              // 0x0678(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	float                                         TractorBeamShutdownTime;                           // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TractorBeamTurnOffDamage;                          // 0x06A8(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AllowTractorBeamAIPawns;                           // 0x06D0(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	float                                         TractorBeamBreakForceMagnitude;                    // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FC[0x4];                                      // 0x06FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TractorBeamActive;                                 // 0x0700(0x0028)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TractorBeamCooldown;                               // 0x0728(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TractorBeamDisruptionCooldown;                     // 0x0750(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	class FName                                   TractorBeamSocket;                                 // 0x0778(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TractorBeamAttachPositionOffset;                   // 0x0780(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigidBodyErrorCorrection              TractorBeamTargetOverridenErrorCorrection;         // 0x078C(0x0034)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VictimPitchDrag;                                   // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VictimYawDrag;                                     // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VictimRollDrag;                                    // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDampedSpringConfig                    TractorBeamVictimUprightForce;                     // 0x07CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumReboots;                                        // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingTime;                                   // 0x07DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingScrapingTime;                           // 0x07E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingTimeSpentNotMoving;                     // 0x07E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedThresholdForCrashed;                          // 0x07E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7EC[0x4];                                      // 0x07EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RebootDuration;                                    // 0x07F0(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RebootDelay;                                       // 0x0818(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         LandingTraceRange;                                 // 0x0840(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredLandingDistance;                            // 0x0844(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingDelay_Max;                                  // 0x0848(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingDelay_Min;                                  // 0x084C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightForMinLandingDelay;                          // 0x0850(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightForMaxLandingDelay;                          // 0x0854(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingPitchAlphaMax;                              // 0x0858(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingPitchAlphaMin;                              // 0x085C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverSeatRotationAnimBlendSpeed;                  // 0x0860(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashingDesiredUpLerpFactor;                       // 0x0864(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashedLinearDrag;                                 // 0x0868(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandedDragCoef;                                    // 0x086C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandedDragCoef2;                                   // 0x0870(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandedMaxDragSpeed;                                // 0x0874(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashedAngularDragMultiplier;                      // 0x0878(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostFOV;                                          // 0x087C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraTraceInteractRange;                           // 0x0880(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AntiGravityMult;                                   // 0x0884(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialLiftDuration;                               // 0x0888(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88C[0x4];                                      // 0x088C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         BatteryCostDuringFlight;                           // 0x0890(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BatteryRegenDelay;                                 // 0x08B8(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BatteryRegenTickRate;                              // 0x08E0(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BatteryRegenAmount;                                // 0x0908(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxBattery;                                        // 0x0930(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinBatteryForFlight;                               // 0x0958(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           CockpitShapeNames;                                 // 0x0980(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CockpitDamageMult;                                 // 0x0990(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CockpitHealth;                                     // 0x09B8(0x0028)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNevadaVehicleConfigs">();
	}
	static class UFortNevadaVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortNevadaVehicleConfigs>();
	}
};
static_assert(alignof(UFortNevadaVehicleConfigs) == 0x000008, "Wrong alignment on UFortNevadaVehicleConfigs");
static_assert(sizeof(UFortNevadaVehicleConfigs) == 0x0009E0, "Wrong size on UFortNevadaVehicleConfigs");
static_assert(offsetof(UFortNevadaVehicleConfigs, BaseMovement) == 0x000548, "Member 'UFortNevadaVehicleConfigs::BaseMovement' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BoostMovement) == 0x00055C, "Member 'UFortNevadaVehicleConfigs::BoostMovement' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, ChargingMovement) == 0x000570, "Member 'UFortNevadaVehicleConfigs::ChargingMovement' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, UprightSpringForce) == 0x000584, "Member 'UFortNevadaVehicleConfigs::UprightSpringForce' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, DebaseLaunchspeed) == 0x000590, "Member 'UFortNevadaVehicleConfigs::DebaseLaunchspeed' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, MaxHeight) == 0x000594, "Member 'UFortNevadaVehicleConfigs::MaxHeight' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, MinHeight) == 0x000598, "Member 'UFortNevadaVehicleConfigs::MinHeight' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, OnEnterPitchAlpha) == 0x00059C, "Member 'UFortNevadaVehicleConfigs::OnEnterPitchAlpha' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, FallDamageHeightBuffer) == 0x0005A0, "Member 'UFortNevadaVehicleConfigs::FallDamageHeightBuffer' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TurningForce) == 0x0005A4, "Member 'UFortNevadaVehicleConfigs::TurningForce' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, ThrustRotationAlpha) == 0x0005A8, "Member 'UFortNevadaVehicleConfigs::ThrustRotationAlpha' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, PitchDrag) == 0x0005AC, "Member 'UFortNevadaVehicleConfigs::PitchDrag' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, YawDrag) == 0x0005B0, "Member 'UFortNevadaVehicleConfigs::YawDrag' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, RollDrag) == 0x0005B4, "Member 'UFortNevadaVehicleConfigs::RollDrag' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BoostThrustDuration) == 0x0005B8, "Member 'UFortNevadaVehicleConfigs::BoostThrustDuration' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BoostDragDuration) == 0x0005BC, "Member 'UFortNevadaVehicleConfigs::BoostDragDuration' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, NumBoostCharges) == 0x0005C0, "Member 'UFortNevadaVehicleConfigs::NumBoostCharges' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BoostChargeDuration) == 0x0005C4, "Member 'UFortNevadaVehicleConfigs::BoostChargeDuration' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BoostChargeDelay) == 0x0005C8, "Member 'UFortNevadaVehicleConfigs::BoostChargeDelay' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BoostDragFinishSpeed) == 0x0005CC, "Member 'UFortNevadaVehicleConfigs::BoostDragFinishSpeed' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamRadius) == 0x0005D0, "Member 'UFortNevadaVehicleConfigs::TractorBeamRadius' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamWithTargetRadius) == 0x0005D4, "Member 'UFortNevadaVehicleConfigs::TractorBeamWithTargetRadius' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamSweepLength) == 0x0005D8, "Member 'UFortNevadaVehicleConfigs::TractorBeamSweepLength' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamChargeTime) == 0x000600, "Member 'UFortNevadaVehicleConfigs::TractorBeamChargeTime' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamDurationTime) == 0x000628, "Member 'UFortNevadaVehicleConfigs::TractorBeamDurationTime' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamTossImpulseStrengthForward) == 0x000650, "Member 'UFortNevadaVehicleConfigs::TractorBeamTossImpulseStrengthForward' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamTossImpulseStrengthUpward) == 0x000678, "Member 'UFortNevadaVehicleConfigs::TractorBeamTossImpulseStrengthUpward' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamShutdownTime) == 0x0006A0, "Member 'UFortNevadaVehicleConfigs::TractorBeamShutdownTime' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamTurnOffDamage) == 0x0006A8, "Member 'UFortNevadaVehicleConfigs::TractorBeamTurnOffDamage' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, AllowTractorBeamAIPawns) == 0x0006D0, "Member 'UFortNevadaVehicleConfigs::AllowTractorBeamAIPawns' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamBreakForceMagnitude) == 0x0006F8, "Member 'UFortNevadaVehicleConfigs::TractorBeamBreakForceMagnitude' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamActive) == 0x000700, "Member 'UFortNevadaVehicleConfigs::TractorBeamActive' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamCooldown) == 0x000728, "Member 'UFortNevadaVehicleConfigs::TractorBeamCooldown' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamDisruptionCooldown) == 0x000750, "Member 'UFortNevadaVehicleConfigs::TractorBeamDisruptionCooldown' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamSocket) == 0x000778, "Member 'UFortNevadaVehicleConfigs::TractorBeamSocket' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamAttachPositionOffset) == 0x000780, "Member 'UFortNevadaVehicleConfigs::TractorBeamAttachPositionOffset' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamTargetOverridenErrorCorrection) == 0x00078C, "Member 'UFortNevadaVehicleConfigs::TractorBeamTargetOverridenErrorCorrection' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, VictimPitchDrag) == 0x0007C0, "Member 'UFortNevadaVehicleConfigs::VictimPitchDrag' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, VictimYawDrag) == 0x0007C4, "Member 'UFortNevadaVehicleConfigs::VictimYawDrag' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, VictimRollDrag) == 0x0007C8, "Member 'UFortNevadaVehicleConfigs::VictimRollDrag' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, TractorBeamVictimUprightForce) == 0x0007CC, "Member 'UFortNevadaVehicleConfigs::TractorBeamVictimUprightForce' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, NumReboots) == 0x0007D8, "Member 'UFortNevadaVehicleConfigs::NumReboots' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, MaxCrashingTime) == 0x0007DC, "Member 'UFortNevadaVehicleConfigs::MaxCrashingTime' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, MaxCrashingScrapingTime) == 0x0007E0, "Member 'UFortNevadaVehicleConfigs::MaxCrashingScrapingTime' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, MaxCrashingTimeSpentNotMoving) == 0x0007E4, "Member 'UFortNevadaVehicleConfigs::MaxCrashingTimeSpentNotMoving' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, SpeedThresholdForCrashed) == 0x0007E8, "Member 'UFortNevadaVehicleConfigs::SpeedThresholdForCrashed' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, RebootDuration) == 0x0007F0, "Member 'UFortNevadaVehicleConfigs::RebootDuration' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, RebootDelay) == 0x000818, "Member 'UFortNevadaVehicleConfigs::RebootDelay' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandingTraceRange) == 0x000840, "Member 'UFortNevadaVehicleConfigs::LandingTraceRange' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, DesiredLandingDistance) == 0x000844, "Member 'UFortNevadaVehicleConfigs::DesiredLandingDistance' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandingDelay_Max) == 0x000848, "Member 'UFortNevadaVehicleConfigs::LandingDelay_Max' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandingDelay_Min) == 0x00084C, "Member 'UFortNevadaVehicleConfigs::LandingDelay_Min' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, HeightForMinLandingDelay) == 0x000850, "Member 'UFortNevadaVehicleConfigs::HeightForMinLandingDelay' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, HeightForMaxLandingDelay) == 0x000854, "Member 'UFortNevadaVehicleConfigs::HeightForMaxLandingDelay' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandingPitchAlphaMax) == 0x000858, "Member 'UFortNevadaVehicleConfigs::LandingPitchAlphaMax' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandingPitchAlphaMin) == 0x00085C, "Member 'UFortNevadaVehicleConfigs::LandingPitchAlphaMin' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, DriverSeatRotationAnimBlendSpeed) == 0x000860, "Member 'UFortNevadaVehicleConfigs::DriverSeatRotationAnimBlendSpeed' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, CrashingDesiredUpLerpFactor) == 0x000864, "Member 'UFortNevadaVehicleConfigs::CrashingDesiredUpLerpFactor' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, CrashedLinearDrag) == 0x000868, "Member 'UFortNevadaVehicleConfigs::CrashedLinearDrag' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandedDragCoef) == 0x00086C, "Member 'UFortNevadaVehicleConfigs::LandedDragCoef' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandedDragCoef2) == 0x000870, "Member 'UFortNevadaVehicleConfigs::LandedDragCoef2' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, LandedMaxDragSpeed) == 0x000874, "Member 'UFortNevadaVehicleConfigs::LandedMaxDragSpeed' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, CrashedAngularDragMultiplier) == 0x000878, "Member 'UFortNevadaVehicleConfigs::CrashedAngularDragMultiplier' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BoostFOV) == 0x00087C, "Member 'UFortNevadaVehicleConfigs::BoostFOV' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, ExtraTraceInteractRange) == 0x000880, "Member 'UFortNevadaVehicleConfigs::ExtraTraceInteractRange' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, AntiGravityMult) == 0x000884, "Member 'UFortNevadaVehicleConfigs::AntiGravityMult' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, InitialLiftDuration) == 0x000888, "Member 'UFortNevadaVehicleConfigs::InitialLiftDuration' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BatteryCostDuringFlight) == 0x000890, "Member 'UFortNevadaVehicleConfigs::BatteryCostDuringFlight' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BatteryRegenDelay) == 0x0008B8, "Member 'UFortNevadaVehicleConfigs::BatteryRegenDelay' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BatteryRegenTickRate) == 0x0008E0, "Member 'UFortNevadaVehicleConfigs::BatteryRegenTickRate' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, BatteryRegenAmount) == 0x000908, "Member 'UFortNevadaVehicleConfigs::BatteryRegenAmount' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, MaxBattery) == 0x000930, "Member 'UFortNevadaVehicleConfigs::MaxBattery' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, MinBatteryForFlight) == 0x000958, "Member 'UFortNevadaVehicleConfigs::MinBatteryForFlight' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, CockpitShapeNames) == 0x000980, "Member 'UFortNevadaVehicleConfigs::CockpitShapeNames' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, CockpitDamageMult) == 0x000990, "Member 'UFortNevadaVehicleConfigs::CockpitDamageMult' has a wrong offset!");
static_assert(offsetof(UFortNevadaVehicleConfigs, CockpitHealth) == 0x0009B8, "Member 'UFortNevadaVehicleConfigs::CockpitHealth' has a wrong offset!");

// Class NevadaRuntime.FortPlayerAnimInstance_NevadaDriver
// 0x00F0 (0x1FB0 - 0x1EC0)
class UFortPlayerAnimInstance_NevadaDriver final : public UFortPlayerAnimInstance_OctopusDriver
{
public:
	class AFortNevadaVehicle*                     NevadaVehicle;                                     // 0x1EC0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimLeftRight;                                     // 0x1EC8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimForwardBackward;                               // 0x1ECC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RootAttachmentLoc;                                 // 0x1ED0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RootAttachmentRot;                                 // 0x1EDC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BoostCount;                                        // 0x1EE8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousBoostCount;                                // 0x1EEC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostingAgain;                                  // 0x1EF0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x1EF1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF2[0x2];                                     // 0x1EF2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinVehicleVelocityToBeMoving;                      // 0x1EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DriverSocketName;                                  // 0x1EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightHandAttachmentSocketName;                     // 0x1F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftHandAttachmentSocketName;                      // 0x1F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightFootAttachmentSocketName;                     // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftFootAttachementSocketName;                     // 0x1F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RightHandRotationOffset;                           // 0x1F20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               LeftHandRotationOffset;                            // 0x1F2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RightFootRotationOffset;                           // 0x1F38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               LeftFootRotationOffset;                            // 0x1F44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RootAttachmentOffset;                              // 0x1F50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5C[0x54];                                    // 0x1F5C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAnimInstance_NevadaDriver">();
	}
	static class UFortPlayerAnimInstance_NevadaDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAnimInstance_NevadaDriver>();
	}
};
static_assert(alignof(UFortPlayerAnimInstance_NevadaDriver) == 0x000010, "Wrong alignment on UFortPlayerAnimInstance_NevadaDriver");
static_assert(sizeof(UFortPlayerAnimInstance_NevadaDriver) == 0x001FB0, "Wrong size on UFortPlayerAnimInstance_NevadaDriver");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, NevadaVehicle) == 0x001EC0, "Member 'UFortPlayerAnimInstance_NevadaDriver::NevadaVehicle' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, AnimLeftRight) == 0x001EC8, "Member 'UFortPlayerAnimInstance_NevadaDriver::AnimLeftRight' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, AnimForwardBackward) == 0x001ECC, "Member 'UFortPlayerAnimInstance_NevadaDriver::AnimForwardBackward' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, RootAttachmentLoc) == 0x001ED0, "Member 'UFortPlayerAnimInstance_NevadaDriver::RootAttachmentLoc' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, RootAttachmentRot) == 0x001EDC, "Member 'UFortPlayerAnimInstance_NevadaDriver::RootAttachmentRot' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, BoostCount) == 0x001EE8, "Member 'UFortPlayerAnimInstance_NevadaDriver::BoostCount' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, PreviousBoostCount) == 0x001EEC, "Member 'UFortPlayerAnimInstance_NevadaDriver::PreviousBoostCount' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, bIsBoostingAgain) == 0x001EF0, "Member 'UFortPlayerAnimInstance_NevadaDriver::bIsBoostingAgain' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, bIsMoving) == 0x001EF1, "Member 'UFortPlayerAnimInstance_NevadaDriver::bIsMoving' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, MinVehicleVelocityToBeMoving) == 0x001EF4, "Member 'UFortPlayerAnimInstance_NevadaDriver::MinVehicleVelocityToBeMoving' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, DriverSocketName) == 0x001EF8, "Member 'UFortPlayerAnimInstance_NevadaDriver::DriverSocketName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, RightHandAttachmentSocketName) == 0x001F00, "Member 'UFortPlayerAnimInstance_NevadaDriver::RightHandAttachmentSocketName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, LeftHandAttachmentSocketName) == 0x001F08, "Member 'UFortPlayerAnimInstance_NevadaDriver::LeftHandAttachmentSocketName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, RightFootAttachmentSocketName) == 0x001F10, "Member 'UFortPlayerAnimInstance_NevadaDriver::RightFootAttachmentSocketName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, LeftFootAttachementSocketName) == 0x001F18, "Member 'UFortPlayerAnimInstance_NevadaDriver::LeftFootAttachementSocketName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, RightHandRotationOffset) == 0x001F20, "Member 'UFortPlayerAnimInstance_NevadaDriver::RightHandRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, LeftHandRotationOffset) == 0x001F2C, "Member 'UFortPlayerAnimInstance_NevadaDriver::LeftHandRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, RightFootRotationOffset) == 0x001F38, "Member 'UFortPlayerAnimInstance_NevadaDriver::RightFootRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, LeftFootRotationOffset) == 0x001F44, "Member 'UFortPlayerAnimInstance_NevadaDriver::LeftFootRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_NevadaDriver, RootAttachmentOffset) == 0x001F50, "Member 'UFortPlayerAnimInstance_NevadaDriver::RootAttachmentOffset' has a wrong offset!");

}

