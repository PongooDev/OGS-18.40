#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Coconut_TODM

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Coconut_TODM.BP_Coconut_TODM_C
// 0x0160 (0x0380 - 0x0220)
class ABP_Coconut_TODM_C final : public AActor
{
public:
	class USpotLightComponent*                    SpotLight_EveningREF;                              // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_nightREF2;                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_ENDREF1;                                 // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_dayREF;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_nightREF1;                               // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_moringREF;                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  coconutPostProcess;                                // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Day_night_light2;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Day_night_light;                                   // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    character_backLight;                               // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    character_fillLight;                               // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    character_keylight;                                // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    island_key_light;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  JanusPost;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  HeavySSAO_Postprocess;                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  NightPostProcess;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  EveningPostProcess;                                // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  MorningPostProcess;                                // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StarMapMeshComp;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkyDomeMeshComp;                                   // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  DayPostProcess;                                    // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SunSpeed;                                          // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FullRotation;                                      // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondsInADay;                                     // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CalendarEvent;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimespan                              CurrentTimeSpan;                                   // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimespanRatio;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              Time_Until_End;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         UpdateCalendarDelay;                               // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunEndPosition;                                    // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunStartPosition;                                  // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEventActive;                                      // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunMinIntensity;                                   // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunMaxIntensity;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrintTimeSpanRatio;                                // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkylightMinIntensity;                              // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkylightMaxIntensity;                              // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NightLightColor;                                   // 0x034C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MorningLightColor;                                 // 0x035C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunTargetPosition;                                 // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(float TimespanRatio)> ChangeAudioParameter;                              // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Coconut_TODM_C">();
	}
	static class ABP_Coconut_TODM_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Coconut_TODM_C>();
	}
};
static_assert(alignof(ABP_Coconut_TODM_C) == 0x000008, "Wrong alignment on ABP_Coconut_TODM_C");
static_assert(sizeof(ABP_Coconut_TODM_C) == 0x000380, "Wrong size on ABP_Coconut_TODM_C");
static_assert(offsetof(ABP_Coconut_TODM_C, SpotLight_EveningREF) == 0x000220, "Member 'ABP_Coconut_TODM_C::SpotLight_EveningREF' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SpotLight_nightREF2) == 0x000228, "Member 'ABP_Coconut_TODM_C::SpotLight_nightREF2' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SpotLight_ENDREF1) == 0x000230, "Member 'ABP_Coconut_TODM_C::SpotLight_ENDREF1' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SpotLight_dayREF) == 0x000238, "Member 'ABP_Coconut_TODM_C::SpotLight_dayREF' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SpotLight_nightREF1) == 0x000240, "Member 'ABP_Coconut_TODM_C::SpotLight_nightREF1' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SpotLight_moringREF) == 0x000248, "Member 'ABP_Coconut_TODM_C::SpotLight_moringREF' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, coconutPostProcess) == 0x000250, "Member 'ABP_Coconut_TODM_C::coconutPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, Day_night_light2) == 0x000258, "Member 'ABP_Coconut_TODM_C::Day_night_light2' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, Day_night_light) == 0x000260, "Member 'ABP_Coconut_TODM_C::Day_night_light' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, character_backLight) == 0x000268, "Member 'ABP_Coconut_TODM_C::character_backLight' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, character_fillLight) == 0x000270, "Member 'ABP_Coconut_TODM_C::character_fillLight' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, character_keylight) == 0x000278, "Member 'ABP_Coconut_TODM_C::character_keylight' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, island_key_light) == 0x000280, "Member 'ABP_Coconut_TODM_C::island_key_light' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, ExponentialHeightFog) == 0x000288, "Member 'ABP_Coconut_TODM_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SkyAtmosphere) == 0x000290, "Member 'ABP_Coconut_TODM_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, DirectionalLight) == 0x000298, "Member 'ABP_Coconut_TODM_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, JanusPost) == 0x0002A0, "Member 'ABP_Coconut_TODM_C::JanusPost' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, HeavySSAO_Postprocess) == 0x0002A8, "Member 'ABP_Coconut_TODM_C::HeavySSAO_Postprocess' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, NightPostProcess) == 0x0002B0, "Member 'ABP_Coconut_TODM_C::NightPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, EveningPostProcess) == 0x0002B8, "Member 'ABP_Coconut_TODM_C::EveningPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, MorningPostProcess) == 0x0002C0, "Member 'ABP_Coconut_TODM_C::MorningPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SkyLight) == 0x0002C8, "Member 'ABP_Coconut_TODM_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, StarMapMeshComp) == 0x0002D0, "Member 'ABP_Coconut_TODM_C::StarMapMeshComp' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SkyDomeMeshComp) == 0x0002D8, "Member 'ABP_Coconut_TODM_C::SkyDomeMeshComp' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, DayPostProcess) == 0x0002E0, "Member 'ABP_Coconut_TODM_C::DayPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_Coconut_TODM_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SunSpeed) == 0x0002F0, "Member 'ABP_Coconut_TODM_C::SunSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, FullRotation) == 0x0002F4, "Member 'ABP_Coconut_TODM_C::FullRotation' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SecondsInADay) == 0x0002F8, "Member 'ABP_Coconut_TODM_C::SecondsInADay' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, CalendarEvent) == 0x000300, "Member 'ABP_Coconut_TODM_C::CalendarEvent' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, CurrentTimeSpan) == 0x000310, "Member 'ABP_Coconut_TODM_C::CurrentTimeSpan' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, TimespanRatio) == 0x000318, "Member 'ABP_Coconut_TODM_C::TimespanRatio' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, Time_Until_End) == 0x000320, "Member 'ABP_Coconut_TODM_C::Time_Until_End' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, UpdateCalendarDelay) == 0x000328, "Member 'ABP_Coconut_TODM_C::UpdateCalendarDelay' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SunEndPosition) == 0x00032C, "Member 'ABP_Coconut_TODM_C::SunEndPosition' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SunStartPosition) == 0x000330, "Member 'ABP_Coconut_TODM_C::SunStartPosition' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, bEventActive) == 0x000334, "Member 'ABP_Coconut_TODM_C::bEventActive' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SunMinIntensity) == 0x000338, "Member 'ABP_Coconut_TODM_C::SunMinIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SunMaxIntensity) == 0x00033C, "Member 'ABP_Coconut_TODM_C::SunMaxIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, PrintTimeSpanRatio) == 0x000340, "Member 'ABP_Coconut_TODM_C::PrintTimeSpanRatio' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SkylightMinIntensity) == 0x000344, "Member 'ABP_Coconut_TODM_C::SkylightMinIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SkylightMaxIntensity) == 0x000348, "Member 'ABP_Coconut_TODM_C::SkylightMaxIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, NightLightColor) == 0x00034C, "Member 'ABP_Coconut_TODM_C::NightLightColor' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, MorningLightColor) == 0x00035C, "Member 'ABP_Coconut_TODM_C::MorningLightColor' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, SunTargetPosition) == 0x00036C, "Member 'ABP_Coconut_TODM_C::SunTargetPosition' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_TODM_C, ChangeAudioParameter) == 0x000370, "Member 'ABP_Coconut_TODM_C::ChangeAudioParameter' has a wrong offset!");

}

