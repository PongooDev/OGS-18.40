#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mark_II_Glider_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Mark_II_Glider_AnimBP.Mark_II_Glider_AnimBP_C
// 0x0D10 (0x10E0 - 0x03D0)
class UMark_II_Glider_AnimBP_C final : public UFortGliderAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x03D8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0408(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0450(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0478(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x04A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x04C8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x04F0(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0570(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0610(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0690(0x0030)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_4;                     // 0x06C0(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0788(0x0080)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x0808(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x08F0(0x0030)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_3;                     // 0x0920(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x09E8(0x0080)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0A68(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0B50(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0B80(0x00B0)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_2;                     // 0x0C30(0x00C8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0CF8(0x00E8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x0DE0(0x00C8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0EA8(0x00E8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0F90(0x0080)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1010(0x00C8)()
	float                                         Time;                                              // 0x10D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Example;                                           // 0x10DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Mark_II_Glider_AnimBP(int32 EntryPoint);
	void AnimNotify_DeployEntered();
	void AnimNotify_ClosedEntered();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Mark_II_Glider_AnimBP_AnimGraphNode_TransitionResult_6748CF3C47EE656E48166FBF1B2F2929();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimNotify_TurnONEngines();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Mark_II_Glider_AnimBP_AnimGraphNode_BlendListByBool_F5DD04044B6A22C682A8529DB42598B5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Mark_II_Glider_AnimBP_AnimGraphNode_ApplyAdditive_849D7B9441C8F79C572465967FBA11DB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Mark_II_Glider_AnimBP_AnimGraphNode_ApplyAdditive_270F88B541D77BFAB3796583C9459381();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Mark_II_Glider_AnimBP_AnimGraphNode_TransitionResult_9B70576D440BFD5932D07AB4032CE614();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Mark_II_Glider_AnimBP_AnimGraphNode_TransitionResult_C1FF40C84FFAA35035F706B44020DAB5();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mark_II_Glider_AnimBP_C">();
	}
	static class UMark_II_Glider_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMark_II_Glider_AnimBP_C>();
	}
};
static_assert(alignof(UMark_II_Glider_AnimBP_C) == 0x000010, "Wrong alignment on UMark_II_Glider_AnimBP_C");
static_assert(sizeof(UMark_II_Glider_AnimBP_C) == 0x0010E0, "Wrong size on UMark_II_Glider_AnimBP_C");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, UberGraphFrame) == 0x0003D0, "Member 'UMark_II_Glider_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_Root) == 0x0003D8, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_Slot) == 0x000408, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_TransitionResult_3) == 0x000450, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000478, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0004A0, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_TransitionResult) == 0x0004C8, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x0004F0, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_BlendListByBool) == 0x000570, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x000610, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_StateResult_2) == 0x000690, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_ApplyAdditive_4) == 0x0006C0, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_ApplyAdditive_4' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000788, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_BlendSpacePlayer_3) == 0x000808, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_StateResult_1) == 0x0008F0, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_ApplyAdditive_3) == 0x000920, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_ApplyAdditive_3' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x0009E8, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000A68, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_StateResult) == 0x000B50, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_StateMachine) == 0x000B80, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_ApplyAdditive_2) == 0x000C30, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_ApplyAdditive_2' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000CF8, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_ApplyAdditive_1) == 0x000DE0, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x000EA8, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x000F90, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, AnimGraphNode_ApplyAdditive) == 0x001010, "Member 'UMark_II_Glider_AnimBP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, Time) == 0x0010D8, "Member 'UMark_II_Glider_AnimBP_C::Time' has a wrong offset!");
static_assert(offsetof(UMark_II_Glider_AnimBP_C, Example) == 0x0010DC, "Member 'UMark_II_Glider_AnimBP_C::Example' has a wrong offset!");

}

