#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetModsRuntime

#include "Basic.hpp"

#include "ValetModsRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "ValetRuntime_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ValetModsRuntime.FortGameStateComponent_ValetMods
// 0x0070 (0x0120 - 0x00B0)
class UFortGameStateComponent_ValetMods : public UFortGameStateComponent
{
public:
	TArray<TSubclassOf<class AFortValetModBase>>  AllMods;                                           // 0x00B0(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TiresTag;                                          // 0x00C0(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxVehiclesCanSpawnWithMod;                        // 0x00C8(0x0028)(Edit, BlueprintVisible, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         PercentChanceSpawnWithMod;                         // 0x00F0(0x0028)(Edit, BlueprintVisible, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool TryInitValetMods();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameStateComponent_ValetMods">();
	}
	static class UFortGameStateComponent_ValetMods* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameStateComponent_ValetMods>();
	}
};
static_assert(alignof(UFortGameStateComponent_ValetMods) == 0x000008, "Wrong alignment on UFortGameStateComponent_ValetMods");
static_assert(sizeof(UFortGameStateComponent_ValetMods) == 0x000120, "Wrong size on UFortGameStateComponent_ValetMods");
static_assert(offsetof(UFortGameStateComponent_ValetMods, AllMods) == 0x0000B0, "Member 'UFortGameStateComponent_ValetMods::AllMods' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_ValetMods, TiresTag) == 0x0000C0, "Member 'UFortGameStateComponent_ValetMods::TiresTag' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_ValetMods, MaxVehiclesCanSpawnWithMod) == 0x0000C8, "Member 'UFortGameStateComponent_ValetMods::MaxVehiclesCanSpawnWithMod' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_ValetMods, PercentChanceSpawnWithMod) == 0x0000F0, "Member 'UFortGameStateComponent_ValetMods::PercentChanceSpawnWithMod' has a wrong offset!");

// Class ValetModsRuntime.FortModInteractPoint
// 0x0030 (0x0250 - 0x0220)
class AFortModInteractPoint final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractText;                                      // 0x0228(0x0018)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortValetModGarage>     ModGarage;                                         // 0x0240(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortValetModBase>       Mod;                                               // 0x0248(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortModInteractPoint">();
	}
	static class AFortModInteractPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortModInteractPoint>();
	}
};
static_assert(alignof(AFortModInteractPoint) == 0x000008, "Wrong alignment on AFortModInteractPoint");
static_assert(sizeof(AFortModInteractPoint) == 0x000250, "Wrong size on AFortModInteractPoint");
static_assert(offsetof(AFortModInteractPoint, InteractText) == 0x000228, "Member 'AFortModInteractPoint::InteractText' has a wrong offset!");
static_assert(offsetof(AFortModInteractPoint, ModGarage) == 0x000240, "Member 'AFortModInteractPoint::ModGarage' has a wrong offset!");
static_assert(offsetof(AFortModInteractPoint, Mod) == 0x000248, "Member 'AFortModInteractPoint::Mod' has a wrong offset!");

// Class ValetModsRuntime.FortValetModBase
// 0x0038 (0x0258 - 0x0220)
class AFortValetModBase : public AActor
{
public:
	struct FGameplayTagContainer                  ModTags;                                           // 0x0220(0x0020)(Edit, NativeAccessSpecifierPublic)
	class FText                                   InteractText;                                      // 0x0240(0x0018)(Edit, NativeAccessSpecifierPublic)

public:
	void OnModAppliedClient(class AFortDagwoodVehicle* ModdedVehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetModBase">();
	}
	static class AFortValetModBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortValetModBase>();
	}
};
static_assert(alignof(AFortValetModBase) == 0x000008, "Wrong alignment on AFortValetModBase");
static_assert(sizeof(AFortValetModBase) == 0x000258, "Wrong size on AFortValetModBase");
static_assert(offsetof(AFortValetModBase, ModTags) == 0x000220, "Member 'AFortValetModBase::ModTags' has a wrong offset!");
static_assert(offsetof(AFortValetModBase, InteractText) == 0x000240, "Member 'AFortValetModBase::InteractText' has a wrong offset!");

// Class ValetModsRuntime.FortValetMod_Tire
// 0x01A0 (0x03F8 - 0x0258)
class AFortValetMod_Tire : public AFortValetModBase
{
public:
	struct FTireInfo                              TireData;                                          // 0x0258(0x01A0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetMod_Tire">();
	}
	static class AFortValetMod_Tire* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortValetMod_Tire>();
	}
};
static_assert(alignof(AFortValetMod_Tire) == 0x000008, "Wrong alignment on AFortValetMod_Tire");
static_assert(sizeof(AFortValetMod_Tire) == 0x0003F8, "Wrong size on AFortValetMod_Tire");
static_assert(offsetof(AFortValetMod_Tire, TireData) == 0x000258, "Member 'AFortValetMod_Tire::TireData' has a wrong offset!");

// Class ValetModsRuntime.FortValetModGarage
// 0x0030 (0x0250 - 0x0220)
class AFortValetModGarage final : public AActor
{
public:
	class AFortDagwoodVehicle*                    CurrentVehicle;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AFortModInteractPoint>      ModInteractPointClass;                             // 0x0228(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FModInteractCategory>           ModInteractCategories;                             // 0x0230(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AFortModInteractPoint*>          SpawnedInteractPoints;                             // 0x0240(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void OnVehicleEnter(class AFortDagwoodVehicle* NewVehicle);
	void OnVehicleExit(class AFortDagwoodVehicle* ExitingVehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetModGarage">();
	}
	static class AFortValetModGarage* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortValetModGarage>();
	}
};
static_assert(alignof(AFortValetModGarage) == 0x000008, "Wrong alignment on AFortValetModGarage");
static_assert(sizeof(AFortValetModGarage) == 0x000250, "Wrong size on AFortValetModGarage");
static_assert(offsetof(AFortValetModGarage, CurrentVehicle) == 0x000220, "Member 'AFortValetModGarage::CurrentVehicle' has a wrong offset!");
static_assert(offsetof(AFortValetModGarage, ModInteractPointClass) == 0x000228, "Member 'AFortValetModGarage::ModInteractPointClass' has a wrong offset!");
static_assert(offsetof(AFortValetModGarage, ModInteractCategories) == 0x000230, "Member 'AFortValetModGarage::ModInteractCategories' has a wrong offset!");
static_assert(offsetof(AFortValetModGarage, SpawnedInteractPoints) == 0x000240, "Member 'AFortValetModGarage::SpawnedInteractPoints' has a wrong offset!");

// Class ValetModsRuntime.FortVehicleModData
// 0x0000 (0x0028 - 0x0028)
class UFortVehicleModData final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleModData">();
	}
	static class UFortVehicleModData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleModData>();
	}
};
static_assert(alignof(UFortVehicleModData) == 0x000008, "Wrong alignment on UFortVehicleModData");
static_assert(sizeof(UFortVehicleModData) == 0x000028, "Wrong size on UFortVehicleModData");

}

