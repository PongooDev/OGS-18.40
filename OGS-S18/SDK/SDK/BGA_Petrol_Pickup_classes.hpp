#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Petrol_Pickup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BGA_HeldObject_Parent_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Petrol_Pickup.BGA_Petrol_Pickup_C
// 0x0370 (0x0E00 - 0x0A90)
class ABGA_Petrol_Pickup_C final : public ABGA_HeldObject_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_Petrol_Pickup_C;                // 0x0A90(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_Object_FloatingInWater;                         // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortItemEntryComponent*                FortItemEntry;                                     // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PetrolCan;                                         // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldExplode;                                     // 0x0AC8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_AC9[0x7];                                      // 0x0AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              Explodeinstigator;                                 // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TargetedActors;                                    // 0x0AD8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FGameplayTag                           GC_Explode;                                        // 0x0AE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectArray;                                       // 0x0AF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SpawnedProjectileMinSpeed;                         // 0x0B00(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SpawnedProjectileMaxSpeed;                         // 0x0B28(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ConeHalfAngleInDegrees;                            // 0x0B50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 CurieBGAtoSpawn;                                   // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CurieFireballsToSpawn;                             // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FireBallsToSpawn;                                  // 0x0B88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortWorldItemDefinition*               WeaponItemDefinition;                              // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPickup*                            WeaponPickupToGrant;                               // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             LastHit;                                           // 0x0BC0(0x0088)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, ContainsInstancedReference)
	struct FTimerHandle                           FuseTimerHandle;                                   // 0x0C48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FuseMinDuration;                                   // 0x0C50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         FuseMaxDuration;                                   // 0x0C78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGuid                                  HeldItemGUID;                                      // 0x0CA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortInventoryOwnerInterface> HeldItemInventoryInterface;                        // 0x0CB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAttachedToWeapon;                                // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dropped;                                           // 0x0CC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC2[0x2];                                      // 0x0CC2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_OnFire;                                         // 0x0CC4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CCC[0x4];                                      // 0x0CCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ExplosionRadius;                                   // 0x0CD0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleDamage;                                     // 0x0CF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortWeapon*                            WeaponAttachedTo;                                  // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Refuel;                                         // 0x0D28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      SpawnCollisionCheck_ObjectTypes;                   // 0x0D30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Max_Spawn_Z;                                       // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnCollisionBlocked;                             // 0x0D44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D45[0x3];                                      // 0x0D45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VelocityAfterVehicleOverlap;                       // 0x0D48(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D54[0x4];                                      // 0x0D54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HotfixExplodeVehicleImpulse;                       // 0x0D58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HotfixExplodeSpinThrust;                           // 0x0D80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_ExplodePlayerDamage;                            // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeVehicleDamage;                           // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeBuildingDamage;                          // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FuseLit;                                           // 0x0DC0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DC1[0x3];                                      // 0x0DC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeedOfNoStickBounce;                           // 0x0DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FailedInteractSound;                               // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_FailedInteract_InventoryIsFull;                // 0x0DD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          InWater;                                           // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BGA_Petrol_Pickup(int32 EntryPoint);
	void BndEvt__FortWaterInteraction_K2Node_ComponentBoundEvent_2_WaterInteractionOnExitWater__DelegateSignature(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* WaterInteractionComponent, bool bIsLastBody);
	void BndEvt__FortWaterInteraction_K2Node_ComponentBoundEvent_1_WaterInteractionOnEnterWater__DelegateSignature(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* WaterInteractionComponent, bool bIsFirstBody);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnCurieElementInteractBegun_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void OnCurieElementInteract_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void BndEvt__FortProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void ReceiveBeginPlay();
	void Refuel(int32 FuelToAdd);
	void _ServerOnly_HideAndDestroy();
	void HideAndDestroy();
	void DropHeldItem();
	void SetHeldItemInfo(TScriptInterface<class IFortInventoryOwnerInterface> InventoryInterface, const struct FGuid& Guid, class AFortWeapon* WeaponAttachedTo_0);
	void ExplodeAndDie();
	void SpawnFireBallsExplodeAndDie();
	void SetFuseAndDrop();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void SpawnCurieFireballs(class AFortPawn* Explodeinstigator_0);
	void ReceiveDestroyed();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void OnRep_ShouldExplode();
	void OnRep_LastHit();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void CalcVehicleImpulse(class AActor* Vehicle, float Magnitude, struct FVector* Vector);
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void GetGameplayEffectClassForTarget(class AActor* Target, class UClass** GE_Class);

	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Petrol_Pickup_C">();
	}
	static class ABGA_Petrol_Pickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Petrol_Pickup_C>();
	}
};
static_assert(alignof(ABGA_Petrol_Pickup_C) == 0x000010, "Wrong alignment on ABGA_Petrol_Pickup_C");
static_assert(sizeof(ABGA_Petrol_Pickup_C) == 0x000E00, "Wrong size on ABGA_Petrol_Pickup_C");
static_assert(offsetof(ABGA_Petrol_Pickup_C, UberGraphFrame_BGA_Petrol_Pickup_C) == 0x000A90, "Member 'ABGA_Petrol_Pickup_C::UberGraphFrame_BGA_Petrol_Pickup_C' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, NS_Object_FloatingInWater) == 0x000A98, "Member 'ABGA_Petrol_Pickup_C::NS_Object_FloatingInWater' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FortItemEntry) == 0x000AA0, "Member 'ABGA_Petrol_Pickup_C::FortItemEntry' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, PetrolCan) == 0x000AA8, "Member 'ABGA_Petrol_Pickup_C::PetrolCan' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Sphere) == 0x000AB0, "Member 'ABGA_Petrol_Pickup_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, PlayerPawn) == 0x000AB8, "Member 'ABGA_Petrol_Pickup_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, PlayerController) == 0x000AC0, "Member 'ABGA_Petrol_Pickup_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ShouldExplode) == 0x000AC8, "Member 'ABGA_Petrol_Pickup_C::ShouldExplode' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Explodeinstigator) == 0x000AD0, "Member 'ABGA_Petrol_Pickup_C::Explodeinstigator' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, TargetedActors) == 0x000AD8, "Member 'ABGA_Petrol_Pickup_C::TargetedActors' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GC_Explode) == 0x000AE8, "Member 'ABGA_Petrol_Pickup_C::GC_Explode' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ObjectArray) == 0x000AF0, "Member 'ABGA_Petrol_Pickup_C::ObjectArray' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnedProjectileMinSpeed) == 0x000B00, "Member 'ABGA_Petrol_Pickup_C::SpawnedProjectileMinSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnedProjectileMaxSpeed) == 0x000B28, "Member 'ABGA_Petrol_Pickup_C::SpawnedProjectileMaxSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ConeHalfAngleInDegrees) == 0x000B50, "Member 'ABGA_Petrol_Pickup_C::ConeHalfAngleInDegrees' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, CurieBGAtoSpawn) == 0x000B78, "Member 'ABGA_Petrol_Pickup_C::CurieBGAtoSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, CurieFireballsToSpawn) == 0x000B80, "Member 'ABGA_Petrol_Pickup_C::CurieFireballsToSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FireBallsToSpawn) == 0x000B88, "Member 'ABGA_Petrol_Pickup_C::FireBallsToSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, WeaponItemDefinition) == 0x000BB0, "Member 'ABGA_Petrol_Pickup_C::WeaponItemDefinition' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, WeaponPickupToGrant) == 0x000BB8, "Member 'ABGA_Petrol_Pickup_C::WeaponPickupToGrant' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, LastHit) == 0x000BC0, "Member 'ABGA_Petrol_Pickup_C::LastHit' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseTimerHandle) == 0x000C48, "Member 'ABGA_Petrol_Pickup_C::FuseTimerHandle' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseMinDuration) == 0x000C50, "Member 'ABGA_Petrol_Pickup_C::FuseMinDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseMaxDuration) == 0x000C78, "Member 'ABGA_Petrol_Pickup_C::FuseMaxDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HeldItemGUID) == 0x000CA0, "Member 'ABGA_Petrol_Pickup_C::HeldItemGUID' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HeldItemInventoryInterface) == 0x000CB0, "Member 'ABGA_Petrol_Pickup_C::HeldItemInventoryInterface' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, IsAttachedToWeapon) == 0x000CC0, "Member 'ABGA_Petrol_Pickup_C::IsAttachedToWeapon' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Dropped) == 0x000CC1, "Member 'ABGA_Petrol_Pickup_C::Dropped' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GC_OnFire) == 0x000CC4, "Member 'ABGA_Petrol_Pickup_C::GC_OnFire' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, ExplosionRadius) == 0x000CD0, "Member 'ABGA_Petrol_Pickup_C::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, VehicleDamage) == 0x000CF8, "Member 'ABGA_Petrol_Pickup_C::VehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, WeaponAttachedTo) == 0x000D20, "Member 'ABGA_Petrol_Pickup_C::WeaponAttachedTo' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GC_Refuel) == 0x000D28, "Member 'ABGA_Petrol_Pickup_C::GC_Refuel' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnCollisionCheck_ObjectTypes) == 0x000D30, "Member 'ABGA_Petrol_Pickup_C::SpawnCollisionCheck_ObjectTypes' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Max_Spawn_Z) == 0x000D40, "Member 'ABGA_Petrol_Pickup_C::Max_Spawn_Z' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, SpawnCollisionBlocked) == 0x000D44, "Member 'ABGA_Petrol_Pickup_C::SpawnCollisionBlocked' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, VelocityAfterVehicleOverlap) == 0x000D48, "Member 'ABGA_Petrol_Pickup_C::VelocityAfterVehicleOverlap' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HotfixExplodeVehicleImpulse) == 0x000D58, "Member 'ABGA_Petrol_Pickup_C::HotfixExplodeVehicleImpulse' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, HotfixExplodeSpinThrust) == 0x000D80, "Member 'ABGA_Petrol_Pickup_C::HotfixExplodeSpinThrust' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GE_ExplodePlayerDamage) == 0x000DA8, "Member 'ABGA_Petrol_Pickup_C::GE_ExplodePlayerDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GE_ExplodeVehicleDamage) == 0x000DB0, "Member 'ABGA_Petrol_Pickup_C::GE_ExplodeVehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, GE_ExplodeBuildingDamage) == 0x000DB8, "Member 'ABGA_Petrol_Pickup_C::GE_ExplodeBuildingDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FuseLit) == 0x000DC0, "Member 'ABGA_Petrol_Pickup_C::FuseLit' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, MinSpeedOfNoStickBounce) == 0x000DC4, "Member 'ABGA_Petrol_Pickup_C::MinSpeedOfNoStickBounce' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, FailedInteractSound) == 0x000DC8, "Member 'ABGA_Petrol_Pickup_C::FailedInteractSound' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, Tag_FailedInteract_InventoryIsFull) == 0x000DD0, "Member 'ABGA_Petrol_Pickup_C::Tag_FailedInteract_InventoryIsFull' has a wrong offset!");
static_assert(offsetof(ABGA_Petrol_Pickup_C, InWater) == 0x000DF0, "Member 'ABGA_Petrol_Pickup_C::InWater' has a wrong offset!");

}

