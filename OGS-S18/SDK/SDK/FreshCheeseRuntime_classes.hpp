#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FreshCheeseRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "FreshCheeseRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class FreshCheeseRuntime.FriendChestSpawner
// 0x0010 (0x0230 - 0x0220)
class AFriendChestSpawner final : public AActor
{
public:
	TArray<class UFriendChestAnalytics*>          SpawnFailureAnalytics;                             // 0x0220(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void LogSpawnerMessage(const class FString& Message);
	void NotifySpawnFailure(const class FString& Reason, const int32 SquadId);
	void SendEndSpawnAnalytics();
	void TriggerFriendChestSpawn();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendChestSpawner">();
	}
	static class AFriendChestSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFriendChestSpawner>();
	}
};
static_assert(alignof(AFriendChestSpawner) == 0x000008, "Wrong alignment on AFriendChestSpawner");
static_assert(sizeof(AFriendChestSpawner) == 0x000230, "Wrong size on AFriendChestSpawner");
static_assert(offsetof(AFriendChestSpawner, SpawnFailureAnalytics) == 0x000220, "Member 'AFriendChestSpawner::SpawnFailureAnalytics' has a wrong offset!");

// Class FreshCheeseRuntime.FortCheatManager_FreshCheese
// 0x0000 (0x0028 - 0x0028)
class UFortCheatManager_FreshCheese final : public UChildCheatManager
{
public:
	void FreshCheeseInstancedLoot(const class FName TierGroup, int32 NumFriends);
	void SpawnFriendChests();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_FreshCheese">();
	}
	static class UFortCheatManager_FreshCheese* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_FreshCheese>();
	}
};
static_assert(alignof(UFortCheatManager_FreshCheese) == 0x000008, "Wrong alignment on UFortCheatManager_FreshCheese");
static_assert(sizeof(UFortCheatManager_FreshCheese) == 0x000028, "Wrong size on UFortCheatManager_FreshCheese");

// Class FreshCheeseRuntime.FriendChestNative
// 0x0158 (0x1008 - 0x0EB0)
class AFriendChestNative final : public ABuildingContainer
{
public:
	uint8                                         AssociatedSquadID;                                 // 0x0EB0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB1[0x7];                                      // 0x0EB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TrigerActivationDelayCurve;                        // 0x0EB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            MiniMapIconBrush;                                  // 0x0EE0(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UFortSimpleMiniMapIndicator*            MinimapIndicator;                                  // 0x0F68(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   InstancedLootTierGroup;                            // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           LootTierGroups;                                    // 0x0F78(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFriendChestRoundPacing>        RoundPacingForSquadSize;                           // 0x0F88(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F98[0x10];                                     // 0x0F98(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FFriendChestPlayerActivationPair> ActivationTimers;                                  // 0x0FA8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FF8[0x8];                                      // 0x0FF8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFriendChestAnalytics*                  Analytics;                                         // 0x1000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearSimulatedDisconnects();
	void CreateIndicators();
	void HandlePlayerDeadStateChanged(class AFortPlayerStateAthena* PlayerState, bool bIsDead);
	void OnPlayerEnter(const class AFortPlayerStateAthena* Player);
	void OnPlayerHit(const class AFortPlayerStateAthena* Player, const bool bWasSuccessful);
	void OnPlayerLeave(const class AFortPlayerStateAthena* Player);
	void OnPlayerPawnDied(class AFortPlayerPawn* DeadPawn);
	void OnPlayerTimeout(const class AFortPlayerStateAthena* Player);
	void OnTriggerComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnTriggerComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnXpEvent(const struct FXPEventInfo& XPEvent);
	void PlayerAdded(class AFortPlayerPawnAthena* Player);
	void PlayerRemoved(class AFortPlayerPawnAthena* Player);
	void RefreshChestState();
	void ResetLootTierForAssociatedSquad(bool bOnlyAlive);
	void RollInstancedLootForSquadMembers(class AGameModeBase* GameMode, const uint8 SquadId);
	void SimulateDisconnect(const TArray<class FString>& SquadUserIds);

	float CalculatePlayerChangedAlpha(const int32 NumberInPosition, const int32 Delta, const float Alpha) const;
	uint8 GetAssociatedSquadID() const;
	void GetAssociatedSquadMembers(bool bIncludeDead, bool bIncludeResurectable, bool bIncludeDisconnected, TArray<class AFortPlayerStateAthena*>* OutSquadMembers) const;
	int32 GetNumTargetsForNextRound(const int32 SquadSize, const int32 RemainingTargets) const;
	struct FTransform GetWeakpointTransformForButtonID(const class UInstancedStaticMeshComponent* InstancedStaticMesh, const int32 InstanceIndex, const struct FVector& WeakpointOffset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendChestNative">();
	}
	static class AFriendChestNative* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFriendChestNative>();
	}
};
static_assert(alignof(AFriendChestNative) == 0x000008, "Wrong alignment on AFriendChestNative");
static_assert(sizeof(AFriendChestNative) == 0x001008, "Wrong size on AFriendChestNative");
static_assert(offsetof(AFriendChestNative, AssociatedSquadID) == 0x000EB0, "Member 'AFriendChestNative::AssociatedSquadID' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, TrigerActivationDelayCurve) == 0x000EB8, "Member 'AFriendChestNative::TrigerActivationDelayCurve' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, MiniMapIconBrush) == 0x000EE0, "Member 'AFriendChestNative::MiniMapIconBrush' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, MinimapIndicator) == 0x000F68, "Member 'AFriendChestNative::MinimapIndicator' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, InstancedLootTierGroup) == 0x000F70, "Member 'AFriendChestNative::InstancedLootTierGroup' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, LootTierGroups) == 0x000F78, "Member 'AFriendChestNative::LootTierGroups' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, RoundPacingForSquadSize) == 0x000F88, "Member 'AFriendChestNative::RoundPacingForSquadSize' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, ActivationTimers) == 0x000FA8, "Member 'AFriendChestNative::ActivationTimers' has a wrong offset!");
static_assert(offsetof(AFriendChestNative, Analytics) == 0x001000, "Member 'AFriendChestNative::Analytics' has a wrong offset!");

// Class FreshCheeseRuntime.FriendChestAnalytics
// 0x0040 (0x0068 - 0x0028)
class UFriendChestAnalytics final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnCoordinates;                                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0xC];                                       // 0x004C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFriendChestAnalyticsParticipant> Participants;                                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendChestAnalytics">();
	}
	static class UFriendChestAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendChestAnalytics>();
	}
};
static_assert(alignof(UFriendChestAnalytics) == 0x000008, "Wrong alignment on UFriendChestAnalytics");
static_assert(sizeof(UFriendChestAnalytics) == 0x000068, "Wrong size on UFriendChestAnalytics");
static_assert(offsetof(UFriendChestAnalytics, SpawnCoordinates) == 0x000040, "Member 'UFriendChestAnalytics::SpawnCoordinates' has a wrong offset!");
static_assert(offsetof(UFriendChestAnalytics, Participants) == 0x000058, "Member 'UFriendChestAnalytics::Participants' has a wrong offset!");

// Class FreshCheeseRuntime.FriendChestLibrary
// 0x0000 (0x0028 - 0x0028)
class UFriendChestLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetFilteredSquadMembers(class UObject* WorldContextObject, uint8 SquadId, bool bIncludeDead, bool bIncludeResurectable, bool bIncludeDisconnected, TArray<class AFortPlayerStateAthena*>* OutSquadMembers);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendChestLibrary">();
	}
	static class UFriendChestLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendChestLibrary>();
	}
};
static_assert(alignof(UFriendChestLibrary) == 0x000008, "Wrong alignment on UFriendChestLibrary");
static_assert(sizeof(UFriendChestLibrary) == 0x000028, "Wrong size on UFriendChestLibrary");

}

