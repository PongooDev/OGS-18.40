#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassS18UI

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BattlePassS18UI.FortBattlePassBulkBuyPageS18.HandleUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassBulkBuyPageS18_HandleUserScrolled final
{
public:
	float                                         ScrollAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageS18_HandleUserScrolled) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageS18_HandleUserScrolled");
static_assert(sizeof(FortBattlePassBulkBuyPageS18_HandleUserScrolled) == 0x000004, "Wrong size on FortBattlePassBulkBuyPageS18_HandleUserScrolled");
static_assert(offsetof(FortBattlePassBulkBuyPageS18_HandleUserScrolled, ScrollAmount) == 0x000000, "Member 'FortBattlePassBulkBuyPageS18_HandleUserScrolled::ScrollAmount' has a wrong offset!");

// Function BattlePassS18UI.FortBattlePassBulkBuyPageS18.OnCostChanged
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassBulkBuyPageS18_OnCostChanged final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageS18_OnCostChanged) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageS18_OnCostChanged");
static_assert(sizeof(FortBattlePassBulkBuyPageS18_OnCostChanged) == 0x000004, "Wrong size on FortBattlePassBulkBuyPageS18_OnCostChanged");
static_assert(offsetof(FortBattlePassBulkBuyPageS18_OnCostChanged, Cost) == 0x000000, "Member 'FortBattlePassBulkBuyPageS18_OnCostChanged::Cost' has a wrong offset!");

// Function BattlePassS18UI.FortBattlePassBulkBuyPageS18.OnPageRangeChanged
// 0x0008 (0x0008 - 0x0000)
struct FortBattlePassBulkBuyPageS18_OnPageRangeChanged final
{
public:
	int32                                         FromPage;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToPage;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageS18_OnPageRangeChanged) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageS18_OnPageRangeChanged");
static_assert(sizeof(FortBattlePassBulkBuyPageS18_OnPageRangeChanged) == 0x000008, "Wrong size on FortBattlePassBulkBuyPageS18_OnPageRangeChanged");
static_assert(offsetof(FortBattlePassBulkBuyPageS18_OnPageRangeChanged, FromPage) == 0x000000, "Member 'FortBattlePassBulkBuyPageS18_OnPageRangeChanged::FromPage' has a wrong offset!");
static_assert(offsetof(FortBattlePassBulkBuyPageS18_OnPageRangeChanged, ToPage) == 0x000004, "Member 'FortBattlePassBulkBuyPageS18_OnPageRangeChanged::ToPage' has a wrong offset!");

// Function BattlePassS18UI.FortBattlePassBulkBuyPageS18.OnRewardCountChanged
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassBulkBuyPageS18_OnRewardCountChanged final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageS18_OnRewardCountChanged) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageS18_OnRewardCountChanged");
static_assert(sizeof(FortBattlePassBulkBuyPageS18_OnRewardCountChanged) == 0x000004, "Wrong size on FortBattlePassBulkBuyPageS18_OnRewardCountChanged");
static_assert(offsetof(FortBattlePassBulkBuyPageS18_OnRewardCountChanged, Count) == 0x000000, "Member 'FortBattlePassBulkBuyPageS18_OnRewardCountChanged::Count' has a wrong offset!");

// Function BattlePassS18UI.BattlePassLandingPageS18.OnBattlePassGiftingAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassLandingPageS18_OnBattlePassGiftingAllowed final
{
public:
	bool                                          bGiftingAllowed;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageS18_OnBattlePassGiftingAllowed) == 0x000001, "Wrong alignment on BattlePassLandingPageS18_OnBattlePassGiftingAllowed");
static_assert(sizeof(BattlePassLandingPageS18_OnBattlePassGiftingAllowed) == 0x000001, "Wrong size on BattlePassLandingPageS18_OnBattlePassGiftingAllowed");
static_assert(offsetof(BattlePassLandingPageS18_OnBattlePassGiftingAllowed, bGiftingAllowed) == 0x000000, "Member 'BattlePassLandingPageS18_OnBattlePassGiftingAllowed::bGiftingAllowed' has a wrong offset!");

// Function BattlePassS18UI.BattlePassLandingPageS18.OnBattlePassSubscriptionAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassLandingPageS18_OnBattlePassSubscriptionAllowed final
{
public:
	bool                                          bSubscriptionAllowed;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageS18_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong alignment on BattlePassLandingPageS18_OnBattlePassSubscriptionAllowed");
static_assert(sizeof(BattlePassLandingPageS18_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong size on BattlePassLandingPageS18_OnBattlePassSubscriptionAllowed");
static_assert(offsetof(BattlePassLandingPageS18_OnBattlePassSubscriptionAllowed, bSubscriptionAllowed) == 0x000000, "Member 'BattlePassLandingPageS18_OnBattlePassSubscriptionAllowed::bSubscriptionAllowed' has a wrong offset!");

// Function BattlePassS18UI.BattlePassRewardPageS18.OnInitForPageType
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS18_OnInitForPageType final
{
public:
	ERewardPageType                               InRewardPageType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS18_OnInitForPageType) == 0x000001, "Wrong alignment on BattlePassRewardPageS18_OnInitForPageType");
static_assert(sizeof(BattlePassRewardPageS18_OnInitForPageType) == 0x000001, "Wrong size on BattlePassRewardPageS18_OnInitForPageType");
static_assert(offsetof(BattlePassRewardPageS18_OnInitForPageType, InRewardPageType) == 0x000000, "Member 'BattlePassRewardPageS18_OnInitForPageType::InRewardPageType' has a wrong offset!");

// Function BattlePassS18UI.BattlePassRewardPageS18.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS18_OnInputMethodChanged final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS18_OnInputMethodChanged) == 0x000001, "Wrong alignment on BattlePassRewardPageS18_OnInputMethodChanged");
static_assert(sizeof(BattlePassRewardPageS18_OnInputMethodChanged) == 0x000001, "Wrong size on BattlePassRewardPageS18_OnInputMethodChanged");
static_assert(offsetof(BattlePassRewardPageS18_OnInputMethodChanged, InputType) == 0x000000, "Member 'BattlePassRewardPageS18_OnInputMethodChanged::InputType' has a wrong offset!");

// Function BattlePassS18UI.BattlePassRewardPageS18.OnPageChanged
// 0x0004 (0x0004 - 0x0000)
struct BattlePassRewardPageS18_OnPageChanged final
{
public:
	int32                                         PageNumber;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS18_OnPageChanged) == 0x000004, "Wrong alignment on BattlePassRewardPageS18_OnPageChanged");
static_assert(sizeof(BattlePassRewardPageS18_OnPageChanged) == 0x000004, "Wrong size on BattlePassRewardPageS18_OnPageChanged");
static_assert(offsetof(BattlePassRewardPageS18_OnPageChanged, PageNumber) == 0x000000, "Member 'BattlePassRewardPageS18_OnPageChanged::PageNumber' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.HandleClaimRewardComplete
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS18_HandleClaimRewardComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OfferTemplateIdList;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_HandleClaimRewardComplete) == 0x000008, "Wrong alignment on BattlePassScreenS18_HandleClaimRewardComplete");
static_assert(sizeof(BattlePassScreenS18_HandleClaimRewardComplete) == 0x000018, "Wrong size on BattlePassScreenS18_HandleClaimRewardComplete");
static_assert(offsetof(BattlePassScreenS18_HandleClaimRewardComplete, bSuccess) == 0x000000, "Member 'BattlePassScreenS18_HandleClaimRewardComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS18_HandleClaimRewardComplete, OfferTemplateIdList) == 0x000008, "Member 'BattlePassScreenS18_HandleClaimRewardComplete::OfferTemplateIdList' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnInsufficientFunds
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS18_OnInsufficientFunds final
{
public:
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_OnInsufficientFunds) == 0x000001, "Wrong alignment on BattlePassScreenS18_OnInsufficientFunds");
static_assert(sizeof(BattlePassScreenS18_OnInsufficientFunds) == 0x000001, "Wrong size on BattlePassScreenS18_OnInsufficientFunds");
static_assert(offsetof(BattlePassScreenS18_OnInsufficientFunds, CurrencyType) == 0x000000, "Member 'BattlePassScreenS18_OnInsufficientFunds::CurrencyType' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnItemDelayed
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS18_OnItemDelayed final
{
public:
	struct FTimespan                              Delay;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_OnItemDelayed) == 0x000008, "Wrong alignment on BattlePassScreenS18_OnItemDelayed");
static_assert(sizeof(BattlePassScreenS18_OnItemDelayed) == 0x000008, "Wrong size on BattlePassScreenS18_OnItemDelayed");
static_assert(offsetof(BattlePassScreenS18_OnItemDelayed, Delay) == 0x000000, "Member 'BattlePassScreenS18_OnItemDelayed::Delay' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct BattlePassScreenS18_OnLevelChanged final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_OnLevelChanged) == 0x000004, "Wrong alignment on BattlePassScreenS18_OnLevelChanged");
static_assert(sizeof(BattlePassScreenS18_OnLevelChanged) == 0x000004, "Wrong size on BattlePassScreenS18_OnLevelChanged");
static_assert(offsetof(BattlePassScreenS18_OnLevelChanged, Level) == 0x000000, "Member 'BattlePassScreenS18_OnLevelChanged::Level' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnSetClaimedRewardInfo
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS18_OnSetClaimedRewardInfo final
{
public:
	int32                                         OwnedRewards;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_OnSetClaimedRewardInfo) == 0x000004, "Wrong alignment on BattlePassScreenS18_OnSetClaimedRewardInfo");
static_assert(sizeof(BattlePassScreenS18_OnSetClaimedRewardInfo) == 0x000008, "Wrong size on BattlePassScreenS18_OnSetClaimedRewardInfo");
static_assert(offsetof(BattlePassScreenS18_OnSetClaimedRewardInfo, OwnedRewards) == 0x000000, "Member 'BattlePassScreenS18_OnSetClaimedRewardInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS18_OnSetClaimedRewardInfo, TotalRewards) == 0x000004, "Member 'BattlePassScreenS18_OnSetClaimedRewardInfo::TotalRewards' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnSetDynamicInput
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS18_OnSetDynamicInput final
{
public:
	EBattlePassInputs                             InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UBattlePassInputData*             InputData;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_OnSetDynamicInput) == 0x000008, "Wrong alignment on BattlePassScreenS18_OnSetDynamicInput");
static_assert(sizeof(BattlePassScreenS18_OnSetDynamicInput) == 0x000010, "Wrong size on BattlePassScreenS18_OnSetDynamicInput");
static_assert(offsetof(BattlePassScreenS18_OnSetDynamicInput, InputType) == 0x000000, "Member 'BattlePassScreenS18_OnSetDynamicInput::InputType' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS18_OnSetDynamicInput, InputData) == 0x000008, "Member 'BattlePassScreenS18_OnSetDynamicInput::InputData' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnSetItemPrice
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS18_OnSetItemPrice final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS18_OnSetItemPrice) == 0x000004, "Wrong alignment on BattlePassScreenS18_OnSetItemPrice");
static_assert(sizeof(BattlePassScreenS18_OnSetItemPrice) == 0x000008, "Wrong size on BattlePassScreenS18_OnSetItemPrice");
static_assert(offsetof(BattlePassScreenS18_OnSetItemPrice, Cost) == 0x000000, "Member 'BattlePassScreenS18_OnSetItemPrice::Cost' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS18_OnSetItemPrice, CurrencyType) == 0x000004, "Member 'BattlePassScreenS18_OnSetItemPrice::CurrencyType' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnSetPrerequisiteInfo
// 0x0028 (0x0028 - 0x0000)
struct BattlePassScreenS18_OnSetPrerequisiteInfo final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OwnedRewards;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeededRewards;                                     // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPrerequisiteLock;                             // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS18_OnSetPrerequisiteInfo) == 0x000008, "Wrong alignment on BattlePassScreenS18_OnSetPrerequisiteInfo");
static_assert(sizeof(BattlePassScreenS18_OnSetPrerequisiteInfo) == 0x000028, "Wrong size on BattlePassScreenS18_OnSetPrerequisiteInfo");
static_assert(offsetof(BattlePassScreenS18_OnSetPrerequisiteInfo, Description) == 0x000000, "Member 'BattlePassScreenS18_OnSetPrerequisiteInfo::Description' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS18_OnSetPrerequisiteInfo, OwnedRewards) == 0x000018, "Member 'BattlePassScreenS18_OnSetPrerequisiteInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS18_OnSetPrerequisiteInfo, NeededRewards) == 0x00001C, "Member 'BattlePassScreenS18_OnSetPrerequisiteInfo::NeededRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS18_OnSetPrerequisiteInfo, bShowPrerequisiteLock) == 0x000020, "Member 'BattlePassScreenS18_OnSetPrerequisiteInfo::bShowPrerequisiteLock' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.OnTransitionItemDetails
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS18_OnTransitionItemDetails final
{
public:
	bool                                          bTransitionForward;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_OnTransitionItemDetails) == 0x000001, "Wrong alignment on BattlePassScreenS18_OnTransitionItemDetails");
static_assert(sizeof(BattlePassScreenS18_OnTransitionItemDetails) == 0x000001, "Wrong size on BattlePassScreenS18_OnTransitionItemDetails");
static_assert(offsetof(BattlePassScreenS18_OnTransitionItemDetails, bTransitionForward) == 0x000000, "Member 'BattlePassScreenS18_OnTransitionItemDetails::bTransitionForward' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.GetQuestPageDelay
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS18_GetQuestPageDelay final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_GetQuestPageDelay) == 0x000008, "Wrong alignment on BattlePassScreenS18_GetQuestPageDelay");
static_assert(sizeof(BattlePassScreenS18_GetQuestPageDelay) == 0x000008, "Wrong size on BattlePassScreenS18_GetQuestPageDelay");
static_assert(offsetof(BattlePassScreenS18_GetQuestPageDelay, ReturnValue) == 0x000000, "Member 'BattlePassScreenS18_GetQuestPageDelay::ReturnValue' has a wrong offset!");

// Function BattlePassS18UI.BattlePassScreenS18.IsSeasonalCustomizationItemOwned
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS18_IsSeasonalCustomizationItemOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS18_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong alignment on BattlePassScreenS18_IsSeasonalCustomizationItemOwned");
static_assert(sizeof(BattlePassScreenS18_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong size on BattlePassScreenS18_IsSeasonalCustomizationItemOwned");
static_assert(offsetof(BattlePassScreenS18_IsSeasonalCustomizationItemOwned, ReturnValue) == 0x000000, "Member 'BattlePassScreenS18_IsSeasonalCustomizationItemOwned::ReturnValue' has a wrong offset!");

// Function BattlePassS18UI.FortBattlePassResourcesWidgetS18.OnBattleStarRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS18_OnBattleStarRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS18_OnBattleStarRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS18_OnBattleStarRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS18_OnBattleStarRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS18_OnBattleStarRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS18_OnBattleStarRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS18_OnBattleStarRewardsSet::Rewards' has a wrong offset!");

// Function BattlePassS18UI.FortBattlePassResourcesWidgetS18.OnStylePointsRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS18_OnStylePointsRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS18_OnStylePointsRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS18_OnStylePointsRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS18_OnStylePointsRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS18_OnStylePointsRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS18_OnStylePointsRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS18_OnStylePointsRewardsSet::Rewards' has a wrong offset!");

// Function BattlePassS18UI.FortBattlePassTutorialTooltipS18.SetText
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassTutorialTooltipS18_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTutorialTooltipS18_SetText) == 0x000008, "Wrong alignment on FortBattlePassTutorialTooltipS18_SetText");
static_assert(sizeof(FortBattlePassTutorialTooltipS18_SetText) == 0x000018, "Wrong size on FortBattlePassTutorialTooltipS18_SetText");
static_assert(offsetof(FortBattlePassTutorialTooltipS18_SetText, Text) == 0x000000, "Member 'FortBattlePassTutorialTooltipS18_SetText::Text' has a wrong offset!");

}

