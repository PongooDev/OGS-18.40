#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TempestRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "TempestRuntime_structs.hpp"


namespace SDK
{

// Class TempestRuntime.FortAIControllerComponent_Tempest
// 0x0018 (0x00C8 - 0x00B0)
class UFortAIControllerComponent_Tempest final : public UFortControllerComponent
{
public:
	class UFortTimeOfDayWeatherComponent*         WeatherComponent;                                  // 0x00B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAIControllerComponent_Tempest">();
	}
	static class UFortAIControllerComponent_Tempest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAIControllerComponent_Tempest>();
	}
};
static_assert(alignof(UFortAIControllerComponent_Tempest) == 0x000008, "Wrong alignment on UFortAIControllerComponent_Tempest");
static_assert(sizeof(UFortAIControllerComponent_Tempest) == 0x0000C8, "Wrong size on UFortAIControllerComponent_Tempest");
static_assert(offsetof(UFortAIControllerComponent_Tempest, WeatherComponent) == 0x0000B0, "Member 'UFortAIControllerComponent_Tempest::WeatherComponent' has a wrong offset!");

// Class TempestRuntime.TempestMovementComponent
// 0x0090 (0x0140 - 0x00B0)
class UTempestMovementComponent final : public UGameFrameworkComponent
{
public:
	TMulticastInlineDelegate<void()>              OnTempestMovementStuck;                            // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(bool bIsInSafeZone)> OnTempestSafeZoneStateChanged;                     // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              FindNextMovementLocationQuery;                     // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MovementSpeed;                                     // 0x00D8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RotationSpeed;                                     // 0x0100(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         bShouldIgnoreZMovement : 1;                        // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_129[0x17];                                     // 0x0129(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TempestMovementComponent">();
	}
	static class UTempestMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTempestMovementComponent>();
	}
};
static_assert(alignof(UTempestMovementComponent) == 0x000008, "Wrong alignment on UTempestMovementComponent");
static_assert(sizeof(UTempestMovementComponent) == 0x000140, "Wrong size on UTempestMovementComponent");
static_assert(offsetof(UTempestMovementComponent, OnTempestMovementStuck) == 0x0000B0, "Member 'UTempestMovementComponent::OnTempestMovementStuck' has a wrong offset!");
static_assert(offsetof(UTempestMovementComponent, OnTempestSafeZoneStateChanged) == 0x0000C0, "Member 'UTempestMovementComponent::OnTempestSafeZoneStateChanged' has a wrong offset!");
static_assert(offsetof(UTempestMovementComponent, FindNextMovementLocationQuery) == 0x0000D0, "Member 'UTempestMovementComponent::FindNextMovementLocationQuery' has a wrong offset!");
static_assert(offsetof(UTempestMovementComponent, MovementSpeed) == 0x0000D8, "Member 'UTempestMovementComponent::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UTempestMovementComponent, RotationSpeed) == 0x000100, "Member 'UTempestMovementComponent::RotationSpeed' has a wrong offset!");

// Class TempestRuntime.TempestStateMachineComponent
// 0x00C0 (0x0170 - 0x00B0)
class alignas(0x10) UTempestStateMachineComponent final : public UGameFrameworkComponent
{
public:
	bool                                          bDestroyOnCompletion;                              // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         FormationDuration;                                 // 0x00B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ActiveDuration;                                    // 0x00E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DissipationDuration;                               // 0x0108(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FTempestStateInfo                      CurrentStateInfo;                                  // 0x0130(0x000C)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x1C];                                     // 0x013C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FTempestStateInfo& TempestStateInfo)> OnTempestStateChangedDelegate;                     // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceDissipate();
	void OnRep_CurrentStateInfo();

	ETempestState GetCurrentState() const;
	float GetCurrentStateCompletionPercentage() const;
	struct FTempestStateInfo GetCurrentStateInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TempestStateMachineComponent">();
	}
	static class UTempestStateMachineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTempestStateMachineComponent>();
	}
};
static_assert(alignof(UTempestStateMachineComponent) == 0x000010, "Wrong alignment on UTempestStateMachineComponent");
static_assert(sizeof(UTempestStateMachineComponent) == 0x000170, "Wrong size on UTempestStateMachineComponent");
static_assert(offsetof(UTempestStateMachineComponent, bDestroyOnCompletion) == 0x0000B0, "Member 'UTempestStateMachineComponent::bDestroyOnCompletion' has a wrong offset!");
static_assert(offsetof(UTempestStateMachineComponent, FormationDuration) == 0x0000B8, "Member 'UTempestStateMachineComponent::FormationDuration' has a wrong offset!");
static_assert(offsetof(UTempestStateMachineComponent, ActiveDuration) == 0x0000E0, "Member 'UTempestStateMachineComponent::ActiveDuration' has a wrong offset!");
static_assert(offsetof(UTempestStateMachineComponent, DissipationDuration) == 0x000108, "Member 'UTempestStateMachineComponent::DissipationDuration' has a wrong offset!");
static_assert(offsetof(UTempestStateMachineComponent, CurrentStateInfo) == 0x000130, "Member 'UTempestStateMachineComponent::CurrentStateInfo' has a wrong offset!");
static_assert(offsetof(UTempestStateMachineComponent, OnTempestStateChangedDelegate) == 0x000158, "Member 'UTempestStateMachineComponent::OnTempestStateChangedDelegate' has a wrong offset!");

}

