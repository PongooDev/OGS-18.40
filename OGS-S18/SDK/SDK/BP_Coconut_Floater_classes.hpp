#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Coconut_Floater

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Coconut_Floater.BP_Coconut_Floater_C
// 0x00A0 (0x02C0 - 0x0220)
class ABP_Coconut_Floater_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DebrisStaticMesh;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      WaterRippleFX;                                     // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBuoyancyComponent*                     Buoyancy;                                          // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Coconut_DebrisManager_C*            DebrisManager;                                     // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDebrisSpeed;                                    // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDebrisSpeed;                                    // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRandomFloater;                                   // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    FloaterMesh;                                       // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class AApollo_Waterbody_Ocean_Parent_C> OceanActor;                                        // 0x0278(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class AApollo_Waterbody_Ocean_Parent_C*       WaterBody;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          b_TurnOnRippleFX;                                  // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebrisSpeedMultiplier;                             // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    Option_0;                                          // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_Coconut_Floater(int32 EntryPoint);
	void MoveObjectAcrossScreen();
	void SetDebrisSpeed(float DebrisSpeed);
	void ReceiveTick(float DeltaSeconds);
	void UpdateWaterInfo();
	void ReceiveBeginPlay();
	void GetWaterSurfaceInfoCallable(class AFortWaterBodyActor* WaterBody_0, class USceneComponent* SceneComponent, struct FVector* WaterPlaneLocation, struct FVector* WaterPlaneNormal, struct FVector* WaterSurfacePosition, float* WaterDepth, int32* WaterBodyIdx, struct FVector* WaterVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Coconut_Floater_C">();
	}
	static class ABP_Coconut_Floater_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Coconut_Floater_C>();
	}
};
static_assert(alignof(ABP_Coconut_Floater_C) == 0x000008, "Wrong alignment on ABP_Coconut_Floater_C");
static_assert(sizeof(ABP_Coconut_Floater_C) == 0x0002C0, "Wrong size on ABP_Coconut_Floater_C");
static_assert(offsetof(ABP_Coconut_Floater_C, UberGraphFrame) == 0x000220, "Member 'ABP_Coconut_Floater_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, Audio) == 0x000228, "Member 'ABP_Coconut_Floater_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, DebrisStaticMesh) == 0x000230, "Member 'ABP_Coconut_Floater_C::DebrisStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, Scene) == 0x000238, "Member 'ABP_Coconut_Floater_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, WaterRippleFX) == 0x000240, "Member 'ABP_Coconut_Floater_C::WaterRippleFX' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, Buoyancy) == 0x000248, "Member 'ABP_Coconut_Floater_C::Buoyancy' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, DebrisManager) == 0x000250, "Member 'ABP_Coconut_Floater_C::DebrisManager' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, MinDebrisSpeed) == 0x000258, "Member 'ABP_Coconut_Floater_C::MinDebrisSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, MaxDebrisSpeed) == 0x00025C, "Member 'ABP_Coconut_Floater_C::MaxDebrisSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, IsRandomFloater) == 0x000260, "Member 'ABP_Coconut_Floater_C::IsRandomFloater' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, FloaterMesh) == 0x000268, "Member 'ABP_Coconut_Floater_C::FloaterMesh' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, OceanActor) == 0x000278, "Member 'ABP_Coconut_Floater_C::OceanActor' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, WaterBody) == 0x0002A0, "Member 'ABP_Coconut_Floater_C::WaterBody' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, b_TurnOnRippleFX) == 0x0002A8, "Member 'ABP_Coconut_Floater_C::b_TurnOnRippleFX' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, DebrisSpeedMultiplier) == 0x0002AC, "Member 'ABP_Coconut_Floater_C::DebrisSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_Floater_C, Option_0) == 0x0002B0, "Member 'ABP_Coconut_Floater_C::Option_0' has a wrong offset!");

}

