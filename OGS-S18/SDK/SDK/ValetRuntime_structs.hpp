#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Enum ValetRuntime.ETireStates
// NumValues: 0x0003
enum class ETireStates : uint8
{
	Default                                  = 0,
	Popped                                   = 1,
	ETireStates_MAX                          = 2,
};

// Enum ValetRuntime.ETireSurfaces
// NumValues: 0x0006
enum class ETireSurfaces : uint8
{
	Road                                     = 0,
	Dirt                                     = 1,
	Grass                                    = 2,
	Air                                      = 3,
	Water                                    = 4,
	ETireSurfaces_MAX                        = 5,
};

// Enum ValetRuntime.EFortDagwoodSimEvent
// NumValues: 0x0009
enum class EFortDagwoodSimEvent : uint8
{
	EnterLandscape                           = 0,
	ExitLandscape                            = 1,
	EnterRoad                                = 2,
	ExitRoad                                 = 3,
	Explode                                  = 4,
	FlipImpact                               = 5,
	StartBoost                               = 6,
	FinishBoost                              = 7,
	EFortDagwoodSimEvent_MAX                 = 8,
};

// Enum ValetRuntime.EVehicleClass
// NumValues: 0x0005
enum class EVehicleClass : uint8
{
	Sedan                                    = 0,
	Sport                                    = 1,
	PickupTruck                              = 2,
	SemiTruck                                = 3,
	EVehicleClass_MAX                        = 4,
};

// Enum ValetRuntime.ETireLocations
// NumValues: 0x0005
enum class ETireLocations : uint8
{
	FrontRight                               = 0,
	FrontLeft                                = 1,
	BackRight                                = 2,
	BackLeft                                 = 3,
	ETireLocations_MAX                       = 4,
};

// Enum ValetRuntime.EPoppedTireReactionStates
// NumValues: 0x0008
enum class EPoppedTireReactionStates : uint8
{
	None                                     = 0,
	VeerLeft                                 = 1,
	VeerRight                                = 2,
	Wiggle                                   = 3,
	Yaw90                                    = 4,
	FlipPitch                                = 5,
	FlipRoll                                 = 6,
	EPoppedTireReactionStates_MAX            = 7,
};

// Enum ValetRuntime.EFuelLeakType
// NumValues: 0x0003
enum class EFuelLeakType : uint8
{
	None                                     = 0,
	GenericFromBetweenRearTires              = 1,
	EFuelLeakType_MAX                        = 2,
};

// Enum ValetRuntime.EControlsPrototypes
// NumValues: 0x0005
enum class EControlsPrototypes : uint8
{
	CameraSteering                           = 0,
	NonCameraSteering                        = 1,
	HybridCameraSteering                     = 2,
	MaxCount                                 = 3,
	EControlsPrototypes_MAX                  = 4,
};

// ScriptStruct ValetRuntime.RuntimeSpringsInfo
// 0x0018 (0x0018 - 0x0000)
struct FRuntimeSpringsInfo final
{
public:
	float                                         SpringStiffMultiplier;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDampMultiplier;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringLengthMultiplier;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearSpringLengthMultiplier;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireZOffset;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireZOffset_B;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeSpringsInfo) == 0x000004, "Wrong alignment on FRuntimeSpringsInfo");
static_assert(sizeof(FRuntimeSpringsInfo) == 0x000018, "Wrong size on FRuntimeSpringsInfo");
static_assert(offsetof(FRuntimeSpringsInfo, SpringStiffMultiplier) == 0x000000, "Member 'FRuntimeSpringsInfo::SpringStiffMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeSpringsInfo, SpringDampMultiplier) == 0x000004, "Member 'FRuntimeSpringsInfo::SpringDampMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeSpringsInfo, SpringLengthMultiplier) == 0x000008, "Member 'FRuntimeSpringsInfo::SpringLengthMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeSpringsInfo, RearSpringLengthMultiplier) == 0x00000C, "Member 'FRuntimeSpringsInfo::RearSpringLengthMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeSpringsInfo, TireZOffset) == 0x000010, "Member 'FRuntimeSpringsInfo::TireZOffset' has a wrong offset!");
static_assert(offsetof(FRuntimeSpringsInfo, TireZOffset_B) == 0x000014, "Member 'FRuntimeSpringsInfo::TireZOffset_B' has a wrong offset!");

// ScriptStruct ValetRuntime.FortDagwoodCmd
// 0x001C (0x001C - 0x0000)
struct FFortDagwoodCmd final
{
public:
	float                                         ForwardAlpha;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightAlpha;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationAlpha;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 MovementDir;                                       // 0x000C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bBoost : 1;                                        // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHandbrake : 1;                                    // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDagwoodCmd) == 0x000004, "Wrong alignment on FFortDagwoodCmd");
static_assert(sizeof(FFortDagwoodCmd) == 0x00001C, "Wrong size on FFortDagwoodCmd");
static_assert(offsetof(FFortDagwoodCmd, ForwardAlpha) == 0x000000, "Member 'FFortDagwoodCmd::ForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortDagwoodCmd, RightAlpha) == 0x000004, "Member 'FFortDagwoodCmd::RightAlpha' has a wrong offset!");
static_assert(offsetof(FFortDagwoodCmd, AccelerationAlpha) == 0x000008, "Member 'FFortDagwoodCmd::AccelerationAlpha' has a wrong offset!");
static_assert(offsetof(FFortDagwoodCmd, MovementDir) == 0x00000C, "Member 'FFortDagwoodCmd::MovementDir' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodInternal
// 0x0098 (0x00F0 - 0x0058)
struct FDagwoodInternal final : public FFortVehicleInternalPersistent
{
public:
	uint8                                         Pad_58[0x98];                                      // 0x0058(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodInternal) == 0x000008, "Wrong alignment on FDagwoodInternal");
static_assert(sizeof(FDagwoodInternal) == 0x0000F0, "Wrong size on FDagwoodInternal");

// ScriptStruct ValetRuntime.DagwoodOutPersistent
// 0x0018 (0x0028 - 0x0010)
struct FDagwoodOutPersistent final : public FFortVehicleOutPersistent
{
public:
	bool                                          bOnRoad;                                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnLandscape;                                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnDirt;                                           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnVehicle;                                        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoosting;                                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETireSurfaces>                         TireSurfaces;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodOutPersistent) == 0x000008, "Wrong alignment on FDagwoodOutPersistent");
static_assert(sizeof(FDagwoodOutPersistent) == 0x000028, "Wrong size on FDagwoodOutPersistent");
static_assert(offsetof(FDagwoodOutPersistent, bOnRoad) == 0x000010, "Member 'FDagwoodOutPersistent::bOnRoad' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bOnLandscape) == 0x000011, "Member 'FDagwoodOutPersistent::bOnLandscape' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bOnDirt) == 0x000012, "Member 'FDagwoodOutPersistent::bOnDirt' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bOnVehicle) == 0x000013, "Member 'FDagwoodOutPersistent::bOnVehicle' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bBoosting) == 0x000014, "Member 'FDagwoodOutPersistent::bBoosting' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, TireSurfaces) == 0x000018, "Member 'FDagwoodOutPersistent::TireSurfaces' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodOutContinuous
// 0x0010 (0x0038 - 0x0028)
struct FDagwoodOutContinuous final : public FFortVehicleOutContinuous
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodOutContinuous) == 0x000008, "Wrong alignment on FDagwoodOutContinuous");
static_assert(sizeof(FDagwoodOutContinuous) == 0x000038, "Wrong size on FDagwoodOutContinuous");

// ScriptStruct ValetRuntime.DagwoodState_PT
// 0x0158 (0x0158 - 0x0000)
struct FDagwoodState_PT final
{
public:
	struct FDagwoodInternal                       internal;                                          // 0x0000(0x00F0)(NativeAccessSpecifierPublic)
	struct FDagwoodOutPersistent                  OutPersistent;                                     // 0x00F0(0x0028)(NativeAccessSpecifierPublic)
	struct FDagwoodOutContinuous                  OutContinuous;                                     // 0x0118(0x0038)(NativeAccessSpecifierPublic)
	bool                                          bOutValid;                                         // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodState_PT) == 0x000008, "Wrong alignment on FDagwoodState_PT");
static_assert(sizeof(FDagwoodState_PT) == 0x000158, "Wrong size on FDagwoodState_PT");
static_assert(offsetof(FDagwoodState_PT, internal) == 0x000000, "Member 'FDagwoodState_PT::internal' has a wrong offset!");
static_assert(offsetof(FDagwoodState_PT, OutPersistent) == 0x0000F0, "Member 'FDagwoodState_PT::OutPersistent' has a wrong offset!");
static_assert(offsetof(FDagwoodState_PT, OutContinuous) == 0x000118, "Member 'FDagwoodState_PT::OutContinuous' has a wrong offset!");
static_assert(offsetof(FDagwoodState_PT, bOutValid) == 0x000150, "Member 'FDagwoodState_PT::bOutValid' has a wrong offset!");

// ScriptStruct ValetRuntime.RuntimeBoostInfo
// 0x0018 (0x0018 - 0x0000)
struct FRuntimeBoostInfo final
{
public:
	uint8                                         bCanBoost : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesRechargeableBoost : 1;                        // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostPushForce;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedForceMultiplier;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedMultiplier;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRateOfRegen;                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRateOfUse;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeBoostInfo) == 0x000004, "Wrong alignment on FRuntimeBoostInfo");
static_assert(sizeof(FRuntimeBoostInfo) == 0x000018, "Wrong size on FRuntimeBoostInfo");
static_assert(offsetof(FRuntimeBoostInfo, BoostPushForce) == 0x000004, "Member 'FRuntimeBoostInfo::BoostPushForce' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, BoostTopSpeedForceMultiplier) == 0x000008, "Member 'FRuntimeBoostInfo::BoostTopSpeedForceMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, BoostTopSpeedMultiplier) == 0x00000C, "Member 'FRuntimeBoostInfo::BoostTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, RechargeableBoostRateOfRegen) == 0x000010, "Member 'FRuntimeBoostInfo::RechargeableBoostRateOfRegen' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, RechargeableBoostRateOfUse) == 0x000014, "Member 'FRuntimeBoostInfo::RechargeableBoostRateOfUse' has a wrong offset!");

// ScriptStruct ValetRuntime.RuntimeFuelInfo
// 0x000C (0x000C - 0x0000)
struct FRuntimeFuelInfo final
{
public:
	float                                         MaxFuel;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelPerSecondDriving;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelPerSecondBoosting;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeFuelInfo) == 0x000004, "Wrong alignment on FRuntimeFuelInfo");
static_assert(sizeof(FRuntimeFuelInfo) == 0x00000C, "Wrong size on FRuntimeFuelInfo");
static_assert(offsetof(FRuntimeFuelInfo, MaxFuel) == 0x000000, "Member 'FRuntimeFuelInfo::MaxFuel' has a wrong offset!");
static_assert(offsetof(FRuntimeFuelInfo, FuelPerSecondDriving) == 0x000004, "Member 'FRuntimeFuelInfo::FuelPerSecondDriving' has a wrong offset!");
static_assert(offsetof(FRuntimeFuelInfo, FuelPerSecondBoosting) == 0x000008, "Member 'FRuntimeFuelInfo::FuelPerSecondBoosting' has a wrong offset!");

// ScriptStruct ValetRuntime.RuntimeGearInfo
// 0x0010 (0x0010 - 0x0000)
struct FRuntimeGearInfo final
{
public:
	int32                                         GearIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushForce;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeGearInfo) == 0x000004, "Wrong alignment on FRuntimeGearInfo");
static_assert(sizeof(FRuntimeGearInfo) == 0x000010, "Wrong size on FRuntimeGearInfo");
static_assert(offsetof(FRuntimeGearInfo, GearIndex) == 0x000000, "Member 'FRuntimeGearInfo::GearIndex' has a wrong offset!");
static_assert(offsetof(FRuntimeGearInfo, TopSpeed) == 0x000004, "Member 'FRuntimeGearInfo::TopSpeed' has a wrong offset!");
static_assert(offsetof(FRuntimeGearInfo, MinSpeed) == 0x000008, "Member 'FRuntimeGearInfo::MinSpeed' has a wrong offset!");
static_assert(offsetof(FRuntimeGearInfo, PushForce) == 0x00000C, "Member 'FRuntimeGearInfo::PushForce' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodRuntimeModifiers
// 0x0080 (0x0080 - 0x0000)
struct FDagwoodRuntimeModifiers final
{
public:
	struct FRuntimeBoostInfo                      BoostInfo;                                         // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeFuelInfo                       FuelInfo;                                          // 0x0018(0x000C)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeSpringsInfo                    SpringsInfo;                                       // 0x0024(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDamageFriendlyFire;                               // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageOtherVehicles;                              // 0x003D(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageOwnVehicle;                                 // 0x003E(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityMultiplier;                                 // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInclineAngle;                                   // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTiltAngle;                                      // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRuntimeGearInfo>               GearInfos;                                         // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TireModTag;                                        // 0x0060(0x0008)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TireModVersion;                                    // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfDestructTime;                                  // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeExplosion;                                  // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeZeroHealth;                                 // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeSelfDestructCleanup;                        // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DataVersion;                                       // 0x007C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodRuntimeModifiers) == 0x000008, "Wrong alignment on FDagwoodRuntimeModifiers");
static_assert(sizeof(FDagwoodRuntimeModifiers) == 0x000080, "Wrong size on FDagwoodRuntimeModifiers");
static_assert(offsetof(FDagwoodRuntimeModifiers, BoostInfo) == 0x000000, "Member 'FDagwoodRuntimeModifiers::BoostInfo' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, FuelInfo) == 0x000018, "Member 'FDagwoodRuntimeModifiers::FuelInfo' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, SpringsInfo) == 0x000024, "Member 'FDagwoodRuntimeModifiers::SpringsInfo' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bDamageFriendlyFire) == 0x00003C, "Member 'FDagwoodRuntimeModifiers::bDamageFriendlyFire' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bDamageOtherVehicles) == 0x00003D, "Member 'FDagwoodRuntimeModifiers::bDamageOtherVehicles' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bDamageOwnVehicle) == 0x00003E, "Member 'FDagwoodRuntimeModifiers::bDamageOwnVehicle' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, GravityMultiplier) == 0x000040, "Member 'FDagwoodRuntimeModifiers::GravityMultiplier' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxInclineAngle) == 0x000044, "Member 'FDagwoodRuntimeModifiers::MaxInclineAngle' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTiltAngle) == 0x000048, "Member 'FDagwoodRuntimeModifiers::MaxTiltAngle' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, GearInfos) == 0x000050, "Member 'FDagwoodRuntimeModifiers::GearInfos' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, TireModTag) == 0x000060, "Member 'FDagwoodRuntimeModifiers::TireModTag' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, TireModVersion) == 0x000068, "Member 'FDagwoodRuntimeModifiers::TireModVersion' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, SelfDestructTime) == 0x00006C, "Member 'FDagwoodRuntimeModifiers::SelfDestructTime' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTimeExplosion) == 0x000070, "Member 'FDagwoodRuntimeModifiers::MaxTimeExplosion' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTimeZeroHealth) == 0x000074, "Member 'FDagwoodRuntimeModifiers::MaxTimeZeroHealth' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTimeSelfDestructCleanup) == 0x000078, "Member 'FDagwoodRuntimeModifiers::MaxTimeSelfDestructCleanup' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, DataVersion) == 0x00007C, "Member 'FDagwoodRuntimeModifiers::DataVersion' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodInPersistent
// 0x00E0 (0x0228 - 0x0148)
struct FDagwoodInPersistent final : public FFortVehicleInPersistent
{
public:
	class UFortDagwoodVehicleConfigs*             FortDagwoodVehicleConfigs;                         // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDagwoodRuntimeModifiers               DagwoodRuntimeModifiedProperties;                  // 0x0150(0x0080)(NativeAccessSpecifierPublic)
	TArray<ETireStates>                           TireStates;                                        // 0x01D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x48];                                     // 0x01E0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodInPersistent) == 0x000008, "Wrong alignment on FDagwoodInPersistent");
static_assert(sizeof(FDagwoodInPersistent) == 0x000228, "Wrong size on FDagwoodInPersistent");
static_assert(offsetof(FDagwoodInPersistent, FortDagwoodVehicleConfigs) == 0x000148, "Member 'FDagwoodInPersistent::FortDagwoodVehicleConfigs' has a wrong offset!");
static_assert(offsetof(FDagwoodInPersistent, DagwoodRuntimeModifiedProperties) == 0x000150, "Member 'FDagwoodInPersistent::DagwoodRuntimeModifiedProperties' has a wrong offset!");
static_assert(offsetof(FDagwoodInPersistent, TireStates) == 0x0001D0, "Member 'FDagwoodInPersistent::TireStates' has a wrong offset!");

// ScriptStruct ValetRuntime.RuntimeTerrainHandlingInfo
// 0x0010 (0x0010 - 0x0000)
struct FRuntimeTerrainHandlingInfo final
{
public:
	float                                         PushForceMultiplier;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopSpeedMultiplier;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontTireFriction;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearTireFriction;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeTerrainHandlingInfo) == 0x000004, "Wrong alignment on FRuntimeTerrainHandlingInfo");
static_assert(sizeof(FRuntimeTerrainHandlingInfo) == 0x000010, "Wrong size on FRuntimeTerrainHandlingInfo");
static_assert(offsetof(FRuntimeTerrainHandlingInfo, PushForceMultiplier) == 0x000000, "Member 'FRuntimeTerrainHandlingInfo::PushForceMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeTerrainHandlingInfo, TopSpeedMultiplier) == 0x000004, "Member 'FRuntimeTerrainHandlingInfo::TopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeTerrainHandlingInfo, FrontTireFriction) == 0x000008, "Member 'FRuntimeTerrainHandlingInfo::FrontTireFriction' has a wrong offset!");
static_assert(offsetof(FRuntimeTerrainHandlingInfo, RearTireFriction) == 0x00000C, "Member 'FRuntimeTerrainHandlingInfo::RearTireFriction' has a wrong offset!");

// ScriptStruct ValetRuntime.TireInfo
// 0x01A0 (0x01A0 - 0x0000)
struct FTireInfo final
{
public:
	class UStaticMesh*                            TireStaticMesh;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            UndercarriageCollisionStaticMesh;                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeSpringsInfo                    SpringTuning;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeTerrainHandlingInfo            RoadBehavior;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeTerrainHandlingInfo            DirtBehavior;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeTerrainHandlingInfo            GrassBehavior;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringLength;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringStiff;                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringDamp;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireMeshYaw;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireMeshLateralAdjustment;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireMeshScaleFront;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireMeshScaleRear;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxDriveInclineAngle;                              // 0x0078(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         UprightRollStiff;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightRollDamp;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightPitchStiff;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightPitchDamp;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightYawStiff;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightYawDamp;                                    // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidAxleForwardAdjust;                              // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TireHealth;                                        // 0x00C0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         WaterTopSpeedMultiplier;                           // 0x00E8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         PontoonScaleRadiusPerTick;                         // 0x0110(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           CollisionShapeNames;                               // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DamageablePartShapeNames;                          // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   PoppedTireBoneName;                                // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionBoneName;                                 // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             TireDirtLoop;                                      // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             TireGrassLoop;                                     // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             TireRoadLoop;                                      // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SuspensionLight;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SuspensionMedium;                                  // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SuspensionHeavy;                                   // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            AppliedGameplayEffect;                             // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTireInfo) == 0x000008, "Wrong alignment on FTireInfo");
static_assert(sizeof(FTireInfo) == 0x0001A0, "Wrong size on FTireInfo");
static_assert(offsetof(FTireInfo, TireStaticMesh) == 0x000000, "Member 'FTireInfo::TireStaticMesh' has a wrong offset!");
static_assert(offsetof(FTireInfo, UndercarriageCollisionStaticMesh) == 0x000008, "Member 'FTireInfo::UndercarriageCollisionStaticMesh' has a wrong offset!");
static_assert(offsetof(FTireInfo, SpringTuning) == 0x000010, "Member 'FTireInfo::SpringTuning' has a wrong offset!");
static_assert(offsetof(FTireInfo, RoadBehavior) == 0x000028, "Member 'FTireInfo::RoadBehavior' has a wrong offset!");
static_assert(offsetof(FTireInfo, DirtBehavior) == 0x000038, "Member 'FTireInfo::DirtBehavior' has a wrong offset!");
static_assert(offsetof(FTireInfo, GrassBehavior) == 0x000048, "Member 'FTireInfo::GrassBehavior' has a wrong offset!");
static_assert(offsetof(FTireInfo, PoppedTireSpringLength) == 0x000058, "Member 'FTireInfo::PoppedTireSpringLength' has a wrong offset!");
static_assert(offsetof(FTireInfo, PoppedTireSpringStiff) == 0x00005C, "Member 'FTireInfo::PoppedTireSpringStiff' has a wrong offset!");
static_assert(offsetof(FTireInfo, PoppedTireSpringDamp) == 0x000060, "Member 'FTireInfo::PoppedTireSpringDamp' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireMeshYaw) == 0x000064, "Member 'FTireInfo::TireMeshYaw' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireMeshLateralAdjustment) == 0x000068, "Member 'FTireInfo::TireMeshLateralAdjustment' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireMeshScaleFront) == 0x00006C, "Member 'FTireInfo::TireMeshScaleFront' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireMeshScaleRear) == 0x000070, "Member 'FTireInfo::TireMeshScaleRear' has a wrong offset!");
static_assert(offsetof(FTireInfo, MaxDriveInclineAngle) == 0x000078, "Member 'FTireInfo::MaxDriveInclineAngle' has a wrong offset!");
static_assert(offsetof(FTireInfo, UprightRollStiff) == 0x0000A0, "Member 'FTireInfo::UprightRollStiff' has a wrong offset!");
static_assert(offsetof(FTireInfo, UprightRollDamp) == 0x0000A4, "Member 'FTireInfo::UprightRollDamp' has a wrong offset!");
static_assert(offsetof(FTireInfo, UprightPitchStiff) == 0x0000A8, "Member 'FTireInfo::UprightPitchStiff' has a wrong offset!");
static_assert(offsetof(FTireInfo, UprightPitchDamp) == 0x0000AC, "Member 'FTireInfo::UprightPitchDamp' has a wrong offset!");
static_assert(offsetof(FTireInfo, UprightYawStiff) == 0x0000B0, "Member 'FTireInfo::UprightYawStiff' has a wrong offset!");
static_assert(offsetof(FTireInfo, UprightYawDamp) == 0x0000B4, "Member 'FTireInfo::UprightYawDamp' has a wrong offset!");
static_assert(offsetof(FTireInfo, MidAxleForwardAdjust) == 0x0000B8, "Member 'FTireInfo::MidAxleForwardAdjust' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireHealth) == 0x0000C0, "Member 'FTireInfo::TireHealth' has a wrong offset!");
static_assert(offsetof(FTireInfo, WaterTopSpeedMultiplier) == 0x0000E8, "Member 'FTireInfo::WaterTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FTireInfo, PontoonScaleRadiusPerTick) == 0x000110, "Member 'FTireInfo::PontoonScaleRadiusPerTick' has a wrong offset!");
static_assert(offsetof(FTireInfo, CollisionShapeNames) == 0x000138, "Member 'FTireInfo::CollisionShapeNames' has a wrong offset!");
static_assert(offsetof(FTireInfo, DamageablePartShapeNames) == 0x000148, "Member 'FTireInfo::DamageablePartShapeNames' has a wrong offset!");
static_assert(offsetof(FTireInfo, PoppedTireBoneName) == 0x000158, "Member 'FTireInfo::PoppedTireBoneName' has a wrong offset!");
static_assert(offsetof(FTireInfo, CollisionBoneName) == 0x000160, "Member 'FTireInfo::CollisionBoneName' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireDirtLoop) == 0x000168, "Member 'FTireInfo::TireDirtLoop' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireGrassLoop) == 0x000170, "Member 'FTireInfo::TireGrassLoop' has a wrong offset!");
static_assert(offsetof(FTireInfo, TireRoadLoop) == 0x000178, "Member 'FTireInfo::TireRoadLoop' has a wrong offset!");
static_assert(offsetof(FTireInfo, SuspensionLight) == 0x000180, "Member 'FTireInfo::SuspensionLight' has a wrong offset!");
static_assert(offsetof(FTireInfo, SuspensionMedium) == 0x000188, "Member 'FTireInfo::SuspensionMedium' has a wrong offset!");
static_assert(offsetof(FTireInfo, SuspensionHeavy) == 0x000190, "Member 'FTireInfo::SuspensionHeavy' has a wrong offset!");
static_assert(offsetof(FTireInfo, AppliedGameplayEffect) == 0x000198, "Member 'FTireInfo::AppliedGameplayEffect' has a wrong offset!");

// ScriptStruct ValetRuntime.VehiclePropReplacementData
// 0x0040 (0x0040 - 0x0000)
struct FVehiclePropReplacementData final
{
public:
	TSoftObjectPtr<class UFortVehicleItemDefinition> FortVehicleItemDefinition;                         // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TransOffset;                                       // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotOffset;                                         // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePropReplacementData) == 0x000008, "Wrong alignment on FVehiclePropReplacementData");
static_assert(sizeof(FVehiclePropReplacementData) == 0x000040, "Wrong size on FVehiclePropReplacementData");
static_assert(offsetof(FVehiclePropReplacementData, FortVehicleItemDefinition) == 0x000000, "Member 'FVehiclePropReplacementData::FortVehicleItemDefinition' has a wrong offset!");
static_assert(offsetof(FVehiclePropReplacementData, TransOffset) == 0x000028, "Member 'FVehiclePropReplacementData::TransOffset' has a wrong offset!");
static_assert(offsetof(FVehiclePropReplacementData, RotOffset) == 0x000034, "Member 'FVehiclePropReplacementData::RotOffset' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodFutureClientInput
// 0x0020 (0x0020 - 0x0000)
struct FDagwoodFutureClientInput final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDagwoodCmd                        InputCmd;                                          // 0x0004(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodFutureClientInput) == 0x000004, "Wrong alignment on FDagwoodFutureClientInput");
static_assert(sizeof(FDagwoodFutureClientInput) == 0x000020, "Wrong size on FDagwoodFutureClientInput");
static_assert(offsetof(FDagwoodFutureClientInput, Frame) == 0x000000, "Member 'FDagwoodFutureClientInput::Frame' has a wrong offset!");
static_assert(offsetof(FDagwoodFutureClientInput, InputCmd) == 0x000004, "Member 'FDagwoodFutureClientInput::InputCmd' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodManagedState
// 0x03C0 (0x03C0 - 0x0000)
struct FDagwoodManagedState final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDagwoodCmd                        InputCmd;                                          // 0x0004(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDagwoodInPersistent                   GT_State;                                          // 0x0020(0x0228)(NativeAccessSpecifierPublic)
	struct FDagwoodState_PT                       PT_State;                                          // 0x0248(0x0158)(NativeAccessSpecifierPublic)
	class APlayerController*                      PC;                                                // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDagwoodFutureClientInput>      FutureInputs;                                      // 0x03B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodManagedState) == 0x000008, "Wrong alignment on FDagwoodManagedState");
static_assert(sizeof(FDagwoodManagedState) == 0x0003C0, "Wrong size on FDagwoodManagedState");
static_assert(offsetof(FDagwoodManagedState, Frame) == 0x000000, "Member 'FDagwoodManagedState::Frame' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, InputCmd) == 0x000004, "Member 'FDagwoodManagedState::InputCmd' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, GT_State) == 0x000020, "Member 'FDagwoodManagedState::GT_State' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, PT_State) == 0x000248, "Member 'FDagwoodManagedState::PT_State' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, PC) == 0x0003A0, "Member 'FDagwoodManagedState::PC' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, FutureInputs) == 0x0003B0, "Member 'FDagwoodManagedState::FutureInputs' has a wrong offset!");

// ScriptStruct ValetRuntime.VehicleAttachment
// 0x0018 (0x0018 - 0x0000)
struct FVehicleAttachment final
{
public:
	class FName                                   ModName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAttachment) == 0x000008, "Wrong alignment on FVehicleAttachment");
static_assert(sizeof(FVehicleAttachment) == 0x000018, "Wrong size on FVehicleAttachment");
static_assert(offsetof(FVehicleAttachment, ModName) == 0x000000, "Member 'FVehicleAttachment::ModName' has a wrong offset!");
static_assert(offsetof(FVehicleAttachment, SocketName) == 0x000008, "Member 'FVehicleAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FVehicleAttachment, SkeletalMesh) == 0x000010, "Member 'FVehicleAttachment::SkeletalMesh' has a wrong offset!");

// ScriptStruct ValetRuntime.MountedGun
// 0x0080 (0x0080 - 0x0000)
struct FMountedGun final
{
public:
	struct FWeaponSeatDefinition                  SeatDefinition;                                    // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              AnimInstanceWeapon;                                // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketNameMuzzle;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketNameWeaponPawnAttach;                        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketNameVehicle;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachmentAngleOffset;                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              AnimInstancePawn;                                  // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasApplied;                                       // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountedGun) == 0x000008, "Wrong alignment on FMountedGun");
static_assert(sizeof(FMountedGun) == 0x000080, "Wrong size on FMountedGun");
static_assert(offsetof(FMountedGun, SeatDefinition) == 0x000000, "Member 'FMountedGun::SeatDefinition' has a wrong offset!");
static_assert(offsetof(FMountedGun, SkeletalMesh) == 0x000040, "Member 'FMountedGun::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FMountedGun, AnimInstanceWeapon) == 0x000048, "Member 'FMountedGun::AnimInstanceWeapon' has a wrong offset!");
static_assert(offsetof(FMountedGun, SocketNameMuzzle) == 0x000050, "Member 'FMountedGun::SocketNameMuzzle' has a wrong offset!");
static_assert(offsetof(FMountedGun, SocketNameWeaponPawnAttach) == 0x000058, "Member 'FMountedGun::SocketNameWeaponPawnAttach' has a wrong offset!");
static_assert(offsetof(FMountedGun, SocketNameVehicle) == 0x000060, "Member 'FMountedGun::SocketNameVehicle' has a wrong offset!");
static_assert(offsetof(FMountedGun, AttachmentAngleOffset) == 0x000068, "Member 'FMountedGun::AttachmentAngleOffset' has a wrong offset!");
static_assert(offsetof(FMountedGun, AnimInstancePawn) == 0x000070, "Member 'FMountedGun::AnimInstancePawn' has a wrong offset!");
static_assert(offsetof(FMountedGun, bHasApplied) == 0x000078, "Member 'FMountedGun::bHasApplied' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodActionDefForUI
// 0x0010 (0x0010 - 0x0000)
struct FDagwoodActionDefForUI final
{
public:
	TArray<struct FActionDefForUI>                ActionDefForUI;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodActionDefForUI) == 0x000008, "Wrong alignment on FDagwoodActionDefForUI");
static_assert(sizeof(FDagwoodActionDefForUI) == 0x000010, "Wrong size on FDagwoodActionDefForUI");
static_assert(offsetof(FDagwoodActionDefForUI, ActionDefForUI) == 0x000000, "Member 'FDagwoodActionDefForUI::ActionDefForUI' has a wrong offset!");

// ScriptStruct ValetRuntime.AttachedWheel
// 0x0018 (0x0018 - 0x0000)
struct FAttachedWheel final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MatInstance;                                       // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHealth;                                     // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachedWheel) == 0x000008, "Wrong alignment on FAttachedWheel");
static_assert(sizeof(FAttachedWheel) == 0x000018, "Wrong size on FAttachedWheel");
static_assert(offsetof(FAttachedWheel, StaticMeshComponent) == 0x000000, "Member 'FAttachedWheel::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FAttachedWheel, MatInstance) == 0x000008, "Member 'FAttachedWheel::MatInstance' has a wrong offset!");
static_assert(offsetof(FAttachedWheel, CurrentHealth) == 0x000010, "Member 'FAttachedWheel::CurrentHealth' has a wrong offset!");

// ScriptStruct ValetRuntime.TireSimulationRuntimeData
// 0x001C (0x001C - 0x0000)
struct FTireSimulationRuntimeData final
{
public:
	struct FRuntimeTerrainHandlingInfo            HandlingInfo;                                      // 0x0000(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringLength;                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringStiff;                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringDamp;                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTireSimulationRuntimeData) == 0x000004, "Wrong alignment on FTireSimulationRuntimeData");
static_assert(sizeof(FTireSimulationRuntimeData) == 0x00001C, "Wrong size on FTireSimulationRuntimeData");
static_assert(offsetof(FTireSimulationRuntimeData, HandlingInfo) == 0x000000, "Member 'FTireSimulationRuntimeData::HandlingInfo' has a wrong offset!");
static_assert(offsetof(FTireSimulationRuntimeData, PoppedTireSpringLength) == 0x000010, "Member 'FTireSimulationRuntimeData::PoppedTireSpringLength' has a wrong offset!");
static_assert(offsetof(FTireSimulationRuntimeData, PoppedTireSpringStiff) == 0x000014, "Member 'FTireSimulationRuntimeData::PoppedTireSpringStiff' has a wrong offset!");
static_assert(offsetof(FTireSimulationRuntimeData, PoppedTireSpringDamp) == 0x000018, "Member 'FTireSimulationRuntimeData::PoppedTireSpringDamp' has a wrong offset!");

// ScriptStruct ValetRuntime.ValetUpdateContext
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FValetUpdateContext final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValetUpdateContext) == 0x000004, "Wrong alignment on FValetUpdateContext");
static_assert(sizeof(FValetUpdateContext) == 0x000014, "Wrong size on FValetUpdateContext");

}

