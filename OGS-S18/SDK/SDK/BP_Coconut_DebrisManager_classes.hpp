#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Coconut_DebrisManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Coconut_DebrisManager.BP_Coconut_DebrisManager_C
// 0x0100 (0x0320 - 0x0220)
class ABP_Coconut_DebrisManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         SpecialDebris;                                     // 0x0238(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    RandomDebris;                                      // 0x0248(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_Coconut_Floater_C*                  FloaterBP;                                         // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Bottom_Right;                                      // 0x0260(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Top_RIght;                                         // 0x026C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Screen_Position;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                World_Position;                                    // 0x0280(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerWorldRadiusSize;                             // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpawnRadius;                                    // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftSpawnBounds;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRadiusRatio;                                  // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Coconut_IdleGameplay_C*             IdleGameplayRef;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              WindDirection;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDebug;                                       // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Tier_Index;                                        // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZHeight;                                           // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         Tier_01_Debris_Actors;                             // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Tier_02_Debris_Actors;                             // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Tier_03_Debris_Actors;                             // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Tier_04_Debris_Actors;                             // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         Tier_05_Debris_Actors;                             // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         GenericDebrisActors;                               // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_Coconut_DebrisManager(int32 EntryPoint);
	void SpawnNonSpecialDebris();
	void SpawnAllDebrisInTier(class UClass* Class_0);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SpawnSpecialDebris(int32 TierIndex);
	void SetupSpawnLocations(struct FVector* SpawnLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Coconut_DebrisManager_C">();
	}
	static class ABP_Coconut_DebrisManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Coconut_DebrisManager_C>();
	}
};
static_assert(alignof(ABP_Coconut_DebrisManager_C) == 0x000008, "Wrong alignment on ABP_Coconut_DebrisManager_C");
static_assert(sizeof(ABP_Coconut_DebrisManager_C) == 0x000320, "Wrong size on ABP_Coconut_DebrisManager_C");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, UberGraphFrame) == 0x000220, "Member 'ABP_Coconut_DebrisManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Box) == 0x000228, "Member 'ABP_Coconut_DebrisManager_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_Coconut_DebrisManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, SpecialDebris) == 0x000238, "Member 'ABP_Coconut_DebrisManager_C::SpecialDebris' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, RandomDebris) == 0x000248, "Member 'ABP_Coconut_DebrisManager_C::RandomDebris' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, FloaterBP) == 0x000258, "Member 'ABP_Coconut_DebrisManager_C::FloaterBP' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Bottom_Right) == 0x000260, "Member 'ABP_Coconut_DebrisManager_C::Bottom_Right' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Top_RIght) == 0x00026C, "Member 'ABP_Coconut_DebrisManager_C::Top_RIght' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Screen_Position) == 0x000278, "Member 'ABP_Coconut_DebrisManager_C::Screen_Position' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, World_Position) == 0x000280, "Member 'ABP_Coconut_DebrisManager_C::World_Position' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, PlayerWorldRadiusSize) == 0x00028C, "Member 'ABP_Coconut_DebrisManager_C::PlayerWorldRadiusSize' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, MaxSpawnRadius) == 0x000290, "Member 'ABP_Coconut_DebrisManager_C::MaxSpawnRadius' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, LeftSpawnBounds) == 0x000294, "Member 'ABP_Coconut_DebrisManager_C::LeftSpawnBounds' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, SpawnRadiusRatio) == 0x000298, "Member 'ABP_Coconut_DebrisManager_C::SpawnRadiusRatio' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, IdleGameplayRef) == 0x0002A0, "Member 'ABP_Coconut_DebrisManager_C::IdleGameplayRef' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, WindDirection) == 0x0002A8, "Member 'ABP_Coconut_DebrisManager_C::WindDirection' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, EnableDebug) == 0x0002B0, "Member 'ABP_Coconut_DebrisManager_C::EnableDebug' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Tier_Index) == 0x0002B4, "Member 'ABP_Coconut_DebrisManager_C::Tier_Index' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, ZHeight) == 0x0002B8, "Member 'ABP_Coconut_DebrisManager_C::ZHeight' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Tier_01_Debris_Actors) == 0x0002C0, "Member 'ABP_Coconut_DebrisManager_C::Tier_01_Debris_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Tier_02_Debris_Actors) == 0x0002D0, "Member 'ABP_Coconut_DebrisManager_C::Tier_02_Debris_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Tier_03_Debris_Actors) == 0x0002E0, "Member 'ABP_Coconut_DebrisManager_C::Tier_03_Debris_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Tier_04_Debris_Actors) == 0x0002F0, "Member 'ABP_Coconut_DebrisManager_C::Tier_04_Debris_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, Tier_05_Debris_Actors) == 0x000300, "Member 'ABP_Coconut_DebrisManager_C::Tier_05_Debris_Actors' has a wrong offset!");
static_assert(offsetof(ABP_Coconut_DebrisManager_C, GenericDebrisActors) == 0x000310, "Member 'ABP_Coconut_DebrisManager_C::GenericDebrisActors' has a wrong offset!");

}

