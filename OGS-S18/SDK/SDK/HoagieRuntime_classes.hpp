#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HoagieRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "HoagieRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class HoagieRuntime.FortCameraMode_Hoagie
// 0x0040 (0x0E30 - 0x0DF0)
class UFortCameraMode_Hoagie final : public UFortCameraMode_AthenaVehicle
{
public:
	float                                         CurrentRollMultiplier;                             // 0x0DE8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentPitchMultiplier;                            // 0x0DEC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastOrigin;                                        // 0x0DF0(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentInterpSpeed;                                // 0x0DFC(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                BoostInterpSpeed;                                  // 0x0E08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseRollMultiplier;                                // 0x0E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BasePitchMultiplier;                               // 0x0E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRollMultiplier;                               // 0x0E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostPitchMultiplier;                              // 0x0E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRollDampFactor;                               // 0x0E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRollRecoveryDampFactor;                       // 0x0E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostRecoveryInterpSpeed;                          // 0x0E2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Hoagie">();
	}
	static class UFortCameraMode_Hoagie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Hoagie>();
	}
};
static_assert(alignof(UFortCameraMode_Hoagie) == 0x000010, "Wrong alignment on UFortCameraMode_Hoagie");
static_assert(sizeof(UFortCameraMode_Hoagie) == 0x000E30, "Wrong size on UFortCameraMode_Hoagie");
static_assert(offsetof(UFortCameraMode_Hoagie, CurrentRollMultiplier) == 0x000DE8, "Member 'UFortCameraMode_Hoagie::CurrentRollMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, CurrentPitchMultiplier) == 0x000DEC, "Member 'UFortCameraMode_Hoagie::CurrentPitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, LastOrigin) == 0x000DF0, "Member 'UFortCameraMode_Hoagie::LastOrigin' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, CurrentInterpSpeed) == 0x000DFC, "Member 'UFortCameraMode_Hoagie::CurrentInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostInterpSpeed) == 0x000E08, "Member 'UFortCameraMode_Hoagie::BoostInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BaseRollMultiplier) == 0x000E14, "Member 'UFortCameraMode_Hoagie::BaseRollMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BasePitchMultiplier) == 0x000E18, "Member 'UFortCameraMode_Hoagie::BasePitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRollMultiplier) == 0x000E1C, "Member 'UFortCameraMode_Hoagie::BoostRollMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostPitchMultiplier) == 0x000E20, "Member 'UFortCameraMode_Hoagie::BoostPitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRollDampFactor) == 0x000E24, "Member 'UFortCameraMode_Hoagie::BoostRollDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRollRecoveryDampFactor) == 0x000E28, "Member 'UFortCameraMode_Hoagie::BoostRollRecoveryDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Hoagie, BoostRecoveryInterpSpeed) == 0x000E2C, "Member 'UFortCameraMode_Hoagie::BoostRecoveryInterpSpeed' has a wrong offset!");

// Class HoagieRuntime.FortHoagieVehicleConfigs
// 0x0208 (0x0750 - 0x0548)
class UFortHoagieVehicleConfigs final : public UFortPhysicsVehicleConfigs
{
public:
	float                                         StrafeForce;                                       // 0x0548(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeForceMin;                                    // 0x054C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStrafeSpeedKmh;                                 // 0x0550(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeTooFastBrakeForce;                           // 0x0554(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandedBrakeForce;                                  // 0x0558(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftForce;                                         // 0x055C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLiftSpeedKmh;                                   // 0x0560(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftTooFastBrakeForce;                             // 0x0564(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralDragCoefficient;                            // 0x0568(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralDragCoefficient2;                           // 0x056C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftDragCoefficient;                               // 0x0570(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftDragCoefficient2;                              // 0x0574(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchForCameraYaw;                              // 0x0578(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCameraYawAngle;                                 // 0x057C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYawStiff;                                    // 0x0580(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYawDamp;                                     // 0x0584(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYawStrength;                                 // 0x0588(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightStiff;                                      // 0x058C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UprightDamp;                                       // 0x0590(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVehiclePivotForCameraPitch;                    // 0x0594(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_595[0x3];                                      // 0x0595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrustTorqueAnglePercent;                          // 0x0598(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostThrustTorqueAnglePercent;                     // 0x059C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorqueStiff;                                 // 0x05A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorqueDamp;                                  // 0x05A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorqueMaxAccel;                              // 0x05A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustTorque;                                      // 0x05AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawTorque;                                         // 0x05B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawTorqueDampingSpeed;                             // 0x05B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostForce;                                        // 0x05B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMaxSpeedKmh;                                  // 0x05BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostDuration;                                     // 0x05C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostCooldown;                                     // 0x05C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTorqueStiff;                                  // 0x05C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTorqueDamp;                                   // 0x05CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterBoostBrakingForce;                            // 0x05D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterBoostBrakingDuration;                         // 0x05D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterBoostBrakingMinSpeed;                         // 0x05D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleRequiredForFullThrust;                   // 0x05DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToGroundForLanding;                        // 0x05E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupDelay;                                      // 0x05E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingSequenceDelay;                              // 0x05E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorsRadius;                                      // 0x05EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorsRadiusInner;                                 // 0x05F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoDriverBrakeForce;                                // 0x05F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenRotorDamageTicks;                       // 0x05F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLandingForce;                                  // 0x05FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorDamageBoxSweepLength;                         // 0x0600(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalStateLiftForce;                            // 0x0604(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleRotationMultiplier;                            // 0x0608(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftPitchDegrees;                                  // 0x060C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAltitudeForIdleNoise;                           // 0x0610(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultLinearDamp;                                 // 0x0614(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAngularDamp;                                // 0x0618(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingLinearDamp;                                 // 0x061C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingAngularDamp;                                // 0x0620(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingLiftAlpha;                                  // 0x0624(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalStateThrustMultiplier;                     // 0x0628(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyUpDotThresholdForLanding;                      // 0x062C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHealthThreshold;                           // 0x0630(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagePerImpulseWhileCritical;                     // 0x0634(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorImpulseLinear;                                // 0x0638(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorImpulseAngular;                               // 0x063C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorImpulseCooldown;                              // 0x0640(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupLift;                                       // 0x0644(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupLiftTime;                                   // 0x0648(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAltitude;                                       // 0x064C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AltitudeForSpinning;                               // 0x0650(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorMaxSpeed;                                     // 0x0654(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorAccel;                                        // 0x0658(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorDecel;                                        // 0x065C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotorSpeedForSkippingStartup;                   // 0x0660(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorSpeedForStartupLift;                          // 0x0664(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalLiftForceDecay;                            // 0x0668(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalYawTorqueMin;                              // 0x066C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalYawTorqueMax;                              // 0x0670(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalYawTorqueRampDuration;                     // 0x0674(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorTraceRotationSpeed;                           // 0x0678(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorTraceBoxSize;                                 // 0x067C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorTraceBoxHeight;                               // 0x0680(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCriticalFallForce;                              // 0x0684(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostFOV;                                          // 0x0688(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GentleCrashTimeToExplode;                          // 0x068C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalTimeForGentleCrash;                        // 0x0690(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoLandingYawTorque;                              // 0x0694(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeightForAutoLandingYawTorque;                  // 0x0698(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForScrapingBottom;                         // 0x069C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalHealth;                                    // 0x06A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDamageHeightBuffer;                            // 0x06A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenRotorPlayerDamage;                      // 0x06A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorMoveSpeedRequiredToUpdateTraceDirSqr;         // 0x06AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageTraceRate;                                  // 0x06B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotorWashTicksPerFrame;                            // 0x06B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalHitRadius;                                 // 0x06B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleNormalUpForLockMovement;                      // 0x06BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAutoLandingTime;                                // 0x06C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedThresholdForCrashed;                          // 0x06C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CritMultiplier;                                    // 0x06C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AltitudeForSprings;                                // 0x06CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingTime;                                   // 0x06D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingScrapingTime;                           // 0x06D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCrashingTimeSpentNotMoving;                     // 0x06D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandscapeRotorImpulseMag;                          // 0x06DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthThresholdForLandscapeRotorImpulse;           // 0x06E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeightBuffer;                                   // 0x06E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseOnOuterRotorHitLandscape;                  // 0x06E8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRotorImpulses;                                // 0x06E9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCVarScaling;                                // 0x06EA(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6EB[0x1];                                      // 0x06EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CVarScalingInterp;                                 // 0x06EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FoliageTraceBoxSize;                               // 0x06F0(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterBoxSize;                                      // 0x06FC(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterBoxOffset;                                    // 0x0708(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotorOffsetFromActorLocationOnServer;              // 0x0714(0x000C)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipContactRotations;                             // 0x0720(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxAutoLandHeightWhenOutOfFuel;                    // 0x0728(0x0028)(Edit, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieVehicleConfigs">();
	}
	static class UFortHoagieVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHoagieVehicleConfigs>();
	}
};
static_assert(alignof(UFortHoagieVehicleConfigs) == 0x000008, "Wrong alignment on UFortHoagieVehicleConfigs");
static_assert(sizeof(UFortHoagieVehicleConfigs) == 0x000750, "Wrong size on UFortHoagieVehicleConfigs");
static_assert(offsetof(UFortHoagieVehicleConfigs, StrafeForce) == 0x000548, "Member 'UFortHoagieVehicleConfigs::StrafeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StrafeForceMin) == 0x00054C, "Member 'UFortHoagieVehicleConfigs::StrafeForceMin' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxStrafeSpeedKmh) == 0x000550, "Member 'UFortHoagieVehicleConfigs::MaxStrafeSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StrafeTooFastBrakeForce) == 0x000554, "Member 'UFortHoagieVehicleConfigs::StrafeTooFastBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandedBrakeForce) == 0x000558, "Member 'UFortHoagieVehicleConfigs::LandedBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftForce) == 0x00055C, "Member 'UFortHoagieVehicleConfigs::LiftForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxLiftSpeedKmh) == 0x000560, "Member 'UFortHoagieVehicleConfigs::MaxLiftSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftTooFastBrakeForce) == 0x000564, "Member 'UFortHoagieVehicleConfigs::LiftTooFastBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LateralDragCoefficient) == 0x000568, "Member 'UFortHoagieVehicleConfigs::LateralDragCoefficient' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LateralDragCoefficient2) == 0x00056C, "Member 'UFortHoagieVehicleConfigs::LateralDragCoefficient2' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftDragCoefficient) == 0x000570, "Member 'UFortHoagieVehicleConfigs::LiftDragCoefficient' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftDragCoefficient2) == 0x000574, "Member 'UFortHoagieVehicleConfigs::LiftDragCoefficient2' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxPitchForCameraYaw) == 0x000578, "Member 'UFortHoagieVehicleConfigs::MaxPitchForCameraYaw' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCameraYawAngle) == 0x00057C, "Member 'UFortHoagieVehicleConfigs::MaxCameraYawAngle' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CameraYawStiff) == 0x000580, "Member 'UFortHoagieVehicleConfigs::CameraYawStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CameraYawDamp) == 0x000584, "Member 'UFortHoagieVehicleConfigs::CameraYawDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CameraYawStrength) == 0x000588, "Member 'UFortHoagieVehicleConfigs::CameraYawStrength' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, UprightStiff) == 0x00058C, "Member 'UFortHoagieVehicleConfigs::UprightStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, UprightDamp) == 0x000590, "Member 'UFortHoagieVehicleConfigs::UprightDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bUseVehiclePivotForCameraPitch) == 0x000594, "Member 'UFortHoagieVehicleConfigs::bUseVehiclePivotForCameraPitch' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueAnglePercent) == 0x000598, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueAnglePercent' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostThrustTorqueAnglePercent) == 0x00059C, "Member 'UFortHoagieVehicleConfigs::BoostThrustTorqueAnglePercent' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueStiff) == 0x0005A0, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueDamp) == 0x0005A4, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorqueMaxAccel) == 0x0005A8, "Member 'UFortHoagieVehicleConfigs::ThrustTorqueMaxAccel' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, ThrustTorque) == 0x0005AC, "Member 'UFortHoagieVehicleConfigs::ThrustTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, YawTorque) == 0x0005B0, "Member 'UFortHoagieVehicleConfigs::YawTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, YawTorqueDampingSpeed) == 0x0005B4, "Member 'UFortHoagieVehicleConfigs::YawTorqueDampingSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostForce) == 0x0005B8, "Member 'UFortHoagieVehicleConfigs::BoostForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostMaxSpeedKmh) == 0x0005BC, "Member 'UFortHoagieVehicleConfigs::BoostMaxSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostDuration) == 0x0005C0, "Member 'UFortHoagieVehicleConfigs::BoostDuration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostCooldown) == 0x0005C4, "Member 'UFortHoagieVehicleConfigs::BoostCooldown' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostTorqueStiff) == 0x0005C8, "Member 'UFortHoagieVehicleConfigs::BoostTorqueStiff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostTorqueDamp) == 0x0005CC, "Member 'UFortHoagieVehicleConfigs::BoostTorqueDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AfterBoostBrakingForce) == 0x0005D0, "Member 'UFortHoagieVehicleConfigs::AfterBoostBrakingForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AfterBoostBrakingDuration) == 0x0005D4, "Member 'UFortHoagieVehicleConfigs::AfterBoostBrakingDuration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AfterBoostBrakingMinSpeed) == 0x0005D8, "Member 'UFortHoagieVehicleConfigs::AfterBoostBrakingMinSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, PitchAngleRequiredForFullThrust) == 0x0005DC, "Member 'UFortHoagieVehicleConfigs::PitchAngleRequiredForFullThrust' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DistanceToGroundForLanding) == 0x0005E0, "Member 'UFortHoagieVehicleConfigs::DistanceToGroundForLanding' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StartupDelay) == 0x0005E4, "Member 'UFortHoagieVehicleConfigs::StartupDelay' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingSequenceDelay) == 0x0005E8, "Member 'UFortHoagieVehicleConfigs::LandingSequenceDelay' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorsRadius) == 0x0005EC, "Member 'UFortHoagieVehicleConfigs::RotorsRadius' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorsRadiusInner) == 0x0005F0, "Member 'UFortHoagieVehicleConfigs::RotorsRadiusInner' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, NoDriverBrakeForce) == 0x0005F4, "Member 'UFortHoagieVehicleConfigs::NoDriverBrakeForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, TimeBetweenRotorDamageTicks) == 0x0005F8, "Member 'UFortHoagieVehicleConfigs::TimeBetweenRotorDamageTicks' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AutoLandingForce) == 0x0005FC, "Member 'UFortHoagieVehicleConfigs::AutoLandingForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorDamageBoxSweepLength) == 0x000600, "Member 'UFortHoagieVehicleConfigs::RotorDamageBoxSweepLength' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalStateLiftForce) == 0x000604, "Member 'UFortHoagieVehicleConfigs::CriticalStateLiftForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, IdleRotationMultiplier) == 0x000608, "Member 'UFortHoagieVehicleConfigs::IdleRotationMultiplier' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LiftPitchDegrees) == 0x00060C, "Member 'UFortHoagieVehicleConfigs::LiftPitchDegrees' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinAltitudeForIdleNoise) == 0x000610, "Member 'UFortHoagieVehicleConfigs::MinAltitudeForIdleNoise' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DefaultLinearDamp) == 0x000614, "Member 'UFortHoagieVehicleConfigs::DefaultLinearDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DefaultAngularDamp) == 0x000618, "Member 'UFortHoagieVehicleConfigs::DefaultAngularDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingLinearDamp) == 0x00061C, "Member 'UFortHoagieVehicleConfigs::LandingLinearDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingAngularDamp) == 0x000620, "Member 'UFortHoagieVehicleConfigs::LandingAngularDamp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandingLiftAlpha) == 0x000624, "Member 'UFortHoagieVehicleConfigs::LandingLiftAlpha' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalStateThrustMultiplier) == 0x000628, "Member 'UFortHoagieVehicleConfigs::CriticalStateThrustMultiplier' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BodyUpDotThresholdForLanding) == 0x00062C, "Member 'UFortHoagieVehicleConfigs::BodyUpDotThresholdForLanding' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalHealthThreshold) == 0x000630, "Member 'UFortHoagieVehicleConfigs::CriticalHealthThreshold' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, DamagePerImpulseWhileCritical) == 0x000634, "Member 'UFortHoagieVehicleConfigs::DamagePerImpulseWhileCritical' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorImpulseLinear) == 0x000638, "Member 'UFortHoagieVehicleConfigs::RotorImpulseLinear' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorImpulseAngular) == 0x00063C, "Member 'UFortHoagieVehicleConfigs::RotorImpulseAngular' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorImpulseCooldown) == 0x000640, "Member 'UFortHoagieVehicleConfigs::RotorImpulseCooldown' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StartupLift) == 0x000644, "Member 'UFortHoagieVehicleConfigs::StartupLift' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, StartupLiftTime) == 0x000648, "Member 'UFortHoagieVehicleConfigs::StartupLiftTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxAltitude) == 0x00064C, "Member 'UFortHoagieVehicleConfigs::MaxAltitude' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AltitudeForSpinning) == 0x000650, "Member 'UFortHoagieVehicleConfigs::AltitudeForSpinning' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorMaxSpeed) == 0x000654, "Member 'UFortHoagieVehicleConfigs::RotorMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorAccel) == 0x000658, "Member 'UFortHoagieVehicleConfigs::RotorAccel' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorDecel) == 0x00065C, "Member 'UFortHoagieVehicleConfigs::RotorDecel' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinRotorSpeedForSkippingStartup) == 0x000660, "Member 'UFortHoagieVehicleConfigs::MinRotorSpeedForSkippingStartup' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorSpeedForStartupLift) == 0x000664, "Member 'UFortHoagieVehicleConfigs::RotorSpeedForStartupLift' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalLiftForceDecay) == 0x000668, "Member 'UFortHoagieVehicleConfigs::CriticalLiftForceDecay' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalYawTorqueMin) == 0x00066C, "Member 'UFortHoagieVehicleConfigs::CriticalYawTorqueMin' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalYawTorqueMax) == 0x000670, "Member 'UFortHoagieVehicleConfigs::CriticalYawTorqueMax' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalYawTorqueRampDuration) == 0x000674, "Member 'UFortHoagieVehicleConfigs::CriticalYawTorqueRampDuration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorTraceRotationSpeed) == 0x000678, "Member 'UFortHoagieVehicleConfigs::RotorTraceRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorTraceBoxSize) == 0x00067C, "Member 'UFortHoagieVehicleConfigs::RotorTraceBoxSize' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorTraceBoxHeight) == 0x000680, "Member 'UFortHoagieVehicleConfigs::RotorTraceBoxHeight' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCriticalFallForce) == 0x000684, "Member 'UFortHoagieVehicleConfigs::MaxCriticalFallForce' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, BoostFOV) == 0x000688, "Member 'UFortHoagieVehicleConfigs::BoostFOV' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, GentleCrashTimeToExplode) == 0x00068C, "Member 'UFortHoagieVehicleConfigs::GentleCrashTimeToExplode' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalTimeForGentleCrash) == 0x000690, "Member 'UFortHoagieVehicleConfigs::CriticalTimeForGentleCrash' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AutoLandingYawTorque) == 0x000694, "Member 'UFortHoagieVehicleConfigs::AutoLandingYawTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinHeightForAutoLandingYawTorque) == 0x000698, "Member 'UFortHoagieVehicleConfigs::MinHeightForAutoLandingYawTorque' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MinSpeedForScrapingBottom) == 0x00069C, "Member 'UFortHoagieVehicleConfigs::MinSpeedForScrapingBottom' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalHealth) == 0x0006A0, "Member 'UFortHoagieVehicleConfigs::CriticalHealth' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, FallDamageHeightBuffer) == 0x0006A4, "Member 'UFortHoagieVehicleConfigs::FallDamageHeightBuffer' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, TimeBetweenRotorPlayerDamage) == 0x0006A8, "Member 'UFortHoagieVehicleConfigs::TimeBetweenRotorPlayerDamage' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorMoveSpeedRequiredToUpdateTraceDirSqr) == 0x0006AC, "Member 'UFortHoagieVehicleConfigs::RotorMoveSpeedRequiredToUpdateTraceDirSqr' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, FoliageTraceRate) == 0x0006B0, "Member 'UFortHoagieVehicleConfigs::FoliageTraceRate' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorWashTicksPerFrame) == 0x0006B4, "Member 'UFortHoagieVehicleConfigs::RotorWashTicksPerFrame' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CriticalHitRadius) == 0x0006B8, "Member 'UFortHoagieVehicleConfigs::CriticalHitRadius' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AngleNormalUpForLockMovement) == 0x0006BC, "Member 'UFortHoagieVehicleConfigs::AngleNormalUpForLockMovement' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxAutoLandingTime) == 0x0006C0, "Member 'UFortHoagieVehicleConfigs::MaxAutoLandingTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, SpeedThresholdForCrashed) == 0x0006C4, "Member 'UFortHoagieVehicleConfigs::SpeedThresholdForCrashed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CritMultiplier) == 0x0006C8, "Member 'UFortHoagieVehicleConfigs::CritMultiplier' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, AltitudeForSprings) == 0x0006CC, "Member 'UFortHoagieVehicleConfigs::AltitudeForSprings' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCrashingTime) == 0x0006D0, "Member 'UFortHoagieVehicleConfigs::MaxCrashingTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCrashingScrapingTime) == 0x0006D4, "Member 'UFortHoagieVehicleConfigs::MaxCrashingScrapingTime' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxCrashingTimeSpentNotMoving) == 0x0006D8, "Member 'UFortHoagieVehicleConfigs::MaxCrashingTimeSpentNotMoving' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, LandscapeRotorImpulseMag) == 0x0006DC, "Member 'UFortHoagieVehicleConfigs::LandscapeRotorImpulseMag' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, HealthThresholdForLandscapeRotorImpulse) == 0x0006E0, "Member 'UFortHoagieVehicleConfigs::HealthThresholdForLandscapeRotorImpulse' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxHeightBuffer) == 0x0006E4, "Member 'UFortHoagieVehicleConfigs::MaxHeightBuffer' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bImpulseOnOuterRotorHitLandscape) == 0x0006E8, "Member 'UFortHoagieVehicleConfigs::bImpulseOnOuterRotorHitLandscape' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bSkipRotorImpulses) == 0x0006E9, "Member 'UFortHoagieVehicleConfigs::bSkipRotorImpulses' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bEnableCVarScaling) == 0x0006EA, "Member 'UFortHoagieVehicleConfigs::bEnableCVarScaling' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, CVarScalingInterp) == 0x0006EC, "Member 'UFortHoagieVehicleConfigs::CVarScalingInterp' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, FoliageTraceBoxSize) == 0x0006F0, "Member 'UFortHoagieVehicleConfigs::FoliageTraceBoxSize' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, WaterBoxSize) == 0x0006FC, "Member 'UFortHoagieVehicleConfigs::WaterBoxSize' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, WaterBoxOffset) == 0x000708, "Member 'UFortHoagieVehicleConfigs::WaterBoxOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, RotorOffsetFromActorLocationOnServer) == 0x000714, "Member 'UFortHoagieVehicleConfigs::RotorOffsetFromActorLocationOnServer' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, bSkipContactRotations) == 0x000720, "Member 'UFortHoagieVehicleConfigs::bSkipContactRotations' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleConfigs, MaxAutoLandHeightWhenOutOfFuel) == 0x000728, "Member 'UFortHoagieVehicleConfigs::MaxAutoLandHeightWhenOutOfFuel' has a wrong offset!");

// Class HoagieRuntime.FortHoagieAudioController
// 0x0050 (0x0270 - 0x0220)
class AFortHoagieAudioController final : public AActor
{
public:
	bool                                          bHighQualityOverride;                              // 0x0220(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLocalPlayerInHoagie;                              // 0x0221(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCriticalDamageNative;                             // 0x0222(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRotorHitNative;                                   // 0x0223(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsRotorWashActiveNative;                          // 0x0224(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotorWashRelativeZOffset;                          // 0x0228(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortHoagieVehicle>      Vehicle;                                           // 0x022C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLayeredAudioComponent*             EngineAudio;                                       // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLayeredAudioComponent*             RotorAudio;                                        // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x28];                                     // 0x0248(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheAudioComponents(class UFortLayeredAudioComponent* InEngine, class UFortLayeredAudioComponent* InRotor);
	void CacheHoagieVehicle(class AFortHoagieVehicle* InVehicle);
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieAudioController">();
	}
	static class AFortHoagieAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortHoagieAudioController>();
	}
};
static_assert(alignof(AFortHoagieAudioController) == 0x000008, "Wrong alignment on AFortHoagieAudioController");
static_assert(sizeof(AFortHoagieAudioController) == 0x000270, "Wrong size on AFortHoagieAudioController");
static_assert(offsetof(AFortHoagieAudioController, bHighQualityOverride) == 0x000220, "Member 'AFortHoagieAudioController::bHighQualityOverride' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bLocalPlayerInHoagie) == 0x000221, "Member 'AFortHoagieAudioController::bLocalPlayerInHoagie' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bCriticalDamageNative) == 0x000222, "Member 'AFortHoagieAudioController::bCriticalDamageNative' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bRotorHitNative) == 0x000223, "Member 'AFortHoagieAudioController::bRotorHitNative' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, bIsRotorWashActiveNative) == 0x000224, "Member 'AFortHoagieAudioController::bIsRotorWashActiveNative' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, RotorWashRelativeZOffset) == 0x000228, "Member 'AFortHoagieAudioController::RotorWashRelativeZOffset' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, Vehicle) == 0x00022C, "Member 'AFortHoagieAudioController::Vehicle' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, EngineAudio) == 0x000238, "Member 'AFortHoagieAudioController::EngineAudio' has a wrong offset!");
static_assert(offsetof(AFortHoagieAudioController, RotorAudio) == 0x000240, "Member 'AFortHoagieAudioController::RotorAudio' has a wrong offset!");

// Class HoagieRuntime.FortHoagieDriverAnimInstance
// 0x0050 (0x06C0 - 0x0670)
class UFortHoagieDriverAnimInstance final : public UFortVehicleOccupantAnimInstance
{
public:
	struct FVector                                LeftHandIKPositionOffset;                          // 0x0668(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandIKPositionOffset;                         // 0x0674(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LeftHandIKRotationOffset;                          // 0x0680(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RightHandIKRotationOffset;                         // 0x068C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        BoostCardinalDirection;                            // 0x0698(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_699[0x3];                                      // 0x0699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NormalizedAcceleration;                            // 0x069C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleRoll;                                       // 0x06A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleYaw;                                        // 0x06A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeed;                                      // 0x06A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingAnyDirection;                             // 0x06AC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingFastAnyDirection;                         // 0x06AD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReverse;                                    // 0x06AE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldGoBackToIdle;                               // 0x06AF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Default_ReverseStart;                  // 0x06B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_BoostLoop_Reverse;                     // 0x06B1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B2[0xE];                                      // 0x06B2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieDriverAnimInstance">();
	}
	static class UFortHoagieDriverAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHoagieDriverAnimInstance>();
	}
};
static_assert(alignof(UFortHoagieDriverAnimInstance) == 0x000010, "Wrong alignment on UFortHoagieDriverAnimInstance");
static_assert(sizeof(UFortHoagieDriverAnimInstance) == 0x0006C0, "Wrong size on UFortHoagieDriverAnimInstance");
static_assert(offsetof(UFortHoagieDriverAnimInstance, LeftHandIKPositionOffset) == 0x000668, "Member 'UFortHoagieDriverAnimInstance::LeftHandIKPositionOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, RightHandIKPositionOffset) == 0x000674, "Member 'UFortHoagieDriverAnimInstance::RightHandIKPositionOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, LeftHandIKRotationOffset) == 0x000680, "Member 'UFortHoagieDriverAnimInstance::LeftHandIKRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, RightHandIKRotationOffset) == 0x00068C, "Member 'UFortHoagieDriverAnimInstance::RightHandIKRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, BoostCardinalDirection) == 0x000698, "Member 'UFortHoagieDriverAnimInstance::BoostCardinalDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, NormalizedAcceleration) == 0x00069C, "Member 'UFortHoagieDriverAnimInstance::NormalizedAcceleration' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, VehicleRoll) == 0x0006A0, "Member 'UFortHoagieDriverAnimInstance::VehicleRoll' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, VehicleYaw) == 0x0006A4, "Member 'UFortHoagieDriverAnimInstance::VehicleYaw' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, ForwardSpeed) == 0x0006A8, "Member 'UFortHoagieDriverAnimInstance::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bIsMovingAnyDirection) == 0x0006AC, "Member 'UFortHoagieDriverAnimInstance::bIsMovingAnyDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bIsMovingFastAnyDirection) == 0x0006AD, "Member 'UFortHoagieDriverAnimInstance::bIsMovingFastAnyDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bShouldReverse) == 0x0006AE, "Member 'UFortHoagieDriverAnimInstance::bShouldReverse' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bShouldGoBackToIdle) == 0x0006AF, "Member 'UFortHoagieDriverAnimInstance::bShouldGoBackToIdle' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bTransition_Default_ReverseStart) == 0x0006B0, "Member 'UFortHoagieDriverAnimInstance::bTransition_Default_ReverseStart' has a wrong offset!");
static_assert(offsetof(UFortHoagieDriverAnimInstance, bTransition_BoostLoop_Reverse) == 0x0006B1, "Member 'UFortHoagieDriverAnimInstance::bTransition_BoostLoop_Reverse' has a wrong offset!");

// Class HoagieRuntime.FortHoagieVehicle
// 0x0390 (0x19D0 - 0x1640)
class AFortHoagieVehicle final : public AFortAthenaSKVehicle
{
public:
	class FName                                   PassengerCollision;                                // 0x1638(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraBoomDistance;                                // 0x1640(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraBoomHeight;                                  // 0x1644(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EHoagieBoostState State)> OnBoostStateChanged;                               // 0x1648(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAltimeterTraceUpdated;                           // 0x1658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCrashingStateEntered;                            // 0x1668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEngineAudioDisabled;                              // 0x1678(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1679[0x3];                                     // 0x1679(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiftRumbleTimer;                                   // 0x167C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLiftUp;                                           // 0x1680(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1681[0x7];                                     // 0x1681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        LiftForceFeedbackHandle;                           // 0x1688(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        PassiveForceFeedbackHandle;                        // 0x1690(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Theta_Native;                                      // 0x1698(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WashAltAlpha_Native;                               // 0x169C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotorWashTickTimer;                                // 0x16A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A4[0x4];                                     // 0x16A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        RotorTraceArray;                                   // 0x16A8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      RotorWashObjectsTypes;                             // 0x16B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UFortHoagieVehicleConfigs*              FortHoagieVehicleConfigs;                          // 0x16C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RumbleIntensity;                                   // 0x16D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortHeliFlightModel                   FlightModel;                                       // 0x16D8(0x0110)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bClearPitchInput;                                  // 0x17E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoosting;                                         // 0x17E9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17EA[0x2];                                     // 0x17EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostTimeLeft;                                     // 0x17EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostBrakingTimeLeft;                              // 0x17F0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostCooldown;                                     // 0x17F4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShutdownTimer;                                     // 0x17F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FoliageDestructionTimer;                           // 0x17FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrashingScrapingTimer;                             // 0x1800(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrashingNotMovingTimer;                            // 0x1804(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanSleep;                                         // 0x1808(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasAppliedCrashDamage;                            // 0x1809(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOrientedForLanding;                               // 0x180A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceNegativeLift;                                // 0x180B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExploded;                                         // 0x180C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180D[0x3];                                     // 0x180D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AltimeterTraceTimer;                               // 0x1810(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastRotorImpulseTime;                              // 0x1814(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CriticalExplodeTimer;                              // 0x1818(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeWhileCritical;                                 // 0x181C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeWhileLanding;                                  // 0x1820(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LiftFromOverrideButton;                            // 0x1824(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                BoostDirection;                                    // 0x1828(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastRotorSweepDirection;                           // 0x1834(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             AltimeterTraceResult;                              // 0x1840(0x0088)(Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         HoagieStateRep;                                    // 0x18C8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHoagieState                                  CurrentHoagieState;                                // 0x18CC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentRotorSpeed;                                 // 0x18D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentRotorAngle;                                 // 0x18D4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotorImpactTraceAngle;                             // 0x18D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVehicleGamepadLiftInputs              LiftInputs;                                        // 0x18DC(0x0008)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         ServerCriticalHealth;                              // 0x18E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FRotorHit>                      RotorHits;                                         // 0x18E8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCachedSeatCollision>           CachedSeatCollision;                               // 0x18F8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FVector                                RotorHitLinearImpulse;                             // 0x1908(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RotorHitAngularImpulse;                            // 0x1914(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      HoagieIdleFX_Native;                               // 0x1920(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      DamageFX_Native;                                   // 0x1928(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      RotorWashFX_Native;                                // 0x1930(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHoagieVehicleAnimInstance*         HoagieAnimBP_Native;                               // 0x1938(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortHoagieVehicleConfigs>  FortHoagieVehicleConfigsClass;                     // 0x1940(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortHoagieVehicleConfigs>  FortHoagieVehicleSyncConfigsClass;                 // 0x1948(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AltimeterTraceSocketName;                          // 0x1950(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RotorDamageTraceSocketName;                        // 0x1958(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MainRotorCritSocketName;                           // 0x1960(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TailRotorCritSocketName;                           // 0x1968(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           SeatTransition_ToDriver;                           // 0x1970(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           SeatTransition_ToPassenger;                        // 0x1978(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RotorTraceProfile;                                 // 0x1980(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   FoliageOverlapsBoxTag;                             // 0x1988(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AController>             KillerController;                                  // 0x1990(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  KillerCauser;                                      // 0x1998(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FReplicatedHeliControlState            ControlState;                                      // 0x19A0(0x0018)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         CurrentViewDistanceScale;                          // 0x19B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentHLODDistanceOverrideScale;                  // 0x19BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentHLODMaxDrawDistanceScale;                   // 0x19C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C4[0xC];                                     // 0x19C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MulticastRotorImpulse(const struct FHitResult& RotorHit);
	void OnBoostFailed();
	void OnBoostFinished();
	void OnBoostReady();
	void OnBoostStarted();
	void OnCritRotor(float Damage, const struct FVector& ImpactLocation, class AController* DamageInstigator, class AActor* DamageCauser, bool bMainRotor);
	void OnExplode();
	void OnImpactOtherHoagie(const struct FVector& HitLocation, const struct FVector& NormalImpulse);
	void OnImpactWhileCritical();
	void OnRefueledFromEmpty();
	void OnRep_ControlState();
	void OnRep_HoagieState();
	void OnRotorDamageDealt(const struct FHitResult& Impact, bool bInner);
	void OnRotorDamageDealtInner(const struct FHitResult& Impact);
	void OnRotorDamageDealtOuter(const struct FHitResult& Impact);
	void OnRotorDamagePlayer(const struct FHitResult& Impact);
	void OnRotorsStop();
	void OnStartCriticalHealth();
	void OnStartupBegin();
	void OnStartupEnd();
	void OnTickRotors(float RotorAngleDegrees);
	void ServerUpdateControlState(const struct FReplicatedHeliControlState& InControlState);
	void SetMainRotorRotation(float Degrees);
	void SetRotorWashActive(bool bActive);
	void SetTailRotorRotation(float Degrees);
	void ShowCooldownCue(class AFortPlayerPawn* Pawn, float Duration);
	void UpdateDamageStateNative(float Damage);
	void UpdateHoagieAnimBP();

	float GetAltitude() const;
	float GetBoostCooldown() const;
	struct FVector GetBoostDirection() const;
	float GetBoostDuration() const;
	float GetBoostTimeLeft() const;
	float GetDistanceToGround() const;
	float GetForwardAlpha() const;
	bool GetIsCriticalHealth() const;
	bool GetIsEngineOn() const;
	class AController* GetKillerController() const;
	float GetLiftAlpha() const;
	float GetMaxAltitude() const;
	float GetMaxBoostCooldown() const;
	float GetRotorAngleDegrees() const;
	struct FVector GetRotorCenterPosition() const;
	float GetRotorSpeed() const;
	float GetRotorSpeedPercent() const;
	float GetShutdownTimeLeft() const;
	float GetSteerAlpha() const;
	float GetStrafeAlpha() const;
	struct FVector GetThrustDirection(bool bWorldSpace) const;
	float GetVerticalSpeedKmh() const;
	bool IsScrapingBottom() const;
	bool IsShuttingDown() const;
	bool IsStartingUp() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieVehicle">();
	}
	static class AFortHoagieVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortHoagieVehicle>();
	}
};
static_assert(alignof(AFortHoagieVehicle) == 0x000010, "Wrong alignment on AFortHoagieVehicle");
static_assert(sizeof(AFortHoagieVehicle) == 0x0019D0, "Wrong size on AFortHoagieVehicle");
static_assert(offsetof(AFortHoagieVehicle, PassengerCollision) == 0x001638, "Member 'AFortHoagieVehicle::PassengerCollision' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CameraBoomDistance) == 0x001640, "Member 'AFortHoagieVehicle::CameraBoomDistance' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CameraBoomHeight) == 0x001644, "Member 'AFortHoagieVehicle::CameraBoomHeight' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, OnBoostStateChanged) == 0x001648, "Member 'AFortHoagieVehicle::OnBoostStateChanged' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, OnAltimeterTraceUpdated) == 0x001658, "Member 'AFortHoagieVehicle::OnAltimeterTraceUpdated' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, OnCrashingStateEntered) == 0x001668, "Member 'AFortHoagieVehicle::OnCrashingStateEntered' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bEngineAudioDisabled) == 0x001678, "Member 'AFortHoagieVehicle::bEngineAudioDisabled' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftRumbleTimer) == 0x00167C, "Member 'AFortHoagieVehicle::LiftRumbleTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bLiftUp) == 0x001680, "Member 'AFortHoagieVehicle::bLiftUp' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftForceFeedbackHandle) == 0x001688, "Member 'AFortHoagieVehicle::LiftForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, PassiveForceFeedbackHandle) == 0x001690, "Member 'AFortHoagieVehicle::PassiveForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, Theta_Native) == 0x001698, "Member 'AFortHoagieVehicle::Theta_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, WashAltAlpha_Native) == 0x00169C, "Member 'AFortHoagieVehicle::WashAltAlpha_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorWashTickTimer) == 0x0016A0, "Member 'AFortHoagieVehicle::RotorWashTickTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorTraceArray) == 0x0016A8, "Member 'AFortHoagieVehicle::RotorTraceArray' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorWashObjectsTypes) == 0x0016B8, "Member 'AFortHoagieVehicle::RotorWashObjectsTypes' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FortHoagieVehicleConfigs) == 0x0016C8, "Member 'AFortHoagieVehicle::FortHoagieVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RumbleIntensity) == 0x0016D0, "Member 'AFortHoagieVehicle::RumbleIntensity' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FlightModel) == 0x0016D8, "Member 'AFortHoagieVehicle::FlightModel' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bClearPitchInput) == 0x0017E8, "Member 'AFortHoagieVehicle::bClearPitchInput' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bBoosting) == 0x0017E9, "Member 'AFortHoagieVehicle::bBoosting' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostTimeLeft) == 0x0017EC, "Member 'AFortHoagieVehicle::BoostTimeLeft' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostBrakingTimeLeft) == 0x0017F0, "Member 'AFortHoagieVehicle::BoostBrakingTimeLeft' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostCooldown) == 0x0017F4, "Member 'AFortHoagieVehicle::BoostCooldown' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, ShutdownTimer) == 0x0017F8, "Member 'AFortHoagieVehicle::ShutdownTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FoliageDestructionTimer) == 0x0017FC, "Member 'AFortHoagieVehicle::FoliageDestructionTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CrashingScrapingTimer) == 0x001800, "Member 'AFortHoagieVehicle::CrashingScrapingTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CrashingNotMovingTimer) == 0x001804, "Member 'AFortHoagieVehicle::CrashingNotMovingTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bCanSleep) == 0x001808, "Member 'AFortHoagieVehicle::bCanSleep' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bHasAppliedCrashDamage) == 0x001809, "Member 'AFortHoagieVehicle::bHasAppliedCrashDamage' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bOrientedForLanding) == 0x00180A, "Member 'AFortHoagieVehicle::bOrientedForLanding' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bForceNegativeLift) == 0x00180B, "Member 'AFortHoagieVehicle::bForceNegativeLift' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, bExploded) == 0x00180C, "Member 'AFortHoagieVehicle::bExploded' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, AltimeterTraceTimer) == 0x001810, "Member 'AFortHoagieVehicle::AltimeterTraceTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LastRotorImpulseTime) == 0x001814, "Member 'AFortHoagieVehicle::LastRotorImpulseTime' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CriticalExplodeTimer) == 0x001818, "Member 'AFortHoagieVehicle::CriticalExplodeTimer' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, TimeWhileCritical) == 0x00181C, "Member 'AFortHoagieVehicle::TimeWhileCritical' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, TimeWhileLanding) == 0x001820, "Member 'AFortHoagieVehicle::TimeWhileLanding' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftFromOverrideButton) == 0x001824, "Member 'AFortHoagieVehicle::LiftFromOverrideButton' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, BoostDirection) == 0x001828, "Member 'AFortHoagieVehicle::BoostDirection' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LastRotorSweepDirection) == 0x001834, "Member 'AFortHoagieVehicle::LastRotorSweepDirection' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, AltimeterTraceResult) == 0x001840, "Member 'AFortHoagieVehicle::AltimeterTraceResult' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, HoagieStateRep) == 0x0018C8, "Member 'AFortHoagieVehicle::HoagieStateRep' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentHoagieState) == 0x0018CC, "Member 'AFortHoagieVehicle::CurrentHoagieState' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentRotorSpeed) == 0x0018D0, "Member 'AFortHoagieVehicle::CurrentRotorSpeed' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentRotorAngle) == 0x0018D4, "Member 'AFortHoagieVehicle::CurrentRotorAngle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorImpactTraceAngle) == 0x0018D8, "Member 'AFortHoagieVehicle::RotorImpactTraceAngle' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, LiftInputs) == 0x0018DC, "Member 'AFortHoagieVehicle::LiftInputs' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, ServerCriticalHealth) == 0x0018E4, "Member 'AFortHoagieVehicle::ServerCriticalHealth' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorHits) == 0x0018E8, "Member 'AFortHoagieVehicle::RotorHits' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CachedSeatCollision) == 0x0018F8, "Member 'AFortHoagieVehicle::CachedSeatCollision' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorHitLinearImpulse) == 0x001908, "Member 'AFortHoagieVehicle::RotorHitLinearImpulse' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorHitAngularImpulse) == 0x001914, "Member 'AFortHoagieVehicle::RotorHitAngularImpulse' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, HoagieIdleFX_Native) == 0x001920, "Member 'AFortHoagieVehicle::HoagieIdleFX_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, DamageFX_Native) == 0x001928, "Member 'AFortHoagieVehicle::DamageFX_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorWashFX_Native) == 0x001930, "Member 'AFortHoagieVehicle::RotorWashFX_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, HoagieAnimBP_Native) == 0x001938, "Member 'AFortHoagieVehicle::HoagieAnimBP_Native' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FortHoagieVehicleConfigsClass) == 0x001940, "Member 'AFortHoagieVehicle::FortHoagieVehicleConfigsClass' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FortHoagieVehicleSyncConfigsClass) == 0x001948, "Member 'AFortHoagieVehicle::FortHoagieVehicleSyncConfigsClass' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, AltimeterTraceSocketName) == 0x001950, "Member 'AFortHoagieVehicle::AltimeterTraceSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorDamageTraceSocketName) == 0x001958, "Member 'AFortHoagieVehicle::RotorDamageTraceSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, MainRotorCritSocketName) == 0x001960, "Member 'AFortHoagieVehicle::MainRotorCritSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, TailRotorCritSocketName) == 0x001968, "Member 'AFortHoagieVehicle::TailRotorCritSocketName' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, SeatTransition_ToDriver) == 0x001970, "Member 'AFortHoagieVehicle::SeatTransition_ToDriver' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, SeatTransition_ToPassenger) == 0x001978, "Member 'AFortHoagieVehicle::SeatTransition_ToPassenger' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, RotorTraceProfile) == 0x001980, "Member 'AFortHoagieVehicle::RotorTraceProfile' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, FoliageOverlapsBoxTag) == 0x001988, "Member 'AFortHoagieVehicle::FoliageOverlapsBoxTag' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, KillerController) == 0x001990, "Member 'AFortHoagieVehicle::KillerController' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, KillerCauser) == 0x001998, "Member 'AFortHoagieVehicle::KillerCauser' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, ControlState) == 0x0019A0, "Member 'AFortHoagieVehicle::ControlState' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentViewDistanceScale) == 0x0019B8, "Member 'AFortHoagieVehicle::CurrentViewDistanceScale' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentHLODDistanceOverrideScale) == 0x0019BC, "Member 'AFortHoagieVehicle::CurrentHLODDistanceOverrideScale' has a wrong offset!");
static_assert(offsetof(AFortHoagieVehicle, CurrentHLODMaxDrawDistanceScale) == 0x0019C0, "Member 'AFortHoagieVehicle::CurrentHLODMaxDrawDistanceScale' has a wrong offset!");

// Class HoagieRuntime.FortHoagieVehicleAnimInstance
// 0x0130 (0x0570 - 0x0440)
class UFortHoagieVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	uint8                                         Pad_438[0xA0];                                     // 0x0438(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               EngineRotation;                                    // 0x04D8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MainRotorRotation;                                 // 0x04E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               TailRotorRotaton;                                  // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BoosterFanRotation;                                // 0x04FC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        BoostCardinalDirection;                            // 0x0508(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_509[0x1B];                                     // 0x0509(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EngineRotationInterpSpeed;                         // 0x0524(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRotationDuringBoostInterpSpeed;              // 0x0528(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineFlipSpeedThreshold;                          // 0x052C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostDirectionDeadzone;                            // 0x0530(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineFlipDeadzone;                                // 0x0534(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverRoll;                                        // 0x0538(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverYaw;                                         // 0x053C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalSpeed;                                     // 0x0540(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FwdSpeed;                                          // 0x0544(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalBoostDirection;                               // 0x0548(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawBlendSpaceInput;                                // 0x054C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedAcceleration;                            // 0x0550(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_554[0x1];                                      // 0x0554(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldHideBlades;                                 // 0x0555(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostOnCD;                                      // 0x0556(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoostReady;                                     // 0x0557(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingForward;                                  // 0x0558(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReversing;                                      // 0x0559(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingAnyDirection;                             // 0x055A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBoosting;                                       // 0x055B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReverse;                                    // 0x055C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldGoBackToIdle;                               // 0x055D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyBoostAdditive;                         // 0x055E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEngineShuttingOff;                              // 0x055F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Default_ReverseStart;                  // 0x0560(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_BoostLoop_Reverse;                     // 0x0561(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_562[0xE];                                      // 0x0562(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHoagieVehicleAnimInstance">();
	}
	static class UFortHoagieVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHoagieVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortHoagieVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortHoagieVehicleAnimInstance");
static_assert(sizeof(UFortHoagieVehicleAnimInstance) == 0x000570, "Wrong size on UFortHoagieVehicleAnimInstance");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineRotation) == 0x0004D8, "Member 'UFortHoagieVehicleAnimInstance::EngineRotation' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, MainRotorRotation) == 0x0004E4, "Member 'UFortHoagieVehicleAnimInstance::MainRotorRotation' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, TailRotorRotaton) == 0x0004F0, "Member 'UFortHoagieVehicleAnimInstance::TailRotorRotaton' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, BoosterFanRotation) == 0x0004FC, "Member 'UFortHoagieVehicleAnimInstance::BoosterFanRotation' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, BoostCardinalDirection) == 0x000508, "Member 'UFortHoagieVehicleAnimInstance::BoostCardinalDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineRotationInterpSpeed) == 0x000524, "Member 'UFortHoagieVehicleAnimInstance::EngineRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineRotationDuringBoostInterpSpeed) == 0x000528, "Member 'UFortHoagieVehicleAnimInstance::EngineRotationDuringBoostInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineFlipSpeedThreshold) == 0x00052C, "Member 'UFortHoagieVehicleAnimInstance::EngineFlipSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, BoostDirectionDeadzone) == 0x000530, "Member 'UFortHoagieVehicleAnimInstance::BoostDirectionDeadzone' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, EngineFlipDeadzone) == 0x000534, "Member 'UFortHoagieVehicleAnimInstance::EngineFlipDeadzone' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, DriverRoll) == 0x000538, "Member 'UFortHoagieVehicleAnimInstance::DriverRoll' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, DriverYaw) == 0x00053C, "Member 'UFortHoagieVehicleAnimInstance::DriverYaw' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, VerticalSpeed) == 0x000540, "Member 'UFortHoagieVehicleAnimInstance::VerticalSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, FwdSpeed) == 0x000544, "Member 'UFortHoagieVehicleAnimInstance::FwdSpeed' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, LocalBoostDirection) == 0x000548, "Member 'UFortHoagieVehicleAnimInstance::LocalBoostDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, YawBlendSpaceInput) == 0x00054C, "Member 'UFortHoagieVehicleAnimInstance::YawBlendSpaceInput' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, NormalizedAcceleration) == 0x000550, "Member 'UFortHoagieVehicleAnimInstance::NormalizedAcceleration' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldHideBlades) == 0x000555, "Member 'UFortHoagieVehicleAnimInstance::bShouldHideBlades' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsBoostOnCD) == 0x000556, "Member 'UFortHoagieVehicleAnimInstance::bIsBoostOnCD' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsBoostReady) == 0x000557, "Member 'UFortHoagieVehicleAnimInstance::bIsBoostReady' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsMovingForward) == 0x000558, "Member 'UFortHoagieVehicleAnimInstance::bIsMovingForward' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsReversing) == 0x000559, "Member 'UFortHoagieVehicleAnimInstance::bIsReversing' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsMovingAnyDirection) == 0x00055A, "Member 'UFortHoagieVehicleAnimInstance::bIsMovingAnyDirection' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsBoosting) == 0x00055B, "Member 'UFortHoagieVehicleAnimInstance::bIsBoosting' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldReverse) == 0x00055C, "Member 'UFortHoagieVehicleAnimInstance::bShouldReverse' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldGoBackToIdle) == 0x00055D, "Member 'UFortHoagieVehicleAnimInstance::bShouldGoBackToIdle' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bShouldApplyBoostAdditive) == 0x00055E, "Member 'UFortHoagieVehicleAnimInstance::bShouldApplyBoostAdditive' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bIsEngineShuttingOff) == 0x00055F, "Member 'UFortHoagieVehicleAnimInstance::bIsEngineShuttingOff' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bTransition_Default_ReverseStart) == 0x000560, "Member 'UFortHoagieVehicleAnimInstance::bTransition_Default_ReverseStart' has a wrong offset!");
static_assert(offsetof(UFortHoagieVehicleAnimInstance, bTransition_BoostLoop_Reverse) == 0x000561, "Member 'UFortHoagieVehicleAnimInstance::bTransition_BoostLoop_Reverse' has a wrong offset!");

}

