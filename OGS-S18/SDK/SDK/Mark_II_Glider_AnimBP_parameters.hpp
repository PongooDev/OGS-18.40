#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mark_II_Glider_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Mark_II_Glider_AnimBP.Mark_II_Glider_AnimBP_C.ExecuteUbergraph_Mark_II_Glider_AnimBP
// 0x0010 (0x0010 - 0x0000)
struct Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP) == 0x000004, "Wrong alignment on Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP");
static_assert(sizeof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP) == 0x000010, "Wrong size on Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, EntryPoint) == 0x000000, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, CallFunc_Not_PreBool_ReturnValue_1) == 0x000006, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, CallFunc_Not_PreBool_ReturnValue_2) == 0x000007, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, CallFunc_Not_PreBool_ReturnValue_3) == 0x000008, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP, K2Node_Event_DeltaTimeX) == 0x00000C, "Member 'Mark_II_Glider_AnimBP_C_ExecuteUbergraph_Mark_II_Glider_AnimBP::K2Node_Event_DeltaTimeX' has a wrong offset!");

// Function Mark_II_Glider_AnimBP.Mark_II_Glider_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Mark_II_Glider_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Mark_II_Glider_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Mark_II_Glider_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(Mark_II_Glider_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Mark_II_Glider_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'Mark_II_Glider_AnimBP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function Mark_II_Glider_AnimBP.Mark_II_Glider_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Mark_II_Glider_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Mark_II_Glider_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on Mark_II_Glider_AnimBP_C_AnimGraph");
static_assert(sizeof(Mark_II_Glider_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on Mark_II_Glider_AnimBP_C_AnimGraph");
static_assert(offsetof(Mark_II_Glider_AnimBP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'Mark_II_Glider_AnimBP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

