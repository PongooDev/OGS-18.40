#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CoconutShark

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CoconutShark.BP_CoconutShark_C
// 0x00A8 (0x02C8 - 0x0220)
class ABP_CoconutShark_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_CoconutShark_Loop;                              // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SpicySake_Swim_Normal_Loop_Cue;                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mole_SM_Shark_01;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CUBE;                                              // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Delay_Start;                                       // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Travel_Time;                                       // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loop;                                              // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SharkUpdateFreuq;                                  // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tolerance;                                         // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Stinger_OneShot;                                   // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAudioFaderCurve                              Fade_Curve;                                        // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Stinger_OneShot_AC;                                // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fade_Out_Duration;                                 // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeUntilFadeOutTriggers;                          // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AApollo_Waterbody_Ocean_Parent_C> OceanActor;                                        // 0x0290(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	class AApollo_Waterbody_Ocean_Parent_C*       WaterBody;                                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          b_TurnOnRippleFX;                                  // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CoconutShark(int32 EntryPoint);
	void UpdateWaterInfo();
	void ReceiveBeginPlay();
	void StartSharkMovement();
	void CheckForSharkOnScreen();
	void Update_Shark_Pos();
	void GetWaterSurfaceInfoCallable(class AFortWaterBodyActor* WaterBody_0, class USceneComponent* SceneComponent, struct FVector* WaterPlaneLocation, struct FVector* WaterPlaneNormal, struct FVector* WaterSurfacePosition, float* WaterDepth, int32* WaterBodyIdx, struct FVector* WaterVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CoconutShark_C">();
	}
	static class ABP_CoconutShark_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CoconutShark_C>();
	}
};
static_assert(alignof(ABP_CoconutShark_C) == 0x000008, "Wrong alignment on ABP_CoconutShark_C");
static_assert(sizeof(ABP_CoconutShark_C) == 0x0002C8, "Wrong size on ABP_CoconutShark_C");
static_assert(offsetof(ABP_CoconutShark_C, UberGraphFrame) == 0x000220, "Member 'ABP_CoconutShark_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, NS_CoconutShark_Loop) == 0x000228, "Member 'ABP_CoconutShark_C::NS_CoconutShark_Loop' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, SpicySake_Swim_Normal_Loop_Cue) == 0x000230, "Member 'ABP_CoconutShark_C::SpicySake_Swim_Normal_Loop_Cue' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Mole_SM_Shark_01) == 0x000238, "Member 'ABP_CoconutShark_C::Mole_SM_Shark_01' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, CUBE) == 0x000240, "Member 'ABP_CoconutShark_C::CUBE' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Spline) == 0x000248, "Member 'ABP_CoconutShark_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, DefaultSceneRoot) == 0x000250, "Member 'ABP_CoconutShark_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Delay_Start) == 0x000258, "Member 'ABP_CoconutShark_C::Delay_Start' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Travel_Time) == 0x00025C, "Member 'ABP_CoconutShark_C::Travel_Time' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Loop) == 0x000260, "Member 'ABP_CoconutShark_C::Loop' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, SharkUpdateFreuq) == 0x000264, "Member 'ABP_CoconutShark_C::SharkUpdateFreuq' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Tolerance) == 0x000268, "Member 'ABP_CoconutShark_C::Tolerance' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Stinger_OneShot) == 0x000270, "Member 'ABP_CoconutShark_C::Stinger_OneShot' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Fade_Curve) == 0x000278, "Member 'ABP_CoconutShark_C::Fade_Curve' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Stinger_OneShot_AC) == 0x000280, "Member 'ABP_CoconutShark_C::Stinger_OneShot_AC' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, Fade_Out_Duration) == 0x000288, "Member 'ABP_CoconutShark_C::Fade_Out_Duration' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, TimeUntilFadeOutTriggers) == 0x00028C, "Member 'ABP_CoconutShark_C::TimeUntilFadeOutTriggers' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, OceanActor) == 0x000290, "Member 'ABP_CoconutShark_C::OceanActor' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, WaterBody) == 0x0002B8, "Member 'ABP_CoconutShark_C::WaterBody' has a wrong offset!");
static_assert(offsetof(ABP_CoconutShark_C, b_TurnOnRippleFX) == 0x0002C0, "Member 'ABP_CoconutShark_C::b_TurnOnRippleFX' has a wrong offset!");

}

