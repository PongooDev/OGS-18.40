#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetLightSpawnerComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ValetLightSpawnerComponent.ValetLightSpawnerComponent_C
// 0x0060 (0x0110 - 0x00B0)
class UValetLightSpawnerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USpotLightComponent*>            currentLightComponents;                            // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class FString                                 light_SocketName;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UClass*                                 spotLightClass;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     additionalLightTransforms;                         // 0x00E0(0x0010)(Edit, BlueprintVisible)
	bool                                          ownerIsBeingDriven;                                // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          lightsNeedValidation;                              // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         maxLightCount;                                     // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentCVarValue_EnabledState;                     // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          areLightsOn;                                       // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           timerHandle_validateCarLights;                     // 0x0100(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         myRandomInterval;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ValetLightSpawnerComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void spawnLights();
	void clearLights();
	void handleCvarChanged(const class FString& CVarName);
	bool hasAnyLights();
	void addLight(const struct FTransform& RelativeTransform, class FName SocketName);
	bool isOwnerBeingDriven();
	bool shouldLightsBeOn();
	void handlePawnEnterSeat(const TScriptInterface<class IFortVehicleInterface>& Vehicle, class AFortPawn* PlayerPawn, int32 SeatIndex);
	void handlePawnExitSeat(const TScriptInterface<class IFortVehicleInterface>& Vehicle, class AFortPawn* PlayerPawn, int32 SeatIndex);
	void validateCarLights();
	void handleTimeOfDayChanged(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void validateCvar_EnablePhysicalLights();
	void validateNextFrame();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ValetLightSpawnerComponent_C">();
	}
	static class UValetLightSpawnerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UValetLightSpawnerComponent_C>();
	}
};
static_assert(alignof(UValetLightSpawnerComponent_C) == 0x000008, "Wrong alignment on UValetLightSpawnerComponent_C");
static_assert(sizeof(UValetLightSpawnerComponent_C) == 0x000110, "Wrong size on UValetLightSpawnerComponent_C");
static_assert(offsetof(UValetLightSpawnerComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UValetLightSpawnerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, currentLightComponents) == 0x0000B8, "Member 'UValetLightSpawnerComponent_C::currentLightComponents' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, light_SocketName) == 0x0000C8, "Member 'UValetLightSpawnerComponent_C::light_SocketName' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, spotLightClass) == 0x0000D8, "Member 'UValetLightSpawnerComponent_C::spotLightClass' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, additionalLightTransforms) == 0x0000E0, "Member 'UValetLightSpawnerComponent_C::additionalLightTransforms' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, ownerIsBeingDriven) == 0x0000F0, "Member 'UValetLightSpawnerComponent_C::ownerIsBeingDriven' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, lightsNeedValidation) == 0x0000F1, "Member 'UValetLightSpawnerComponent_C::lightsNeedValidation' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, maxLightCount) == 0x0000F4, "Member 'UValetLightSpawnerComponent_C::maxLightCount' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, currentCVarValue_EnabledState) == 0x0000F8, "Member 'UValetLightSpawnerComponent_C::currentCVarValue_EnabledState' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, areLightsOn) == 0x0000FC, "Member 'UValetLightSpawnerComponent_C::areLightsOn' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, timerHandle_validateCarLights) == 0x000100, "Member 'UValetLightSpawnerComponent_C::timerHandle_validateCarLights' has a wrong offset!");
static_assert(offsetof(UValetLightSpawnerComponent_C, myRandomInterval) == 0x000108, "Member 'UValetLightSpawnerComponent_C::myRandomInterval' has a wrong offset!");

}

